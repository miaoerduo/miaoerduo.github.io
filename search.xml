<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>随笔</title>
    <url>/2018/12/13/2018-12-13/</url>
    <content><![CDATA[<p><img src="2018-12-13.bmp" /></p>
<p>今天花了一个侧脸，期间反复修改了不下5次，然后才画成现在这个样子。虽然看起来不是特别的好看，但是在这个过程中，我是真的切实的感受到了自己的进步！</p>
]]></content>
      <categories>
        <category>Illustration</category>
      </categories>
  </entry>
  <entry>
    <title>2B</title>
    <url>/2019/04/13/2019-04-13-2b/</url>
    <content><![CDATA[<p>昨天晚上，终于把Nier的一周目打通了。最后2B小姐姐的眼罩居然掉了。真心好看。所以今天呢，就在没有任何参考的情况下，自己练习了一下头像，感觉效果似乎还可以。难道说，我的插画生涯终于要开始了吗，嘻嘻。</p>
<p><img src="2019-04-13-2b.jpg" /></p>
]]></content>
      <categories>
        <category>Illustration</category>
      </categories>
  </entry>
  <entry>
    <title>因为懒得被画头发而带上帽子的灰度少女</title>
    <url>/2019/07/31/2019-07-31/</url>
    <content><![CDATA[<p><img src="2019-07-31.jpg" /></p>
]]></content>
      <categories>
        <category>Illustration</category>
      </categories>
  </entry>
  <entry>
    <title>国庆快乐</title>
    <url>/2019/10/01/2019-09-30/</url>
    <content><![CDATA[<p>这个是参考了一张Saber的插画。之后绘画的时候是一点都没有再看原图。和官方的Saber比，脸是不太一样。</p>
<p><img src="2019-09-30-saber.png" /></p>
]]></content>
      <categories>
        <category>Illustration</category>
      </categories>
  </entry>
  <entry>
    <title>随笔</title>
    <url>/2020/04/12/2020-04-11/</url>
    <content><![CDATA[<p>这是我花了差不多2天完成的图。期间在女票的建议下，对各个地方的比例都做了大量的修改，才得到目前的效果。</p>
<p><img src="2020-04-11.png" alt="随笔" /></p>
<p>这个手是实在太难画了。光影的效果，目前还需要再练习。接下来的一段时间，期待生活会发生一些改变。</p>
]]></content>
      <categories>
        <category>Illustration</category>
      </categories>
  </entry>
  <entry>
    <title>第一阶段大作业</title>
    <url>/2020/12/30/2020-12-30/</url>
    <content><![CDATA[<p>这是第一阶段的大作业，学习的目标是头像的明暗关系。</p>
<p><img src="2020-12-30.png" alt="大一阶段大作业" /></p>
]]></content>
      <categories>
        <category>Illustration</category>
      </categories>
  </entry>
  <entry>
    <title>20200202</title>
    <url>/2020/02/02/20200202/</url>
    <content><![CDATA[<p>今天是 <strong>20200202</strong> 这个对称的日子，明天也是年后上班的第一天，也是远程办公的一天。今天就画上了一幅。</p>
<p><img src="2020-02-02.png" /></p>
<p><strong>2020</strong> 是艰难的一年，伊朗、科比以及最近无比艰难的肺炎。希望世界和平吧。</p>
]]></content>
      <categories>
        <category>Illustration</category>
      </categories>
  </entry>
  <entry>
    <title>第三阶段 男性身体</title>
    <url>/2021/05/07/2021-05-07/</url>
    <content><![CDATA[<p>这是第三阶段的人体，女性身体画的太挫了，只能画画男性的。</p>
<p><img src="2021-05-07.png" alt="男性人体" /></p>
<p>分步过程图</p>
<p><img src="2021-05-07%20steps.png" alt="分步过程图" /></p>
<p>感觉可以用这个过程图当例子，以后介绍介绍绘画的基本步骤哈。</p>
]]></content>
      <categories>
        <category>Illustration</category>
      </categories>
  </entry>
  <entry>
    <title>材质练习</title>
    <url>/2021/06/09/2021-06-09/</url>
    <content><![CDATA[<p>这个是个作业，改了大概三遍。</p>
<p><img src="%E6%9D%90%E8%B4%A8%E7%BB%83%E4%B9%A0.png" alt="材质" /></p>
]]></content>
      <categories>
        <category>Illustration</category>
      </categories>
  </entry>
  <entry>
    <title>女头练习</title>
    <url>/2021/06/26/2021-06-26/</url>
    <content><![CDATA[<p>日常练习画女头像～</p>
<p><img src="20210626.png" alt="临摹女头" /></p>
<p>绘画步骤</p>
<p><img src="20210626%20steps.png" alt="步骤" /></p>
]]></content>
      <categories>
        <category>Illustration</category>
      </categories>
  </entry>
  <entry>
    <title>女头练习</title>
    <url>/2021/06/29/2021-06-29/</url>
    <content><![CDATA[<p>淘宝买了一堆素材，发现这么一张小精灵，就临摹了一下，原图就是灰色的。</p>
<p><img src="20210629.png" alt="临摹女头" /></p>
]]></content>
      <categories>
        <category>Illustration</category>
      </categories>
  </entry>
  <entry>
    <title>画个小喵咪</title>
    <url>/2021/06/30/2021-06-30/</url>
    <content><![CDATA[<p>和一个志同道合的小伙伴交流了一下插画，她有个作业画了个很萌的狗，所以我也试了下画动物。</p>
<p><img src="cat.png" alt="猫" /></p>
]]></content>
      <categories>
        <category>Illustration</category>
      </categories>
  </entry>
  <entry>
    <title>女头练习</title>
    <url>/2021/08/18/2021-08-18/</url>
    <content><![CDATA[<p>日常练习画女头像～</p>
<p>为了把桌子整理的更简单，于是就把数位屏收藏起来了，打算以后就用一个板子。目前绘画的过程中，感觉脖子时轻松了不少，手眼的GAP似乎也不大。</p>
<p><img src="20210818.png" alt="练习" /></p>
]]></content>
      <categories>
        <category>Illustration</category>
      </categories>
  </entry>
  <entry>
    <title>关于CUDA</title>
    <url>/2015/12/18/about-cuda/</url>
    <content><![CDATA[<blockquote>
<p>小喵的唠叨话：小喵的研究生生涯做的事图像识别相关的内容，主要使用的技术是深度学习。由于研究需要，不免会用到一些开源的程序，比如caffe（一个卷积神经网络的训练框架）等。使用卷积神经网络，可以很好的解决各类问题，但同时也面临着高昂的计算的问题，而GPU机器，就是一个很好的超级计算机。虽然小喵很少直接编写GPU的程序，但是通过对GPU的更深入理解，可以帮助很好的理解各种框架，以及做必要的修改。 好啦，闲话少说，我们言归正传。 本文中，我们主要介绍以下几个问题：</p>
</blockquote>
<span id="more"></span>
<ol type="1">
<li><strong>什么是GPU</strong></li>
<li><strong>什么是CUDA</strong></li>
<li><strong>如何学习CUDA</strong></li>
</ol>
<h2 id="一我们每个人都拥有自己的超级计算机">一、我们每个人都拥有自己的超级计算机</h2>
<p>现在，主流的电脑都会配置一个或多个GPU，也叫做显卡。我们都知道，玩大型游戏少不了一块好显卡，做视频编辑也需要好显卡，现在我要说，做科学计算更需要一块好显卡。 那么显卡具体有什么功能呢？ 答案是：计算 是的，显卡的实际功能就是计算，尤其是简单的大量的计算。 我们在玩游戏的时候，会有很多华丽的场景，特效，然而只有好的显卡才能让我们开启全特效。场景的渲染其实就是一个计算的过程。比如，游戏中人物的影子，精细的游戏中的影子并不是简单的贴图，而是根据光照，物体的空间分布和大小形状，来计算出物体在地面或者其他物体上的投影，所以才能达到以假乱真的强烈视觉体验。 视频编辑也是如此，尤其是渲染动画的时候，同样是通过GPU强大的计算能力，才能将各种指令设置，变成我们所见到的各种形形色色的特效。 最后，我们知道科研过程的关键有一点就是计算，既然GPU有这如此强大的能力（有多强大，我们稍后介绍），如果可以用于科研，岂不是很强大的工具？ 除此之外，GPU还可以用于轨道模拟，3D建模等等，总之只要是需要计算的地方，都很可能可以通过使用GPU来优化。</p>
<p>那么GPU的计算能力有多强呢？这里引用NVIDIA的一张图像来说明。</p>
<p><img src="012516_1253_CUDA.png" alt="cuda" /></p>
<center>
图1 CPU和GPU的每秒钟的浮点数处理次数
</center>
<p>这是一张摘自NVIDIA官网的一张图，有木有很吃惊。随着时间的推进，GPU的发展速度远超过CPU，目前GPU的计算能力已然超过CPU几十倍！ 单从构造上说，一个GPU通常会有16个SM（可以理解为CPU的核，目前CPU常见的是双核和四核），每个SM又同时存在32个SP（现在应该变成了更多数目的CUDA core），即可以同时处理32个数（CPU一个核一次只能处理一个数），另外GPU拥有远多于CPU的寄存器和运算单元。除此之外，GPU的指令模式（SPMD）和CPU（MIMD）完全不同，内存管理也最大化的显示的交给程序员来掌控。如果设计合理，将程序加速100倍也毫不过分。</p>
<p>这就是GPU，隐藏在我们电脑中的超级计算器。</p>
<h2 id="二我们如何使用gpu">二、我们如何使用GPU</h2>
<p>早期的GPU主要用于图像处理。而一群脑洞大开的科学家发现GPU的具有强大的计算潜能，如果合理挖掘，定前途无可限量。于是开始了早期的GPU用于科学计算的编程。由于GPU本身主要用于处理对象，因此访问GPU，必须通过相关的图像接口。但是只要，将待处理的数据和运算构造成GPU中定义的图像和操作的形式，那么GPU就可以求解。</p>
<p>从而就出现了两个问题：</p>
<ol type="1">
<li>早期的GPU只支持OpenGL等图像处理接口，因此，在用于计算之前，我们不得不先学习图像操作的这些知识。</li>
<li>我们掌握了图像接口的编程以后，还要把我们要处理的问题合理设计成能够用图像处理方式解决的问题。</li>
</ol>
<p>从各种意义上来说，这都不是一件很容易的事情。 那么，既然我们对GPU的计算能力如此垂涎，为什么不能创造出适合普通程序员编写GPU程序的方法呢？</p>
<p>当然可以！</p>
<p>这时就不得不提NVIDIA这家公司。我们的显卡通常分为两类，A卡和N卡。A是AMD，N就是NVIDIA（最近似乎AMD也开始支持CUDA了）。NVIDIA为了让GPU变得更通用，便选取了当时最流行的C语言作为基本语言（现在也很流行），通过对C语言进行拓展（增加了一些关键字等），实现了使用C语言编写GPU程序的壮举，同时很好的封装了GPU的图像接口，抽象出独立于图像的程序和内存模型，让程序员们在不了解图像接口的情况下，也能编写出高效的GPU程序，受过广大程序员，科研人员的宠爱！这就是CUDA！一个我们最熟悉的全新的语言！</p>
<p>目前CUDA已经支持C，C++和Python。并且有了很多快速运算的代数库，可以满足大多数的应用的需求。</p>
<h2 id="三cuda学习会不会很难">三、CUDA学习会不会很难</h2>
<p>最后，当然就要说到如何学习CUDA。</p>
<p>之前也提到过，CUDA语言就是拓展版的C语言，语法上没有什么难度。我们只需要知道几个拓展修饰关键字，以及工作方式即可。之后我们需要学习CUDA的硬件结构与线程网格模型。再然后是最重要的主要的内存（GPU上的内存，通常也称为显存）的知识。GPU有寄存器内存，共享内存，全局内存，常量内存，纹理内存五种，每种都有其独特的特性。熟悉各种内存的特性，会对之后的GPU编程有极大地帮助。最后了解CUDA编程的常用的算法策略，熟悉CUDA的代数库，多显卡编程等。</p>
<p>小喵会一直持续更新该类别的博客，学习并分享。</p>
<p>以上便是这篇博客的主要内容。</p>
<p><strong>最后，转载请注明出处。</strong></p>
<p>欢迎转载和分享~</p>
]]></content>
      <categories>
        <category>C++</category>
        <category>CUDA</category>
      </categories>
  </entry>
  <entry>
    <title>服务端基本概念和指标</title>
    <url>/2021/12/16/architecture-terminology/</url>
    <content><![CDATA[<p>这里主要介绍服务端架构工作中的一些常见的概念和指标，在我们部署、上线等运维工作时，方便排查问题，以及交流时的语义一致。</p>
<h2 id="上游和下游-upstream-and-downstream">上游和下游 upstream and downstream</h2>
<p>一般在谈论服务和调用关系的时候，我们会使用上游和下游来表示服务间的相关依赖。但是对于上下游的定义，会视情况而定的。</p>
<p>Stack Overflow上有个相同的问题：<a href="https://stackoverflow.com/questions/32364579/upstream-downstream-terminology-used-backwards-e-g-nginx">definition - Upstream / downstream terminology used backwards? (E.g. nginx) - Stack Overflow</a></p>
<span id="more"></span>
<p>以下是点赞最多的回答的节选：</p>
<p>Formal definition was added later, in <a href="https://www.rfc-editor.org/rfc/rfc2616#section-1.3">RFC 2616</a>:</p>
<blockquote>
<p>upstream/downstream</p>
<p>Upstream and downstream describe the flow of a message: all messages flow from upstream to downstream.</p>
</blockquote>
<p>According to this definition:</p>
<ul>
<li>if you are looking at a request, then the client is upstream, and the server is downstream;</li>
<li>in contrast, if you are looking at a response, then the client is downstream, and the server is upstream.</li>
</ul>
<p>中文意思是：</p>
<ol type="1">
<li>如果是从请求的角度去看，那么客户端是服务端的上游，服务端是客户端的下游；</li>
<li>如果是从返回数据的角度来看，那么数据是从服务端返回给了客户端，因此服务端是客户端的上游，客户端是服务端的下游。</li>
</ol>
<p>在本文中，我们强调的是服务之间的调用关系，因此是以“<strong>请求</strong>”的角度来看到，即按照<strong>客户端为上游</strong>，<strong>服务端为下游</strong>的说法。</p>
<p>另外，在讨论A服务将数据写入一个消息队列，B服务消费消息队列的信息的这种情况，我们是按照数据的流向来定义上下游，此时，A为上游，B为下游。</p>
<h2 id="扇入和扇出-fan-in-and-fan-out">扇入和扇出 fan-in and fan-out</h2>
<p>扇入/扇出，在百度百科中有比较好的定义：<a href="https://baike.baidu.com/item/%E6%89%87%E5%87%BA%E8%83%BD%E5%8A%9B/5150258">扇出能力_百度百科 (baidu.com)</a></p>
<blockquote>
<p>在<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1">软件设计</a>中，<a href="https://baike.baidu.com/item/%E6%89%87%E5%85%A5">扇入</a>和扇出的概念是指应用程序模块之间的层次调用情况。</p>
<p>按照<a href="https://baike.baidu.com/item/%E7%BB%93%E6%9E%84%E5%8C%96%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95">结构化设计方法</a>，一个应用程序是由多个功能相对独立的模块所组成。</p>
<p>扇入：是指直接调用该模块的上级模块的个数。扇入大表示模块的复用程度高。</p>
<p>扇出：是指该模块直接调用的下级模块的个数。扇出大表示模块的复杂度高，需要控制和协调过多的下级模块；但扇出过小（例如总是1）也不好。扇出过大一般是因为缺乏中间层次，应该适当增加中间层次的模块。扇出太小时可以把下级模块进一步分解成若干个子功能模块，或者合并到它的上级模块中去。</p>
<p>设计良好的<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E7%BB%93%E6%9E%84">软件结构</a>，通常顶层扇出比较大，中间扇出小，底层模块则有大<a href="https://baike.baidu.com/item/%E6%89%87%E5%85%A5">扇入</a>。</p>
</blockquote>
<h2 id="服务性能指标">服务性能指标</h2>
<p>在观察一个服务时，我们可以从多种角度去判定。</p>
<h3 id="cpu负载-内存占用">CPU负载 &amp; 内存占用</h3>
<p>如果服务的响应变慢，延时增高，我们优先需要查看机器的负载情况。</p>
<p>这两个比较简单，使用常用的<code>top</code>命令就可以看到。另外使用<code>top -H</code>可以看到线程级别的占用。以下是<code>top</code>的结果。</p>
<p><img src="linux-top.png" alt="Linux Top" /></p>
<p>这里红色的框表示这个进程的<strong>CPU的占用</strong>，这个数字表示占用了多少CPU核。在4核的机器上，单个进程的占用可以达到300%+。</p>
<p>蓝色的框表示<strong>内存占用</strong>，这里是该进程对整个机器的内存的占用情况。</p>
<p>顺便介绍一下每一列的含义：</p>
<ul>
<li><code>PID</code>: 进程编号</li>
<li><code>USER</code>: 启动该进程的用户名</li>
<li><code>PR</code>: 进程优先级</li>
<li><code>NI</code>: nice值，越低表示优先级越高</li>
<li><code>VIRT</code>: virtual memory，进程使用的虚拟内存总量，单位：kb。VIRT=SWAP+RES</li>
<li><code>RES</code>: 进程使用的、未被换出的物理内存大小，单位：kb。RES=CODE+DATA</li>
<li><code>SHR</code>: 共享内存大小，单位：kb</li>
<li><code>S</code> 进程状态
<ul>
<li><code>D</code>: 不可中断的睡眠状态</li>
<li><code>R</code>: 运行</li>
<li><code>S</code>: 睡眠</li>
<li><code>T</code>: 跟踪 / 停止</li>
<li><code>Z</code>: 僵尸进程</li>
</ul></li>
<li><code>%CPU</code>: 上次更新到现在的 CPU 时间占用百分比，100%表示用满单核的资源，4核机器理论上限400%</li>
<li><code>%MEM</code>: 内存占用百分比</li>
<li><code>TIME+</code>: 进程使用的 CPU 时间总计，精确到 1/100 秒</li>
<li><code>COMMAND</code>: 命令名 / 命令行</li>
</ul>
<p>接下来介绍一下我遇见过的一些案例：</p>
<ol type="1">
<li>服务升级后，延时稳定上涨2ms</li>
</ol>
<p>这种情况下，一般先对比上线前后的CPU占用，发现新版服务的CPU占用上涨（一般服务都有自己的状态看板）。之后查看服务更新的代码，确定是有新增的功能。</p>
<p>此时，需要评估新增功能对资源的消耗是否符合预期。不符合，则考虑回滚，符合则保持。</p>
<ol start="2" type="1">
<li>服务重启，延时上涨，一段时间后恢复</li>
</ol>
<p>这种情况，一般是服务自身内存有Cache数据，服务重启之后所有的Cache情况，此时对于所有的请求，都必须重新请求一次下游。数据的获取和解析需要额外的时间和CPU，以及内存的申请，因此延时上涨。一段时间后，Cache的命中率和重启前一致，延时正常。</p>
<p>这里需要注意的是，服务的Cache清空，导致对下游的请求里一次性增大，有可能会造成下游的<strong>雪崩</strong>问题。因此一方面下游需要做好应对策略，另一方面，上游的服务也尽量保持小粒度的滚动升级，不要一次性全部升级。</p>
<h3 id="带宽">带宽</h3>
<p>这篇文章有比较详细的介绍：<a href="https://blog.csdn.net/xc_zhou/article/details/100670129">[656]linux查看服务器带宽_周小董-CSDN博客_linux 查看带宽</a></p>
<p>通过<code>nload</code>工具（机器不存在的话，可以<code>apt install</code>安装）可以比较方便的查看网卡的流入流出的流量。</p>
<p>一般对于存放数据的服务，流量大的时候会存在带宽打满的情况。此时服务的CPU可能负载并不高，但是上游的延时或者错误率上涨。这里的带宽包括了单机、交换机等的带宽。</p>
<p>这里我也见过几次带宽导致的问题。</p>
<p>主要的现象是，客户端的调用时间远大于服务端的内部时间。这基本上可以认为是网络传输的问题。有两种可能：</p>
<ol type="1">
<li>带宽打满。这种情况只能找运维了。</li>
<li>跨机房。一般为了优化服务调用，会在一个机房部署整套的相关服务，这里RPC调用会优先在同机房内进行。在容灾或者其他场景下，有可能有跨机房的需求，这样延时势必会上涨。</li>
</ol>
<h2 id="接口指标">接口指标</h2>
<h3 id="qpstps">QPS/TPS</h3>
<ul>
<li>QPS (Queries Per Second)，每秒查询率。表示服务每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。</li>
<li>TPS（Transactions Per Second），事务数/秒。它是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。</li>
</ul>
<p>上面的概念是照搬的其他的博客的说法。我在日常工作中，基本上没有遇到过TPS的概念。</p>
<p>对于QPS，由于每个服务都是以集群的方式部署，所以QPS分为<strong>整体QPS</strong>和<strong>单机QPS</strong>。我们可以粗略的认为<code>整体QPS=单机QPS x 机器数</code>。但实际上，由于一致性Hash等策略，每台机器的负载可能不均，这是一些问题排查的干扰项，我们在后续的一致性Hash和Shard的章节具体介绍。</p>
<h3 id="并发数">并发数</h3>
<p>并发数，系统同时能够处理的请求/事务数量。注意，这里只是处理，并不是处理完。</p>
<h3 id="响应时间-latency">响应时间 &amp; Latency</h3>
<p>响应时间即完成一次事务所需要的时间。一般从AVG、PCT90、PCT95、PCT99（PCT99可以简称P99）等多个维度去看。有时候也叫Latency。</p>
<p>需要注意的是，时延有服务端和客户端两个视角。一般可以理解: <code>客户端时延 = 服务端时延 + 网络时延</code>。</p>
<ul>
<li>AVG: Average，表示平均Latency</li>
<li>PCT90: 将延时由小到大排列，90%的位置的时延。即90%的请求可以在XXX时间内得到响应</li>
<li>PCT99: 99%的请求可以在XXX时间内得到响应</li>
</ul>
<p>一般其实我其实主要看AVG和PCT99两个指标。一般新上线功能的时候，AVG和P99不应该有大的变化。如果有，则需要分析是否符合预期。</p>
<p>在线上如果出现报警，也可以观察这两个指标。</p>
<h4 id="客户端时延-服务端时延">客户端时延 &gt; 服务端时延</h4>
<p>网络传输需要时间，所以肯定有差异。如果差异较大，考虑是否是数据量太大、带宽不足或跨机房。</p>
<h4 id="客户端时延-服务端时延-1">客户端时延 ＜ 服务端时延</h4>
<p>客户端设置了超时，提前结束的响应。而服务端继续执行。浪费算力。</p>
<h4 id="avg变化小-pct99变化小">AVG变化小 PCT99变化小</h4>
<p>正常状态。也可以和历史的时延对照来看。</p>
<h4 id="avg变化小-pct99变化大">AVG变化小 PCT99变化大</h4>
<p>这种情况，一般是单机/小集群的问题。1%的机器的延时上涨就会影响P99的变化，但对AVG影响较小。</p>
<p>因此可能是小流量的实验或者机器故障。</p>
<h4 id="avg变化大-pct99变化小">AVG变化大 PCT99变化小</h4>
<p>这种有点反直觉。 一种可能是本身服务超时严重，pct99就等于设置的超时时间。 或者服务端拒绝响应，被拒绝的请求的延时就基本上等于0。而观察的时候没有区分是成功或是失败的响应，就可能出现这种现象。</p>
<h4 id="avg变化大-pct99变化大">AVG变化大 PCT99变化大</h4>
<p>全量服务变更或者故障，建议高优排查。</p>
<h3 id="错误率-状态码">错误率 &amp; 状态码</h3>
<p>顾名思义，表示请求错误的比例。这里的错误有两种: 框架错误和业务错误。</p>
<ol type="1">
<li>框架错误，包括服务故障或压力导致的无法访问。例如连接超时、服务地址不存在、rpc method没对齐等错误。</li>
<li>业务错误，服务本身状态良好，但由于请求缺少相关字段，或者服务的下游故障等，导致该服务无法获取到正确结果。这时，需要服务返回业务的状态码。</li>
</ol>
<p>一般框架协议会提供一套错误码机制，比如http的状态码，200表示success等。 同时在框架状态码为success时，接口一般会返回业务状态码，表示业务的执行情况。比如“用户未登录”、“token无效”、“success”等。 通过精细化状态码的含义，可以有效的协助我们有区分性地排查架构和业务问题。</p>
<h2 id="日志打点埋点">日志、打点、埋点</h2>
<h3 id="日志">日志</h3>
<p>一般就是我们程序运行输出的文本信息。最简单的日志系统就是把日志文件存在在服务所在的机器上。需要排查问题的时候登录到对应的机器，查看日志文件。 常见的有很多日志库，<code>spdlog</code>，<code>log4cpp</code>等。在写本文的时候，刚好爆出了<code>log4j</code>这个日志库的命令注入的bug。</p>
<p>一般一条日志就是一行文本。包含了日期，级别，日志所在文件和行号，具体信息等。可以通过配置来定制。日志级别常见的有Error, Warning, Info, Debug, Trace等。 也有公司会将日志写入ElasticSearch等引擎，便于问题排查和回溯。</p>
<h3 id="打点">打点</h3>
<p>打点也是日志的一种，不同于常规日志的简单的记录功能。打点的数据会被汇总并做聚合分析，常见的打点类型有计数counter，记时timer和存值store。以及tag，便于按条件过滤。</p>
<ul>
<li>计数可以统计qps等。</li>
<li>记时可以分析服务响应时间等，比如前面的pct99等指标。</li>
<li>存值一般就写入当前内存数，cpu使用数，缓存大小等，方便分析服务状态。</li>
</ul>
<p>打点系统一般包括数据采集、聚合、查询、可视化等部分。 相关的开源工具有Prometheus，grafana等，这里我也了解不多。</p>
<h3 id="埋点">埋点</h3>
<p>埋点一般指网页或者客户端的打点日志。比如用户点击了一个视频，在某个新闻停留多长时间，下载了app，充值，点击购物车或者购买商品等。 客户端埋点数据会实时或者定时的上传。(部分数据可能需要广告主等回传) 一般一次完整的交互过程会有一个唯一的trace_id，每一个环节的日志都包含了trace_id。因此通过trace_id对服务端和客户端的日志进行关联，我们就可以还原出一次交互的完整生命周期。 公司可以利用这些数据做用户画像，训练模型，提供更个性化的服务。</p>
<p>更可怕的是，不同的公司会共享这部分数据。比如当在微信搜索某件商品后，打开京东，会给你推荐相关的产品。可见大数据无处不在。还好，相关的政策在不断的提出，相信信息滥用的情况会逐渐好转。</p>
<h2 id="其他的概念">其他的概念</h2>
<p>这里有一些服务相关的概念，我平时接触的也很少。仅记录一下。</p>
<h3 id="降级-熔断-限流">降级-熔断-限流</h3>
<p>关于降级，熔断，限流，知乎的这篇文章有比较好的介绍。<a href="https://zhuanlan.zhihu.com/p/61363959">降级-熔断-限流-傻傻分不清楚 - 知乎 (zhihu.com)</a></p>
<h3 id="反压">反压</h3>
<p>这个概念主要出现在数据流的任务中。比如A服务将数据写入消息队列，B服务消费消息队列。如果B服务处理的过慢，会导致A服务必须降速或停止写入，否则消息队列会挤压大量的任务。 一般情况下B的处理效率会比A高的，因此消息队列一直很空。但当B出现GC，或者依赖的下游抖动时，B的处理效率可能会短时变差，从而对A造成反压，处理不当的话，会反压更上游的服务。</p>
<p>我见到的反压一般都是短时的，通过重启就可以较好的缓解。这里需要保障重启之后的数据状态可以恢复，或者丢弃的任务不影响整体的效果。 如果重启无效，还可以考虑上游做流量降级。甚至直接丢弃当前队列的数据。 故障是随时都会发生的，我们能做的无非是未雨绸缪和择祸从轻。</p>
<h3 id="ebpf">eBPF</h3>
<p>eBPF是一种让内核可编程的技术。 <a href="https://zhuanlan.zhihu.com/p/182344856" class="uri">https://zhuanlan.zhihu.com/p/182344856</a></p>
<p>比如实时监控主机的内存、CPU、带宽等功能均可以通过该技术来实现。</p>
<p>这里为什么专门记录一下呢，是因为之前有线上问题最终排查是主机上的一个eBPF程序里维护了一个低性能的map结构，占用大量CPU。因此有时候服务的性能并不完全由自己的硬件和程序决定。还存在不知道哪里来的第三方。</p>
<h3 id="绑核">绑核</h3>
<p>这个一般是指设置程序的CPU亲和度。</p>
<p>比如某些嵌入式设备存在不同规格的CPU，在测试性能时可能会出现多次测试的结果差异很大的情况，大概率是执行程序的核心差异导致的。一般使用 <code>taskset</code> 命令。</p>
<p>在服务部署也有类似的问题，目前使用k8s进行服务部署，单个物理机会同时部署多个实例。通过绑核的操作，可以使程序(尽量)在固定的CPU运行，这样在NUMA架构下会更加友好。</p>
<h2 id="写在后面">写在后面</h2>
<p>本文介绍了许多我们谈论架构时常见的名词，以及比较简单的案例和分析。</p>
<p>由于概念的归类难以统一，因此本文的组织结构也并不严谨。每种专业术语的定义虽然也在网上查了下，仍会存在不准确的情况。 在我的日常工作，暂时还没有因为术语的不对齐而导致的误解，相信本文的介绍总体上还算正确，有问题请及时指正。</p>
<p>至此，本文就结束了。如果想到新的有意思的概念，我会继续在这里补充。</p>
<p>期待早日完成下一篇博客。</p>
]]></content>
      <categories>
        <category>Architecture</category>
      </categories>
  </entry>
  <entry>
    <title>基于Caffe的Large Margin Softmax Loss的实现（一）</title>
    <url>/2016/10/01/caffe-large-margin-softmax-1/</url>
    <content><![CDATA[<blockquote>
<p>小喵的唠叨话：在写完上一次的博客之后，已经过去了2个月的时间，小喵在此期间，做了大量的实验工作，最终在使用的DeepID2的方法之后，取得了很不错的结果。这次呢，主要讲述一个比较新的论文中的方法，L-Softmax，据说单model在LFW上能达到98.71%的等错误率。更重要的是，小喵觉得这个方法和DeepID2并不冲突，如果二者可以互补，或许单model达到99%+将不是梦想。</p>
</blockquote>
<span id="more"></span>
<p>和上一篇博客一样，小喵对读者做了如下的假定：</p>
<ol type="1">
<li>了解Deep Learning的基本知识。</li>
<li>仔细阅读过L-Softmax的论文，了解其中的数学推导。</li>
<li>使用Caffe作为训练框架。</li>
<li>即使不满足上述3条，也能持之以恒的学习。</li>
</ol>
<p>L-Softmax的论文：Large-Margin Softmax Loss for Convolutional Neutral Networks Google 一下，第一条应该就是论文的地址，鉴于大家时间有限，小喵把原文地址也贴出来了，但不保证长期有效。<a href="http://jmlr.org/proceedings/papers/v48/liud16.pdf">http://jmlr.org/proceedings/papers/v48/liud16.pdf</a> 这里我们也将整个系列分几部分来讲。</p>
<h2 id="一margin与lambda">一、margin与lambda</h2>
<p>margin和lambda这两个参数是我们这篇博客的重点。也是整篇论文的重点。对于分类的任务，每个样本都会有N的输出的分数（N的类别），如果在训练中，人为的使正确类别的得分变小，也就是说加大了区分正确类别的难度，那么网络就会学习出更有区分能力的特征，并且加大类间的距离。作者选用的加大难度的方式就是改变最后一个FC层中的weight和特征之间的角度值，角度增大的倍数就是margin，从而使特定类别的得分变小。而第二个参数lambda是为了避免网络不收敛而设定的，我们之后会讲到。</p>
<p>为了实现这个效果，我们需要设计一个新的层，<code>large_margin_inner_product_layer</code>。这个层和一般的 <code>inner_product_layer</code> 很相似，但是多了特定类别削弱的功能。</p>
<p>考虑到这个层是有参数的，我们需要在 <code>caffe.proto</code>（<code>caffe_home/src/caffe/proto/caffe.proto</code>）中做一些修改。这里的定义是按照 <code>protobuf</code> 的语法写的，简单的修改只要照着其他的参数来改写就好。</p>
<p>首先定义我们的这个层的参数。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">message LargeMarginInnerProductParameter &#123;
  optional uint32 num_output = 1; // The number of outputs for the layer
  optional bool bias_term = 2 [default = true]; // whether to have bias terms
  optional FillerParameter weight_filler = 3; // The filler for the weight
  optional FillerParameter bias_filler = 4; // The filler for the bias

  // The first axis to be lumped into a single inner product computation;
  // all preceding axes are retained in the output.
  // May be negative to index from the end (e.g., -1 for the last axis).
  optional int32 axis = 5 [default = 1];
  // Specify whether to transpose the weight matrix or not.
  // If transpose == true, any operations will be performed on the transpose
  // of the weight matrix. The weight matrix itself is not going to be transposed
  // but rather the transfer flag of operations will be toggled accordingly.
  optional bool transpose = 6 [default = false];
  optional uint32 margin = 7 [default = 1];
  optional float lambda = 8 [default = 0];
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>参数的定义和 <code>InnerProductParameter</code> 非常相似，只是多了两个参数 <code>margin</code> 和 <code>lambda</code>。</p>
<p>之后在 <code>LayerParameter</code> 添加一个可选参数（照着 <code>InnerProductParameter</code> 写就好）。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">optional LargeMarginInnerProductParameter large_margin_inner_product_param = 147;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这时，喵粉可能很在意这个147是怎么回事。其实呢，在protobuf中，每个结构中的变量都需要一个id，只要保证不重复即可。我们在LayerParameter的最开始可以看到这么一行注释：</p>
<p><img src="next-availabel-layer-id.jpg" alt="next-availabel-layer-id" /></p>
<p>说明下一个有效的id是147。这里我们新加的参数就果断占用了这个id。修改之后，建议把注释改一下（不要人为的挖坑）：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">LayerParameter next available layer-specific ID: 148 (last added: large_margin_inner_product_param)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>避免之后再新加层的时候出问题。 工作完毕，我们就可以在 <code>train_val.prototxt</code> 中用这种方式使用这个新层了（具体的使用，后面再说）：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">layer &#123;
  name: "fc2"
  type: "LargeMarginInnerProduct"
  bottom: "fc1"
  bottom: "label"
  top: "fc2"
  param &#123;
    lr_mult: 1
    decay_mult: 1
  &#125;
  param &#123;
    lr_mult: 0
    decay_mult: 0
  &#125;
  large_margin_inner_product_param &#123;
    num_output: 10000
    margin: 2
    lambda: 0
    weight_filler &#123;
      type: "xavier"
    &#125;
  &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="二运筹帷幄之成员变量">二，运筹帷幄之成员变量</h2>
<p>我们刚刚在 <code>caffe.proto</code> 中，添加了新参数的定义。而事实上，我们还没有这个层的具体实现。这部分，主要介绍我们需要的临时变量。</p>
<p>首先，我们要理清整个计算的流程。</p>
<p>先看前馈。</p>
<p>第一步，需要求出W和x的夹角的余弦值：</p>
<p><span class="math display">\[
cos(\theta_j)=\frac{W_j^Tx_i}{\|W_j\|\|x_i\|} 
\]</span></p>
<p>第二步，计算m倍角度的余弦值：</p>
<p><span class="math display">\[
\cos(m\theta_i)=\sum_n(-1)^n{C_m^{2n}\cos^{m-2n}(\theta_i)\cdot(1-\cos(\theta_i)^2)^n}, (2n\leq m)
\]</span></p>
<p>第三步，计算前馈：</p>
<p><span class="math display">\[
f_{y_{i}}=(-1)^k\cdot\|W_{y_{i}}\|\|x_{i}\|\cos(m\theta_i)-2k\cdot\|W_{y_i}\|\|x_i\|
\]</span></p>
<p>k是根据 <span class="math inline">\(\cos(\theta)\)</span> 的取值决定的。</p>
<p>后馈比前馈要复杂一些，不过使用的变量也是一样的。因此我们可以编写自己的头文件了。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">CAFFE_LARGE_MARGIN_INNER_PRODUCT_LAYER_HPP_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CAFFE_LARGE_MARGIN_INNER_PRODUCT_LAYER_HPP_</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/blob.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/layer.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/proto/caffe.pb.h"</span></span>

<span class="token keyword">namespace</span> caffe <span class="token punctuation">&#123;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">LargeMarginInnerProductLayer</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Layer</span><span class="token operator">&lt;</span><span class="token class-name">Dtype</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">explicit</span> <span class="token function">LargeMarginInnerProductLayer</span><span class="token punctuation">(</span><span class="token keyword">const</span> LayerParameter<span class="token operator">&amp;</span> param<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token generic-function"><span class="token function">Layer</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">LayerSetUp</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Reshape</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">virtual</span> <span class="token keyword">inline</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">"LargeMarginInnerProduct"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token comment">// edited by miao</span>
  <span class="token comment">// LM_FC层有两个bottom</span>
  <span class="token keyword">virtual</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">ExactNumBottomBlobs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token comment">// end edited</span>
  <span class="token keyword">virtual</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">ExactNumTopBlobs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

 <span class="token keyword">protected</span><span class="token operator">:</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Forward_cpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Forward_gpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Backward_cpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> propagate_down<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Backward_gpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> propagate_down<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> M_<span class="token punctuation">;</span>
  <span class="token keyword">int</span> K_<span class="token punctuation">;</span>
  <span class="token keyword">int</span> N_<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> bias_term_<span class="token punctuation">;</span>
  Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span> bias_multiplier_<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> transpose_<span class="token punctuation">;</span>  <span class="token comment">///&lt; if true, assume transposed weights</span>

  <span class="token comment">// added by miao</span>

  <span class="token comment">// 一些常数</span>
  Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span> cos_theta_bound_<span class="token punctuation">;</span>   <span class="token comment">// 区间边界的cos值</span>
  Blob<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> k_<span class="token punctuation">;</span>                   <span class="token comment">// 当前角度theta所在的区间的位置</span>
  Blob<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> C_M_N_<span class="token punctuation">;</span>               <span class="token comment">// 组合数</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> margin<span class="token punctuation">;</span>            <span class="token comment">// margin</span>
  <span class="token keyword">float</span> lambda<span class="token punctuation">;</span>                   <span class="token comment">// lambda</span>

  Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span> wx_<span class="token punctuation">;</span>                <span class="token comment">// wjT * xi</span>
  Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span> abs_w_<span class="token punctuation">;</span>             <span class="token comment">// ||wj||</span>
  Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span> abs_x_<span class="token punctuation">;</span>             <span class="token comment">// ||xi||</span>
  Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span> cos_t_<span class="token punctuation">;</span>             <span class="token comment">// cos(theta)</span>
  Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span> cos_mt_<span class="token punctuation">;</span>            <span class="token comment">// cos(margin * theta)</span>

  Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span> dydw_<span class="token punctuation">;</span>              <span class="token comment">// 输出对w的导数</span>
  Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span> dydx_<span class="token punctuation">;</span>              <span class="token comment">// 输出对x的导数</span>
  <span class="token comment">// end added</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>  <span class="token comment">// namespace caffe</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// CAFFE_LARGE_MARGIN_INNER_PRODUCT_LAYER_HPP_</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里主要是复制了 <code>inner_product_layer.hpp</code>，然后做了一点修改。具体是增加了几个成员变量，同时改了 <code>ExactNumBottomBlobs</code> 的返回值，因为我们的这个层磁带 <code>bottom</code> 需要两个，前一层的 <code>feature</code> 和样本的 <code>label</code>。</p>
<h2 id="三内存和常量的初始化">三、内存和常量的初始化</h2>
<p>这部分，主要给我们的各个成员变量分配内存，同时给几个常量进行初始化。这里也是照着 <code>inner_product_layer.cpp</code> 来写的，在 <code>setup</code> 的时候，增加了一些用于初始化的代码，并删除了 <code>forward_cpu</code> 和 <code>backwark_cpu</code> 的具体实现。</p>
<p>修改之后的代码如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/filler.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/layers/large_margin_inner_product_layer.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/util/math_functions.hpp"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.14159265</span></span></span>

<span class="token keyword">namespace</span> caffe <span class="token punctuation">&#123;</span>

<span class="token keyword">int</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    f <span class="token operator">*=</span> n<span class="token punctuation">;</span>
    <span class="token operator">--</span> n<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> f<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">LargeMarginInnerProductLayer</span><span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">LayerSetUp</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">const</span> <span class="token keyword">int</span> axis <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">CanonicalAxisIndex</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token operator">-></span>layer_param_<span class="token punctuation">.</span><span class="token function">large_margin_inner_product_param</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// added by miao</span>
  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">wx_shape</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  wx_shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span>wx_<span class="token punctuation">.</span><span class="token function">Reshape</span><span class="token punctuation">(</span>wx_shape<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span>abs_w_<span class="token punctuation">.</span><span class="token function">Reshape</span><span class="token punctuation">(</span>wx_shape<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span>abs_x_<span class="token punctuation">.</span><span class="token function">Reshape</span><span class="token punctuation">(</span>wx_shape<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span>k_<span class="token punctuation">.</span><span class="token function">Reshape</span><span class="token punctuation">(</span>wx_shape<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span>cos_t_<span class="token punctuation">.</span><span class="token function">Reshape</span><span class="token punctuation">(</span>wx_shape<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span>cos_mt_<span class="token punctuation">.</span><span class="token function">Reshape</span><span class="token punctuation">(</span>wx_shape<span class="token punctuation">)</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">cos_theta_bound_shape</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span>margin <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>layer_param_<span class="token punctuation">.</span><span class="token function">large_margin_inner_product_param</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  cos_theta_bound_shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>margin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span>cos_theta_bound_<span class="token punctuation">.</span><span class="token function">Reshape</span><span class="token punctuation">(</span>cos_theta_bound_shape<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token operator">-></span>margin<span class="token punctuation">;</span> <span class="token operator">++</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>cos_theta_bound_<span class="token punctuation">.</span><span class="token function">mutable_cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">cos</span><span class="token punctuation">(</span>PI <span class="token operator">*</span> k <span class="token operator">/</span> <span class="token keyword">this</span><span class="token operator">-></span>margin<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">this</span><span class="token operator">-></span>C_M_N_<span class="token punctuation">.</span><span class="token function">Reshape</span><span class="token punctuation">(</span>cos_theta_bound_shape<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token operator">-></span>margin<span class="token punctuation">;</span> <span class="token operator">++</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>C_M_N_<span class="token punctuation">.</span><span class="token function">mutable_cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>margin<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>margin <span class="token operator">-</span> n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// d size</span>
  std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">d_shape</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  d_shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  d_shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">count</span><span class="token punctuation">(</span>axis<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span>dydw_<span class="token punctuation">.</span><span class="token function">Reshape</span><span class="token punctuation">(</span>d_shape<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-></span>dydx_<span class="token punctuation">.</span><span class="token function">Reshape</span><span class="token punctuation">(</span>d_shape<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token operator">-></span>lambda <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>layer_param_<span class="token punctuation">.</span><span class="token function">large_margin_inner_product_param</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// end added</span>

  transpose_ <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 坚决不转置！</span>

  <span class="token keyword">const</span> <span class="token keyword">int</span> num_output <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>layer_param_<span class="token punctuation">.</span><span class="token function">large_margin_inner_product_param</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">num_output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  bias_term_ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>layer_param_<span class="token punctuation">.</span><span class="token function">large_marin_inner_product_param</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bias_term</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  N_ <span class="token operator">=</span> num_output<span class="token punctuation">;</span>
  
  <span class="token comment">// Dimensions starting from "axis" are "flattened" into a single</span>
  <span class="token comment">// length K_ vector. For example, if bottom[0]'s shape is (N, C, H, W),</span>
  <span class="token comment">// and axis == 1, N inner products with dimension CHW are performed.</span>
  K_ <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">count</span><span class="token punctuation">(</span>axis<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Check if we need to set up the weights</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>blobs_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">LOG</span><span class="token punctuation">(</span>INFO<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Skipping parameter initialization"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bias_term_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token operator">-></span>blobs_<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token operator">-></span>blobs_<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// Initialize the weights</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">weight_shape</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>transpose_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      weight_shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> K_<span class="token punctuation">;</span>
      weight_shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> N_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      weight_shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> N_<span class="token punctuation">;</span>
      weight_shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> K_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>blobs_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token generic-function"><span class="token function">Blob</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>weight_shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// fill the weights</span>
    shared_ptr<span class="token operator">&lt;</span>Filler<span class="token operator">&lt;</span>Dtype<span class="token operator">></span> <span class="token operator">></span> <span class="token function">weight_filler</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">GetFiller</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>
        <span class="token keyword">this</span><span class="token operator">-></span>layer_param_<span class="token punctuation">.</span><span class="token function">large_margin_inner_product_param</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">weight_filler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    weight_filler<span class="token operator">-></span><span class="token function">Fill</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>blobs_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// If necessary, intiialize and fill the bias term</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bias_term_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bias_shape</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N_<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token operator">-></span>blobs_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token generic-function"><span class="token function">Blob</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>bias_shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      shared_ptr<span class="token operator">&lt;</span>Filler<span class="token operator">&lt;</span>Dtype<span class="token operator">></span> <span class="token operator">></span> <span class="token function">bias_filler</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">GetFiller</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>
          <span class="token keyword">this</span><span class="token operator">-></span>layer_param_<span class="token punctuation">.</span><span class="token function">large_margin_inner_product_param</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bias_filler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      bias_filler<span class="token operator">-></span><span class="token function">Fill</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>blobs_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>   

  <span class="token punctuation">&#125;</span>  <span class="token comment">// parameter initialization</span>
  <span class="token keyword">this</span><span class="token operator">-></span>param_propagate_down_<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>blobs_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">LargeMarginInnerProductLayer</span><span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Reshape</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Figure out the dimensions</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> axis <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">CanonicalAxisIndex</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token operator">-></span>layer_param_<span class="token punctuation">.</span><span class="token function">large_margin_inner_product_param</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> new_K <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">count</span><span class="token punctuation">(</span>axis<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">CHECK_EQ</span><span class="token punctuation">(</span>K_<span class="token punctuation">,</span> new_K<span class="token punctuation">)</span>
      <span class="token operator">&lt;&lt;</span> <span class="token string">"Input size incompatible with large margin inner product parameters."</span><span class="token punctuation">;</span>
  <span class="token comment">// The first "axis" dimensions are independent inner products; the total</span>
  <span class="token comment">// number of these is M_, the product over these dimensions.</span>
  M_ <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// The top shape will be the bottom shape with the flattened axes dropped,</span>
  <span class="token comment">// and replaced by a single axis with dimension num_output (N_).</span>
  vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> top_shape <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  top_shape<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>axis <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  top_shape<span class="token punctuation">[</span>axis<span class="token punctuation">]</span> <span class="token operator">=</span> N_<span class="token punctuation">;</span>
  top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">Reshape</span><span class="token punctuation">(</span>top_shape<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">LargeMarginInnerProductLayer</span><span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Forward_cpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
    <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// not implement</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">LargeMarginInnerProductLayer</span><span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Backward_cpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">,</span>
    <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> propagate_down<span class="token punctuation">,</span>
    <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// not implement</span>
<span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CPU_ONLY</span></span>
<span class="token function">STUB_GPU</span><span class="token punctuation">(</span>LargeMarginInnerProductLayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token function">INSTANTIATE_CLASS</span><span class="token punctuation">(</span>LargeMarginInnerProductLayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">REGISTER_LAYER_CLASS</span><span class="token punctuation">(</span>LargeMarginInnerProduct<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>  <span class="token comment">// namespace caffe</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>至此，<code>large_margin_inner_product_layer</code> 的准备工作就做完了。</p>
<p>下一篇博客，我们来详细的讨论前馈的具体实现。</p>
<p>如果您觉得本文对您有帮助，</p>
<p><strong>转载</strong> 请注明出处~</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>基于Caffe的Large Margin Softmax Loss的实现（二）</title>
    <url>/2016/10/08/caffe-large-margin-softmax-2/</url>
    <content><![CDATA[<blockquote>
<p>小喵的唠叨话：前一篇博客，我们做完了L-Softmax的准备工作。而这一章，我们开始进行前馈的研究。</p>
</blockquote>
<span id="more"></span>
<h2 id="四前馈">四、前馈</h2>
<p>还记得上一篇博客，小喵给出的三个公式吗？不记得也没关系。</p>
<p>这次，我们要一点一点的通过代码来实现这些公式。小喵主要是GPU上实现前后馈的代码，因为这个层只是用来训练，GPU速度应该会快一点。</p>
<p>我们首先要进行一般的FC层的前馈，因为LM_FC的前馈只是修改了一般的FC中的若干个值，而大部分的值都是没有修改过的。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> Dtype<span class="token operator">*</span> bottom_data <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Dtype<span class="token operator">*</span> label_data <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Dtype<span class="token operator">*</span> top_data <span class="token operator">=</span> top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Dtype<span class="token operator">*</span> weight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>blobs_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 普通fc层的计算</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>M_ <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token generic-function"><span class="token function">caffe_gpu_gemv</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>CblasNoTrans<span class="token punctuation">,</span> N_<span class="token punctuation">,</span> K_<span class="token punctuation">,</span> <span class="token punctuation">(</span>Dtype<span class="token punctuation">)</span><span class="token number">1.</span><span class="token punctuation">,</span>
                       weight<span class="token punctuation">,</span> bottom_data<span class="token punctuation">,</span> <span class="token punctuation">(</span>Dtype<span class="token punctuation">)</span><span class="token number">0.</span><span class="token punctuation">,</span> top_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  <span class="token generic-function"><span class="token function">caffe_gpu_gemm</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>CblasNoTrans<span class="token punctuation">,</span>
                        transpose_ <span class="token operator">?</span> CblasNoTrans <span class="token operator">:</span> CblasTrans<span class="token punctuation">,</span>
                        M_<span class="token punctuation">,</span> N_<span class="token punctuation">,</span> K_<span class="token punctuation">,</span> <span class="token punctuation">(</span>Dtype<span class="token punctuation">)</span><span class="token number">1.</span><span class="token punctuation">,</span>
                        bottom_data<span class="token punctuation">,</span> weight<span class="token punctuation">,</span> <span class="token punctuation">(</span>Dtype<span class="token punctuation">)</span><span class="token number">0.</span><span class="token punctuation">,</span> top_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样就计算完了一个普通的FC的前馈。 之后是一些具体的实现。</p>
<h3 id="余弦">1，余弦</h3>
<p><span class="math display">\[
\cos(\theta_j)=\frac{W_j^Tx_i}{\|W_j\|\|x_i\|}
\]</span></p>
<p>这是要求出label为 <span class="math inline">\(j\)</span> 的weight的权值和feature之间的余弦值。公式大家在高中应该就学过了。这样需要出三部分：<span class="math inline">\(W_j^Tx_i\)</span>，<span class="math inline">\(\|W_j\|\)</span> 和 <span class="math inline">\(\|x_i\|\)</span>。这里 <span class="math inline">\(i\)</span> 表示feature的序号，因为一个mini batch中有很多张图片。<span class="math inline">\(j\)</span> 表示正确的label值。</p>
<p><span class="math inline">\(W_j^Tx_i\)</span> 的计算非常简单，因为FC层的前馈计算出来的就是这个值。因此我们可以直接从FC的前馈结果中直接复制对应位置的结果。<span class="math inline">\(\|W_j\|\)</span> 和 <span class="math inline">\(\|x_i\|\)</span> 是比较简单的模值的计算，使用 <code>caffe_cpu_dot</code> 很容易就可以求得（为什么不使用 <code>caffe_gpu_dot</code> 呢？因为小喵在使用 <code>caffe_gpu_dot</code> 的时候，caffe会报一个奇怪的错误，不知道是不是因为GPU的显存不能随意访问的）。</p>
<p>最后的余弦值带入到上面的式子，就一下子搞定~</p>
<p>这里用到了几个变量：</p>
<ul>
<li>M: batch size</li>
<li>N: class num</li>
<li>K: feature length</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// w * x</span>
<span class="token comment">// 直接从前馈的结果中复制</span>
Dtype <span class="token operator">*</span>wx_data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>wx_<span class="token punctuation">.</span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
copy_label_score<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token function">CAFFE_GET_BLOCKS</span><span class="token punctuation">(</span>M_<span class="token punctuation">)</span><span class="token punctuation">,</span> CAFFE_CUDA_NUM_THREADS<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>M_<span class="token punctuation">,</span> N_<span class="token punctuation">,</span> label_data<span class="token punctuation">,</span> top_data<span class="token punctuation">,</span> wx_data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// w * w</span>
Dtype <span class="token operator">*</span>abs_w_data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>abs_w_<span class="token punctuation">.</span><span class="token function">mutable_cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> M_<span class="token punctuation">;</span> <span class="token operator">++</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  abs_w_data<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">caffe_cpu_dot</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>
    K_<span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token operator">-></span>blobs_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>label_cpu_data<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> K_<span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token operator">-></span>blobs_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>label_cpu_data<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> K_
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// x * x</span>
Dtype <span class="token operator">*</span>abs_x_data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>abs_x_<span class="token punctuation">.</span><span class="token function">mutable_cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> M_<span class="token punctuation">;</span> <span class="token operator">++</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  abs_x_data<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">caffe_cpu_dot</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>
    K_<span class="token punctuation">,</span> 
    bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> m <span class="token operator">*</span> K_<span class="token punctuation">,</span>
    bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> m <span class="token operator">*</span> K_
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// abs_w, abs_x</span>
<span class="token generic-function"><span class="token function">caffe_gpu_powx</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>M_<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>abs_w_<span class="token punctuation">.</span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>abs_w_<span class="token punctuation">.</span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token generic-function"><span class="token function">caffe_gpu_powx</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>M_<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>abs_x_<span class="token punctuation">.</span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>abs_x_<span class="token punctuation">.</span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// cos_t = wx / (|x| * |w|)</span>
Dtype <span class="token operator">*</span>cos_t_data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>cos_t_<span class="token punctuation">.</span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token generic-function"><span class="token function">caffe_gpu_div</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>M_<span class="token punctuation">,</span> wx_data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>abs_x_<span class="token punctuation">.</span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cos_t_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token generic-function"><span class="token function">caffe_gpu_div</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>M_<span class="token punctuation">,</span> cos_t_data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>abs_w_<span class="token punctuation">.</span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cos_t_data<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中 <code>copy_label_score</code> 是我们自己编写的用来复制结果的核函数（如何编写Cuda程序就是另一门学科了）：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
__global__ <span class="token keyword">void</span> <span class="token function">copy_label_score</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">const</span> Dtype <span class="token operator">*</span>label_data<span class="token punctuation">,</span> <span class="token keyword">const</span> Dtype <span class="token operator">*</span>top_data<span class="token punctuation">,</span> Dtype <span class="token operator">*</span>wx_data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">CUDA_KERNEL_LOOP</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> M<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    wx_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> top_data<span class="token punctuation">[</span>index <span class="token operator">*</span> N <span class="token operator">+</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>label_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>相信机智如你的喵粉，看到这几行代码，一定可以轻松理解。</p>
<p>这里，小喵想多介绍一点东西。</p>
<p>我们知道Caffe里面的数据都是通过Blob结构来存储的，比如这里的bottom_data，其实就是一个blob，默认形状是(n, c, h, w)，n表示的就是batch size，c是channel数，h，w分贝表示高和宽。而且blob中的内存的存储顺序，也和一般的C语言中的数组一样。因此我们这里计算feature的模的时候，是直接每K_个数值计算一次点乘。</p>
<p>同理，weight是存储在 <code>this-&gt;blobs[0]</code> 中的，那么weight的形状又是什么样子的呢？这里非常碰巧的是，如果我们在prototxt中设置的transpose为false的话，weight的形状是 <code>N * K</code>，也就是说，我们可以将weight看成一个矩阵，它的每一行都与feature直接点乘，得到输出，也就是说weight的每一行都是我们需要计算模值的 <span class="math inline">\(W_j\)</span>，所以我们计算weight的模的时候，用的计算方法和计算feature模时很相似。我们这里强制设置transpose为false，因为这样计算会比较简单。如果你设成了true，那就必须自己写个求模的函数了。</p>
<h3 id="m倍余弦">2，m倍余弦</h3>
<p><span class="math display">\[
\cos(m\theta_i)=\sum_n(-1)^n{C_m^{2n}\cos^{m-2n}(\theta_i)\cdot(1-\cos(\theta_i)^2)^n}, (2n\leq m)
\]</span></p>
<p>我们在(1)中求出了 <span class="math inline">\(\cos(\theta)\)</span>，对于给定的margin，只需要代入公式就可以求出<span class="math inline">\(\cos(m\theta)\)</span>的值了。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
__global__ <span class="token keyword">void</span> <span class="token function">cal_cos_mt</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> margin<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>C_M_N<span class="token punctuation">,</span> <span class="token keyword">const</span> Dtype <span class="token operator">*</span>cos_t_data<span class="token punctuation">,</span> Dtype <span class="token operator">*</span>cos_mt_data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">CUDA_KERNEL_LOOP</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Dtype cos_t <span class="token operator">=</span> cos_t_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    Dtype sin_t_2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> cos_t <span class="token operator">*</span> cos_t<span class="token punctuation">;</span>
    Dtype cos_mt <span class="token operator">=</span> <span class="token number">0.</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>margin <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      flag <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
      cos_mt <span class="token operator">+=</span> flag <span class="token operator">*</span> C_M_N<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">powf</span><span class="token punctuation">(</span>cos_t<span class="token punctuation">,</span> <span class="token punctuation">(</span>margin <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">powf</span><span class="token punctuation">(</span>sin_t_2<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    cos_mt_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> cos_mt<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面是用来计算 <span class="math inline">\(\cos(m\theta)\)</span> 的cuda函数，调用也十分的简单：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// cos(mt)</span>
cal_cos_mt<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token function">CAFFE_GET_BLOCKS</span><span class="token punctuation">(</span>M_<span class="token punctuation">)</span><span class="token punctuation">,</span> CAFFE_CUDA_NUM_THREADS<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>
  M_<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>margin<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>C_M_N_<span class="token punctuation">.</span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>cos_t_<span class="token punctuation">.</span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>cos_mt_<span class="token operator">-></span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="前馈">3，前馈</h3>
<p><span class="math display">\[
f_{y_{i}}=(-1)^k\cdot\|W_{y_{i}}\|\|x_{i}\|\cos(m\theta_i)-2k\cdot\|W_{y_i}\|\|x_i\|
\]</span></p>
<p>严格上来说，我们需要求的并不是这个式子，而是：</p>
<p><span class="math display">\[
f_{y_i}=\frac{\lambda\|W_{y_i}\|\|x_i\|\cos(\theta_{y_i})+\|W_{y_i}\|\|x_i\|\varphi(\theta_{y_i})}{1+\lambda}
\]</span></p>
<p><span class="math display">\[
\varphi(\theta)=(-1)^k\cos(m\theta)-2k, \theta\in[\frac{k\pi}{m}, \frac{(k+1)\pi}{m}]
\]</span></p>
<p>可以看出，当 <span class="math inline">\(\lambda\)</span> 为0的时候，这两个式子就退化成前面的一个式子了。</p>
<p>k的求法十分简单，只需要将 <span class="math inline">\(\cos(\theta)\)</span> 与各个区间进行比较就可以得到。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// k</span>
<span class="token keyword">int</span> <span class="token operator">*</span>k_cpu_data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>k_<span class="token punctuation">.</span><span class="token function">mutable_cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Dtype <span class="token operator">*</span>cos_t_cpu_data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>cos_t_<span class="token punctuation">.</span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> M_<span class="token punctuation">;</span> <span class="token operator">++</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> _k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> _k <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>cos_theta_bound_<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span> _k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>cos_theta_bound_<span class="token punctuation">.</span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>_k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> cos_t_cpu_data<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      k_cpu_data<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> _k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后一步就是计算出真正的前馈值了！按照公式容易编写程序：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
__global__ <span class="token keyword">void</span> <span class="token function">LMForward</span><span class="token punctuation">(</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> lambda<span class="token punctuation">,</span>
  <span class="token keyword">const</span> Dtype <span class="token operator">*</span>label_data<span class="token punctuation">,</span> <span class="token keyword">const</span> Dtype <span class="token operator">*</span>cos_mt_data<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>k_data<span class="token punctuation">,</span>
  <span class="token keyword">const</span> Dtype <span class="token operator">*</span>abs_w_data<span class="token punctuation">,</span> <span class="token keyword">const</span> Dtype <span class="token operator">*</span>abs_x_data<span class="token punctuation">,</span> Dtype <span class="token operator">*</span>top_data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token function">CUDA_KERNEL_LOOP</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> M<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Dtype cos_mt <span class="token operator">=</span> cos_mt_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> k <span class="token operator">=</span> k_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> label <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>label_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Dtype abs_w <span class="token operator">=</span> abs_w_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    Dtype abs_x <span class="token operator">=</span> abs_x_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    top_data<span class="token punctuation">[</span>N <span class="token operator">*</span> index <span class="token operator">+</span> label<span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">(</span>lambda <span class="token operator">*</span> top_data<span class="token punctuation">[</span>N <span class="token operator">*</span> index <span class="token operator">+</span> label<span class="token punctuation">]</span> <span class="token operator">+</span> abs_w <span class="token operator">*</span> abs_x <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token function">powf</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">*</span> cos_mt <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> k <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> lambda<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>调用也十分简单：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// y</span>
LMForward<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token function">CAFFE_GET_BLOCKS</span><span class="token punctuation">(</span>M_<span class="token punctuation">)</span><span class="token punctuation">,</span> CAFFE_CUDA_NUM_THREADS<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>
  M_<span class="token punctuation">,</span> N_<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>lambda<span class="token punctuation">,</span>
  label_data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>cos_mt_<span class="token operator">-></span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>k_<span class="token punctuation">.</span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">this</span><span class="token operator">-></span>abs_w_<span class="token punctuation">.</span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>abs_x_<span class="token punctuation">.</span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后附上，完整的前馈代码（省略头文件和caffe的名字空间）：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
__global__ <span class="token keyword">void</span> <span class="token function">copy_label_score</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">const</span> Dtype <span class="token operator">*</span>label_data<span class="token punctuation">,</span> <span class="token keyword">const</span> Dtype <span class="token operator">*</span>top_data<span class="token punctuation">,</span> Dtype <span class="token operator">*</span>wx_data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">CUDA_KERNEL_LOOP</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> M<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    wx_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> top_data<span class="token punctuation">[</span>index <span class="token operator">*</span> N <span class="token operator">+</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>label_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
__global__ <span class="token keyword">void</span> <span class="token function">cal_cos_mt</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> margin<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>C_M_N<span class="token punctuation">,</span> <span class="token keyword">const</span> Dtype <span class="token operator">*</span>cos_t_data<span class="token punctuation">,</span> Dtype <span class="token operator">*</span>cos_mt_data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">CUDA_KERNEL_LOOP</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Dtype cos_t <span class="token operator">=</span> cos_t_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    Dtype sin_t_2 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> cos_t <span class="token operator">*</span> cos_t<span class="token punctuation">;</span>
    Dtype cos_mt <span class="token operator">=</span> <span class="token number">0.</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>margin <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      flag <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
      cos_mt <span class="token operator">+=</span> flag <span class="token operator">*</span> C_M_N<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">powf</span><span class="token punctuation">(</span>cos_t<span class="token punctuation">,</span> <span class="token punctuation">(</span>margin <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">powf</span><span class="token punctuation">(</span>sin_t_2<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    cos_mt_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> cos_mt<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
__global__ <span class="token keyword">void</span> <span class="token function">LMForward</span><span class="token punctuation">(</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> lambda<span class="token punctuation">,</span>
  <span class="token keyword">const</span> Dtype <span class="token operator">*</span>label_data<span class="token punctuation">,</span> <span class="token keyword">const</span> Dtype <span class="token operator">*</span>cos_mt_data<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>k_data<span class="token punctuation">,</span>
  <span class="token keyword">const</span> Dtype <span class="token operator">*</span>abs_w_data<span class="token punctuation">,</span> <span class="token keyword">const</span> Dtype <span class="token operator">*</span>abs_x_data<span class="token punctuation">,</span> Dtype <span class="token operator">*</span>top_data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token function">CUDA_KERNEL_LOOP</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> M<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Dtype cos_mt <span class="token operator">=</span> cos_mt_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> k <span class="token operator">=</span> k_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> label <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>label_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Dtype abs_w <span class="token operator">=</span> abs_w_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    Dtype abs_x <span class="token operator">=</span> abs_x_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    top_data<span class="token punctuation">[</span>N <span class="token operator">*</span> index <span class="token operator">+</span> label<span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">(</span>lambda <span class="token operator">*</span> top_data<span class="token punctuation">[</span>N <span class="token operator">*</span> index <span class="token operator">+</span> label<span class="token punctuation">]</span> <span class="token operator">+</span> abs_w <span class="token operator">*</span> abs_x <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token function">powf</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">*</span> cos_mt <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> k <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> lambda<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">LargeMarginInnerProductLayer</span><span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Forward_gpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
    <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> Dtype<span class="token operator">*</span> bottom_data <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> Dtype<span class="token operator">*</span> label_data <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Dtype<span class="token operator">*</span> top_data <span class="token operator">=</span> top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> Dtype<span class="token operator">*</span> weight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>blobs_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 普通fc层的计算</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>M_ <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token generic-function"><span class="token function">caffe_gpu_gemv</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>CblasNoTrans<span class="token punctuation">,</span> N_<span class="token punctuation">,</span> K_<span class="token punctuation">,</span> <span class="token punctuation">(</span>Dtype<span class="token punctuation">)</span><span class="token number">1.</span><span class="token punctuation">,</span>
                         weight<span class="token punctuation">,</span> bottom_data<span class="token punctuation">,</span> <span class="token punctuation">(</span>Dtype<span class="token punctuation">)</span><span class="token number">0.</span><span class="token punctuation">,</span> top_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token generic-function"><span class="token function">caffe_gpu_gemm</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>CblasNoTrans<span class="token punctuation">,</span>
                          transpose_ <span class="token operator">?</span> CblasNoTrans <span class="token operator">:</span> CblasTrans<span class="token punctuation">,</span>
                          M_<span class="token punctuation">,</span> N_<span class="token punctuation">,</span> K_<span class="token punctuation">,</span> <span class="token punctuation">(</span>Dtype<span class="token punctuation">)</span><span class="token number">1.</span><span class="token punctuation">,</span>
                          bottom_data<span class="token punctuation">,</span> weight<span class="token punctuation">,</span> <span class="token punctuation">(</span>Dtype<span class="token punctuation">)</span><span class="token number">0.</span><span class="token punctuation">,</span> top_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">const</span> Dtype<span class="token operator">*</span> label_cpu_data <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// w * x</span>
  <span class="token comment">// 直接从前馈的结果中复制</span>
  Dtype <span class="token operator">*</span>wx_data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>wx_<span class="token punctuation">.</span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  copy_label_score<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token function">CAFFE_GET_BLOCKS</span><span class="token punctuation">(</span>M_<span class="token punctuation">)</span><span class="token punctuation">,</span> CAFFE_CUDA_NUM_THREADS<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>M_<span class="token punctuation">,</span> N_<span class="token punctuation">,</span> label_data<span class="token punctuation">,</span> top_data<span class="token punctuation">,</span> wx_data<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// w * w</span>
  Dtype <span class="token operator">*</span>abs_w_data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>abs_w_<span class="token punctuation">.</span><span class="token function">mutable_cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> M_<span class="token punctuation">;</span> <span class="token operator">++</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    abs_w_data<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">caffe_cpu_dot</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>
      K_<span class="token punctuation">,</span>
      <span class="token keyword">this</span><span class="token operator">-></span>blobs_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>label_cpu_data<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> K_<span class="token punctuation">,</span>
      <span class="token keyword">this</span><span class="token operator">-></span>blobs_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>label_cpu_data<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> K_
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token comment">// x * x</span>
  Dtype <span class="token operator">*</span>abs_x_data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>abs_x_<span class="token punctuation">.</span><span class="token function">mutable_cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> M_<span class="token punctuation">;</span> <span class="token operator">++</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    abs_x_data<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">caffe_cpu_dot</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>
      K_<span class="token punctuation">,</span>
      bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> m <span class="token operator">*</span> K_<span class="token punctuation">,</span>
      bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> m <span class="token operator">*</span> K_
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// abs_w, abs_x</span>
  <span class="token generic-function"><span class="token function">caffe_gpu_powx</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>M_<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>abs_w_<span class="token punctuation">.</span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>abs_w_<span class="token punctuation">.</span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token generic-function"><span class="token function">caffe_gpu_powx</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>M_<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>abs_x_<span class="token punctuation">.</span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>abs_x_<span class="token punctuation">.</span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// cos_t = wx / (|x| * |w|)</span>
  Dtype <span class="token operator">*</span>cos_t_data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>cos_t_<span class="token punctuation">.</span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token generic-function"><span class="token function">caffe_gpu_div</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>M_<span class="token punctuation">,</span> wx_data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>abs_x_<span class="token punctuation">.</span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cos_t_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token generic-function"><span class="token function">caffe_gpu_div</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>M_<span class="token punctuation">,</span> cos_t_data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>abs_w_<span class="token punctuation">.</span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cos_t_data<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// cos(mt)</span>
  cal_cos_mt<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token function">CAFFE_GET_BLOCKS</span><span class="token punctuation">(</span>M_<span class="token punctuation">)</span><span class="token punctuation">,</span> CAFFE_CUDA_NUM_THREADS<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>
    M_<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>margin<span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token operator">-></span>C_M_N_<span class="token punctuation">.</span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token operator">-></span>cos_t_<span class="token punctuation">.</span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token operator">-></span>cos_mt_<span class="token punctuation">.</span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// k</span>
  <span class="token keyword">int</span> <span class="token operator">*</span>k_cpu_data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>k_<span class="token punctuation">.</span><span class="token function">mutable_cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> Dtype <span class="token operator">*</span>cos_t_cpu_data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>cos_t_<span class="token punctuation">.</span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> M_<span class="token punctuation">;</span> <span class="token operator">++</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> _k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> _k <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>cos_theta_bound_<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span> _k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>cos_theta_bound_<span class="token punctuation">.</span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>_k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> cos_t_cpu_data<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        k_cpu_data<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> _k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// y</span>
  LMForward<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token function">CAFFE_GET_BLOCKS</span><span class="token punctuation">(</span>M_<span class="token punctuation">)</span><span class="token punctuation">,</span> CAFFE_CUDA_NUM_THREADS<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>
    M_<span class="token punctuation">,</span> N_<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>lambda<span class="token punctuation">,</span>
    label_data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>cos_mt_<span class="token punctuation">.</span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>k_<span class="token punctuation">.</span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">this</span><span class="token operator">-></span>abs_w_<span class="token punctuation">.</span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>abs_x_<span class="token punctuation">.</span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那么，这样关于large margin softmax loss的前馈我们就轻松的实现了。下一篇，我们要讲最复杂的后馈的实现了。</p>
<p>如果您觉得本文对您有帮助，那请小喵喝杯茶吧~~O(∩_∩)O~~ 再次感慨 <span class="math inline">\(\LaTeX\)</span> 大法好。</p>
<p><strong>转载</strong> 请注明出处~</p>
<p>关于Large margin softmax loss的后馈的部分，小喵一直实现的有问题，现在作者也把代码开源出来了，建议还是直接看作者的代码吧。</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫-漫画喵的100行逆袭</title>
    <url>/2017/02/19/cartoon-cat-client/</url>
    <content><![CDATA[<blockquote>
<p>小喵的唠叨话：这次的博客，讲的是使用python编写一个爬虫工具。为什么要写这个爬虫呢？原因是小喵在看完《极黑的布伦希尔特》这个动画之后，又想看看漫画，结果发现各大APP都没有资源，最终好不容易找到一个网站可以看，但是由于网速太渣，看起来额外的费劲。这时候如果能提前下载下来就好了。</p>
</blockquote>
<p>先上项目地址（github）：<a href="https://github.com/miaoerduo/cartoon-cat">https://github.com/miaoerduo/cartoon-cat</a> 。欢迎大家随时<strong>fork</strong>、<strong>star</strong>和指教。</p>
<span id="more"></span>
<p>原因就是这样，作为技术喵，任何问题都不能阻碍一颗爱漫画的心。所以问题就来了，挖掘机技修哪家强？ 在bing上搜索Python、爬虫框架。找到大家常用的框架。</p>
<p>Scrapy似乎是个很不错的选择。至于相对于其他框架的优点，小喵没有细查，至少这个框架是之前听过的。但是在实现的时候发现有一些问题，scrapy不能直接抓取动态的页面。小喵需要抓取的网站的漫画都是使用Ajax生成的。需要自己分析各种数据，这个有点麻烦。</p>
<p>那么有没有可以渲染页面的工具呢？像浏览器一样的？有。</p>
<p>这里介绍两个工具：</p>
<ul>
<li><a href="http://phantomjs.org">PhantomJs</a>，可以理解是一个浏览器。不过它没有界面，我们可以通过js的代码模拟用户的行为。这就要求了解它的api并有js基础了。</li>
<li><a href="https://selenium-python.readthedocs.io">Selenium</a>，这是个浏览器自动化测试框架。它依赖于浏览器（这个浏览器也可以是PhantomJs），通过Selenium可以模拟用户的行为。而且有Python接口，所以相对简单一些。</li>
</ul>
<p>我们这个爬虫使用 <code>selenium + phantomjs</code> 来实现。哟，这个爬虫软件应该有个响当当的名字。。。就叫 <strong>漫画喵</strong> 吧，英文名 <strong>Cartoon Cat</strong>。</p>
<p>下面我们一点点的介绍这个爬虫的实现过程吧。</p>
<h2 id="一初生-环境搭建">一、初生-环境搭建</h2>
<p>小喵这里选用 <code>Python</code> 作为开发语言，框架是 <code>selenium</code>。原因是 <code>python</code> 经常用来写爬虫，<code>selenium</code> 可以用来模拟用户行为，<code>PhantomJs</code> 是可选的，不过小喵最终会在一个服务器上运行，所以也是需要的。</p>
<p>为了不影响本机上的 <code>python</code>，我们还需要使用 <code>virtualenv</code> 来创建一个独立的 <code>python</code> 环境。具体步骤如下：</p>
<h3 id="安装virtualenv">1、安装virtualenv</h3>
<p><code>virtualenv</code> 是一个常用的用来创建 <code>python</code> 环境的工具。小喵用这个有两个原因，一是为了不污染本机的环境，二是在本机直接安装库的时候出了一个权限的问题。<code>virtualenv</code> 的安装十分简单，使用 <code>pip</code> 工具就可以安装。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> virtualenv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>待程序执行结束，你就会开心的发现自己已经有了 <code>virtualenv</code> 这个工具了。</p>
<h3 id="创建python环境">2、创建python环境</h3>
<p><code>virtualenv</code> 的使用非常的方便。建立新的运行环境：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">virtualenv <span class="token operator">&lt;</span>env-name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>进入相应的独立环境：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> <span class="token operator">&lt;</span>env-path<span class="token operator">></span>/bin/activate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>执行完第一个指令后，就会创建成功一个 <code>python</code> 环境，执行第二个指令后，就会发现命令行的起始位置有变化。这时候 <code>python</code>、<code>pip</code> 等工具就变成使用这个新环境的了，当然也可以使用 <code>which python</code> 来查看。</p>
<h3 id="安装selenium">3、安装selenium</h3>
<p>进入新环境后，pip安装的依赖库都会在新环境中安装，不会影响主机自身的 <code>python</code>。使用 <code>pip</code> 安装 <code>selenium</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> selenium<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>至此，我们的基本环境就搭建完了。</p>
<h3 id="安装phantomjs">4、安装PhantomJs</h3>
<p>这个只在从官网上下载就可以：<a href="http://phantomjs.org/download.html">http://phantomjs.org/download.html</a> 小喵的本地实验环境是Mac，所以下载了Mac版本。解压之后就可以使用。</p>
<h2 id="二寻觅-搜资源">二、寻觅-搜资源</h2>
<p>小喵想看的这个漫画貌似各大网站都没有资源，在费了九牛二虎之力后，终于找到了一个网站！<a href="http://www.tazhe.com/mh/9170/">http://www.tazhe.com/mh/9170/</a>。每个网站的结构都不相同，因此都需要定制一套爬虫程序。本文的爬虫就只能针对这个漫画网站使用，喵粉们需要爬其他网站的话，需要自己做相应的修改。</p>
<h2 id="三分析-资源解析">三、分析-资源解析</h2>
<p>这里需要解析两个页面，一个是漫画的首页，比如前面的：<a href="http://www.tazhe.com/mh/9170/">http://www.tazhe.com/mh/9170/</a> 另一个就是具体章节的页面。</p>
<h3 id="首页">1，首页</h3>
<p>为了减小图片的大小，小喵把窗口做了缩放。首页大致是这个样子。</p>
<img src="tazhe-index.png" alt="首页" />
<center>
图1 漫画首页
</center>
<p>各类信息十分的明了。我们关注的就是下面的漫画列表。通过Chrome强大的<strong>审查元素</strong>的功能，我们立刻就能定位到章节的位置。（<strong>对着感兴趣的位置-&gt;右键-&gt;审查</strong> 就能找到）</p>
<p><img src="tazhe-inspect-element.png" alt="审查" /></p>
<center>
图2 章节的节点
</center>
<p>可以看到，章节所在的区域的 <code>id</code> 是 <code>play_0</code>，学过前端的童鞋都应该知道，一个页面中 <code>id</code> 通常唯一标示一个节点。因此如果我们能够获取这个页面的话，查找 <code>id</code> 为 <code>play_0</code> 的节点就能一下子缩小搜索范围。 而每个章节的信息都是一个 <code>a</code> 标签，标签的 <code>href</code> 是对应章节的具体网址，标签的文本部分是章节名。这样相对关系就得出了：<code>div#play_0 &gt; ul &gt; li &gt; a</code>。首页的分析就到此结束。</p>
<h3 id="章节页面">2、章节页面</h3>
<p>我们随意打开一个具体章节的页面。比如：<a href="http://www.tazhe.com/mh/9170/1187086.html">http://www.tazhe.com/mh/9170/1187086.html</a></p>
<p>映入眼帘的是一个很干净的页面（简直是漫画界的清流，好多漫画网站上全部是广告）。我们把<strong>鼠标放在图片这个区域-&gt;右键-&gt;审查</strong>。咦，我们的右键怎么按不了？</p>
<p>其实呢，这个现象在小说网站上遇到的机会会更多。当我们看到比较优美的文字或是炫酷的图片，都会下意识的选中-&gt;右键-&gt;保存。而很多时候，这些资源都是有版权的。并不应该随意的传播（狠狠的打了自己的脸/(ㄒoㄒ)/~~）。因此限制鼠标右键会是一个很简单却有效的办法。那么我们如何绕过这个陷阱呢？</p>
<p>很简单，我们不用右键即可。打开浏览器的开发者工具选项，找到 <code>elements</code> 这个选项。可以看到一个复杂的结构（其实和上面审查元素之后的结果一样）。之后不断的选中标签，当标签被选中时，左侧页面中对应的位置会有蓝色。多试几次，最终就能找到对应的位置。</p>
<p><img src="tazhe-find-element.png" alt="tazhe-find-element" /></p>
<center>
图3 漫画图片
</center>
<p>这是一个 <code>img</code> 标签，对应的 <code>id</code> 是 <code>qTcms_pic</code>。这样找到这个 <code>id</code>，就能找到这个 <code>img</code> 标签，根据 <code>src</code> 就能找到图片的具体URI地址。</p>
<p>接下来是找到下一张图片的地址。这时候需要查看下一页这个按钮的内容。用相同的方法，很容易定位成功。</p>
<p><img src="tazhe-next-uri.png" alt="next" /></p>
<center>
图4 下一页
</center>
<p>小喵本来是用scrapy来做爬虫的，看到这里的时候就果断放弃了。我们分析一下，选中的<code>a</code>标签的代码如下：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>next<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:a_f_qTcms_Pic_nextUrl_Href();<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>下一页<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>下一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>比较简单的网站，“下一页”可以用真的 <code>a</code> 标签和 <code>href</code> 属性来做。这样的好处是实现比较简单，坏处是一旦得到网页源码就能很容易的解析。而像 <code>scrapy</code> 这样的爬虫工具只能抓取静态的代码（动态的需要自己分析ajax，有点麻烦）。而显然这里的页面是动态的，使用了ajax来实现。所以光是得到网页源码并不能真的得到图片，而是必须让其中的js代码运行才可以。所以我们才需要使用浏览器或者PhantomJs这样的可以执行js代码的工具。</p>
<p>上面的 <code>a</code> 标签的代码告诉了我们很多信息。首先是告诉了我们，这个节点的位置，通过 <code>next</code> 这个类名可以方便的找到该节点（其实有两个类名为 <code>next</code> 的按钮，另一个在下面，但是功能都一样）。其次，当这个按钮被点击时会调用：<code>a_f_qTcms_Pic_nextUrl_Href()</code> 这个js函数。难道我们需要再研究这个函数？</p>
<p>不用。因为 <code>PhantomJs</code> 的角色就是一个浏览器。我们只需要向真正的用户一样点击一下这个 <code>next</code> 按钮，就会进入下一个页面。<span style="color: green">/* 感受到这个工具的强大了吗？*/</span></p>
<h3 id="判断章节的末尾">3、判断章节的末尾</h3>
<p>最后一个问题就是，如何判断这个章节结束了？</p>
<p>我们跳到章节的最后一页，然后再次点击“下一页”，这时候会出现一个弹窗。</p>
<p><img src="tazhe-the-last-page.png" alt="tazhe-the-last-page" /></p>
<center>
图5 最后一页
</center>
<p>多次试验之后，我们会发现，只有在最后一页的时候才会弹出这个弹窗，这样的话，我们每抓取完一页，点击一次“下一页”，判断有无弹窗就知道是不是最后一页了。在右侧的开发者工具中我们能够看到，这个弹窗是一个 <code>id</code> 为 <code>msgDiv</code> 的 <code>div</code>（而且它的出现和消失是通过增减节点来实现的，另一种实现方法是将 <code>display</code> 设成 <code>none</code> 和 <code>block</code>，这种情况可以根据 <code>display</code> 的属性来判断）。所以我们判断这个节点存不存在就行了。</p>
<p>至此，两种页面的解析都完成了。下一步就开始我们的代码实现吧。</p>
<h2 id="四逆袭代码实现">四、逆袭——代码实现</h2>
<h3 id="selenium的简单用法">1，selenium的简单用法</h3>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver

browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Firefox<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># browser = webdriver.Safari()</span>
<span class="token comment"># browser = webdriver.Chrome()</span>
<span class="token comment"># browser = webdriver.Ie()</span>
<span class="token comment"># browser = webdriver.PhantomJs()</span>

browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://baidu.com'</span><span class="token punctuation">)</span>

<span class="token keyword">print</span> browser<span class="token punctuation">.</span>title
<span class="token comment"># do anything you want</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面是一个简单的例子，第一步import依赖的库。</p>
<p>第二步，获得一个浏览器实例。selenium支持多种浏览器。使用firefox之外的浏览器都需要下载驱动（selenium本身自带了firefox的驱动）。驱动下载地址：<a href="https://pypi.python.org/pypi/selenium">https://pypi.python.org/pypi/selenium</a> 。驱动下载完之后将它的路径加入到 <code>PATH</code> 里，确保驱动程序能够被访问到。或者显式的把驱动程序的地址当参数传入。像下面一样调用：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>PhantomJs<span class="token punctuation">(</span><span class="token string">'path/to/phantomjs'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>第三步，用 <code>get</code> 的方式打开网页。</p>
<p>最后，通过 <code>browser</code> 对象来解析和处理页面。</p>
<h3 id="获取章节的链接信息">2，获取章节的链接信息</h3>
<p>在上面的解析页面的时候，我们知道了章节信息的位置：<code>div#play_0 &gt; ul &gt; li &gt; a</code>。这样就可以解析出章节信息。browser支持一大堆的选择器。大大简化我们查找节点的工作。</p>
<pre class="line-numbers language-none"><code class="language-none">from selenium import webdriver

if __name__ &#x3D;&#x3D; &quot;__main__&quot;:
    driver &#x3D; &quot;path&#x2F;to&#x2F;driver&quot; # 驱动地址
    browser &#x3D; webdriver.PhantomJS(driver) # 浏览器实例

    main_page &#x3D; &quot;http:&#x2F;&#x2F;www.tazhe.com&#x2F;mh&#x2F;9170&#x2F;&quot;
    browser.get(main_page) # 加载页面

    # 解析出章节的元素节点
    chapter_elem_list &#x3D; browser.find_elements_by_css_selector(&#39;#play_0 ul li a&#39;) # 通过css选择器找出章节节点
    chapter_elem_list.reverse()  # 原本的章节是倒叙的

    chapter_list &#x3D; []
    for chapter_elem in chapter_elem_list:
        # 元素的text和href属性分别就是章节的名称和地址
        chapter_list.append((chapter_elem.text, chapter_elem.get_attribute(&#39;href&#39;)))

    # chapter_list 就是章节的信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="给定一个章节的地址章节中的图片">3，给定一个章节的地址，章节中的图片</h3>
<p>这一步涉及到节点的获取、模拟鼠标的点击以及资源的下载。<code>selenium</code> 的点击实现特别的人性化。只需要获取节点然后调用 <code>click()</code> 方法就搞定。资源的下载网上有许多教程，主要有两个方法，通过模拟 <strong>右键另存为</strong>，和 <strong>获取url用其他工具下载</strong>。考虑到这里的右键不一定可用，而且操作有一点点复杂。小喵选用了第二种方案。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> NoSuchElementException
<span class="token keyword">import</span> os
<span class="token keyword">from</span> os <span class="token keyword">import</span> path <span class="token keyword">as</span> osp
<span class="token keyword">import</span> urllib

<span class="token comment"># 一个简单的下载器</span>
download<span class="token punctuation">(</span>url<span class="token punctuation">,</span> save_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>
            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span> et<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>et<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    
    driver <span class="token operator">=</span> <span class="token string">"path/to/driver"</span> <span class="token comment"># 驱动地址</span>
    browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>PhantomJS<span class="token punctuation">(</span>driver<span class="token punctuation">)</span> <span class="token comment"># 浏览器实例</span>

    chapter_url <span class="token operator">=</span> <span class="token string">"http://www.tazhe.com/mh/9170/1187061.html"</span>
    save_folder <span class="token operator">=</span> <span class="token string">"./download"</span>

    <span class="token keyword">if</span> <span class="token keyword">not</span> osp<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>save_folder<span class="token punctuation">)</span><span class="token punctuation">:</span>
        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>save_folder<span class="token punctuation">)</span>

    image_idx <span class="token operator">=</span> <span class="token number">1</span>

    browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>chapter_url<span class="token punctuation">)</span> <span class="token comment"># 加载第一个页面</span>

    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token comment"># 根据前文的分析，找到图片的URI地址</span>
        image_url <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">'#qTcms_pic'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>
        save_image_name <span class="token operator">=</span> osp<span class="token punctuation">.</span>join<span class="token punctuation">(</span>save_folder<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'%05d'</span> <span class="token operator">%</span> image_idx<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> osp<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>image_url<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        download<span class="token punctuation">(</span>image_url<span class="token punctuation">,</span> save_image_name<span class="token punctuation">)</span> <span class="token comment"># 下载图片</span>

        <span class="token comment"># 通过模拟点击加载下一页，注意如果是最后一页，会出现弹窗提示</span>
        browser<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">'a.next'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token comment"># 找寻弹窗，如果弹窗存在，说明这个章节下载完毕，这个大循环也就结束了</span>
            browser<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">'#bgDiv'</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        <span class="token keyword">except</span> NoSuchElementException<span class="token punctuation">:</span>
            <span class="token comment"># 没有结束弹窗，继续下载</span>
            image_idx <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="五终焉-写在后面">五、终焉-写在后面</h2>
<p>至此，漫画喵的设计思路和主要的代码实现都介绍完了。上面的代码只是用来示意，小喵自己下载漫画用的代码是另一套。</p>
<p>github的地址是：<a href="https://github.com/miaoerduo/cartoon-cat">https://github.com/miaoerduo/cartoon-cat</a> 。项目只有100多行。不过也用了小喵不少的一段时间。</p>
<p>博客写完了~ 小喵的漫画也下完了~</p>
<p><img src="tazhe-downloaded-content.png" alt="tazhe-downloaded-content" /></p>
<center>
图6 下载好的漫画
</center>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>简易漫画网站搭建-漫画喵Server版</title>
    <url>/2017/03/14/cartoon-cat-server/</url>
    <content><![CDATA[<blockquote>
<p>小喵的唠叨话：寒假的时候写了一个漫画爬虫，爬取了好几个漫画，不过一直没有找到合适的漫画阅读的工具。因此最近就试着自己写一个漫画的网站，放在公网上或者局域网里，这样就能随时随地用手机、Pad看漫画了。</p>
</blockquote>
<p>先放上项目的地址：<a href="https://github.com/miaoerduo/cartoon-cat-server">https://github.com/miaoerduo/cartoon-cat-server</a>，欢迎大家随时star、fork和指教。</p>
<span id="more"></span>
<p>关于漫画爬虫的内容，请参看之前的博客。</p>
<h2 id="写在前面">写在前面</h2>
<p>这里，我们先试着思考几个问题：</p>
<h3 id="为什么要做一个漫画网站而不是app呢">1、为什么要做一个漫画网站，而不是APP呢</h3>
<p>小喵最开始其实是打算做一个QT的漫画阅读软件，这样能够在各种操作系统上用。开发了一小段时间之后，觉得用手机或者Pad看漫画的情况会更多。难道要给手机、平板甚至是PC都编写一套软件吗？这个小喵确实能力上达不到。其次是，如果是本地的APP的话，图片可能还是需要存到设备上，这样同样很麻烦。于是，漫画网站就成为最适合的选择，只要在联网的情况下（或者在同一个局域网中），只要有浏览器，就能够看漫画。这才是真正的跨平台，也是小喵要编写这个工具的原因。</p>
<h3 id="那么一个简单的漫画网站可以怎么去实现">2、那么，一个简单的漫画网站可以怎么去实现</h3>
<p>讲道理的话，其实单纯的静态的网页可能就足够了，给每个漫画图片编写一个页面，包含图片、下一页、上一页等部分就可以。页面的生成可以是一个脚本程序。不过这样的话，也有点麻烦，而且最终的页面的数目可能会很多。小喵不喜欢这种方式。这里，小喵采用的方式是前、后端分离的方式。</p>
<p>整个网站由三个部分组成：</p>
<ul>
<li><strong>数据</strong>：也就是漫画本身。</li>
<li><strong>后台</strong>：后台程序的功能是根据请求返回用户漫画的列表、章节和图片URL等信息。</li>
<li><strong>前端</strong>：调用后台的程序，得到漫画的信息并友好的进行显示。</li>
</ul>
<h3 id="最后我们使用什么技术来实现呢">3、最后，我们使用什么技术来实现呢</h3>
<p>前端的话，使用标准的 <code>Html</code>，<code>Css</code> 和 <code>Js</code> 就可以。后台是个 <code>API Server</code>，<code>Python + Flask</code> 或者 <code>Nodejs + Express</code> 都是不错的选择（使用起来很简单。。。），小喵这里就选用 <code>Nodejs + Express</code> 的方式编写后台（一直写Js就可以了 :P ）。另外，大型的漫画网站，漫画的信息应该会存到数据库中，这样会方便查找和管理。这里考虑到漫画数目比较少，就去掉了数据库这一步骤，直接通过文件操作来得到漫画信息，工作量也大大减少了。</p>
<p>先看一下最终的效果图（虽然界面很简单）：</p>
<p><img src="cartooncat-server.png" alt="cartooncat-server" /></p>
<center>
图1 网站的最终效果图
</center>
<p>现在，喵粉们是不是已经迫不及待的想要动手写代码了呢？</p>
<h2 id="一目录结构">一、目录结构</h2>
<p>下面是小喵的目录结构：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">$ tree blog -N -L 2
blog
├── README.md
├── main.js
├── package.json
└── public
    ├── api.html
    ├── cartoon.html
    ├── chapter.html
    ├── css
    ├── img
    ├── index.html
    ├── js
    └── store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>main.js</code> 这里就是后台API的程序。因为功能很简单，所以就放在一个文件中。<code>package.json</code> 是nodejs的包管理器，在这里可以定义依赖。我们这里只依赖Express。<code>public</code> 这个文件夹用来存放静态的资源，包括Html、Css、js、image以及漫画资源(store)。</p>
<h2 id="二后台程序">二、后台程序</h2>
<h3 id="依赖安装">1. 依赖安装</h3>
<p>原生的 <code>Nodejs</code> 就已经十分适合写API程序了，<code>Express</code> 只是让它更加的方便了而已（至少对于这个项目来说）。</p>
<p><code>Nodejs</code> 的安装十分简单，在官网上 <a href="https://nodejs.org">https://nodejs.org</a> 有下载链接，服务器上使用 <code>apt-get</code> 等工具也很容易安装。</p>
<p><code>Express</code> 的话，可以使用 <code>npm install express —save</code> 来安装。这里小喵使用的 <code>package</code> 的方式来安装。在项目根目录新建 <code>package.json</code> 文件，写入配置信息：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cartoon-cat-server"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.0.1"</span><span class="token punctuation">,</span>
  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"express"</span><span class="token operator">:</span> <span class="token string">"visionmedia/express"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>之后使用 <code>npm install</code> 命令就可以完成安装。安装完成之后会发现根目录多了一个 <code>node_modules</code> 文件夹，里面就是我们的依赖库了。喵粉们如果下载了我的这个项目的话，第一步也是要进入项目目录然后输入 <code>npm install</code> 。</p>
<h3 id="漫画的文件结构">2. 漫画的文件结构</h3>
<p>我们的漫画资源都是通过 <code>漫画喵</code> 这个爬虫工具下载下来的，因此漫画都是每个章节都是一个文件夹，每个章节的漫画图片都放在对应的文件夹中，而且按照页码来命名。</p>
<p>这样通过遍历文件夹似乎就能获取漫画的信息了！</p>
<p>漫画列表和章节中的图片列表都可以通过上述的方式来解决，但是章节的列表却不行。因为漫画的章节有时候并没有明确的顺序（比如突然出现一个番外篇啥的），这样遍历文件夹默认的顺序（按名称）就可能是错误的。 我们有两个解决办法：</p>
<ol type="1">
<li>按照文件夹的创建时间来显示文件名。这样有点不灵活。</li>
<li>在每个漫画的根目录建一个文本文件，用来存放章节的信息。</li>
</ol>
<p>小喵选择第二种策略，创建这个list的方法十分简单粗暴，在漫画目录下面使用:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-r</span> <span class="token operator">></span> index<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>ls</code> 是linux上面的显示目录的工具，<code>-t</code> 表示按时间排序（最上面是最新的），<code>-r</code> 表示倒序，<code>&gt;</code> 是重定向，最终输出到 <code>index</code> 这个文件。然后编辑这个文件，删掉 <code>index</code> 这一行(系统貌似是先生成 <code>index</code> 这个文件，然后再执行 <code>ls</code>，最后把结果输入到文件中，因此文件里面多了一个 <code>index</code> 的文件名)，再做一些必要的调整。</p>
<p>Windows上可以使用:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dir</span> /OD /B <span class="token operator">></span> index<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>dir</code> 是windows的查看目录的命令，<code>/OD</code> 表示按照时间排序，<code>/B</code> 表示只显示文件名，<code>&gt;</code> 重定向到 <code>index</code>。<code>windows</code> 上的这个列表文件中也会出现 <code>index</code> 这个文件名(看来各种操作系统都一样)。另外需要注意的是 <code>windows</code> 的换行和 <code>linux</code> 或 <code>mac</code> 不一样。</p>
<p>这样，我们就可以通过读这个 <code>index</code> 文件来获取章节的信息了。</p>
<p>最终的漫画的结构（为了显示的方便，删除了很多图片和章节）如下：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">$ tree store -N -L 3
store
├── 犬夜叉
│   ├── index
│   ├── 第1章
│   │   ├── 00001.jpg
│   │   └── 00002.jpg
│   └── 第2章
│       ├── 00001.jpg
│       └── 00002.jpg
└── 极黑的布伦希尔特
    ├── index
    ├── 第1章
    │   ├── 00001.jpg
    │   └── 00002.jpg
    └── 第2章
        ├── 00001.jpg
        └── 00002.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="api-编写">3. API 编写</h3>
<p><code>Express</code> 十分的容易使用。这里小喵给一个官网的Hello World的教程让大家看一下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Example app listening on port 3000!'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将上述代码保存成 <code>main.js</code>，使用 <code>node main.js</code> 就可以启动这个程序，然后用浏览器访问 <code>http://localhost:3000</code> ，就能看到一个显示着 <code>hello world</code> 的页面。</p>
<p><code>require</code> 语句用来引入依赖，<code>app</code> 是express的封装的对象。</p>
<p>通过 <code>app.get</code> 方法就可以给指定的url（官方说法叫route）绑定相应的处理方法（GET方法的请求）。处理函数有2个参数 <code>req</code> 表示request，也就是用户的请求，通过这个对象我们可以获取用户的输入的参数，<code>res</code> 表示response，是一个向用户返回数据的对象。</p>
<p><code>listen</code> 用来监听一个端口启动服务。</p>
<p>这里小喵先给出自己定义的一些辅助的函数，定义错误信息和参数校验，后面会使用到：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 引入依赖</span>
<span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 即file system，用来进行文件操作</span>
<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 错误提示
 */</span>
<span class="token keyword">var</span> ErrorHelper <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string-property property">'internal_error'</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
            <span class="token string-property property">'msg'</span><span class="token operator">:</span> <span class="token string">'something wrong with server'</span><span class="token punctuation">,</span>
            <span class="token string-property property">'code'</span><span class="token operator">:</span> <span class="token number">1</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string-property property">'missing_param'</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
            <span class="token string-property property">'msg'</span><span class="token operator">:</span> <span class="token string">'missing param: '</span> <span class="token operator">+</span> param<span class="token punctuation">,</span>
            <span class="token string-property property">'code'</span><span class="token operator">:</span> <span class="token number">2</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string-property property">'error_param'</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">param<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
            <span class="token string-property property">'msg'</span><span class="token operator">:</span> <span class="token string">'the param '</span> <span class="token operator">+</span> param <span class="token operator">+</span> <span class="token string">'('</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">') is illegal'</span><span class="token punctuation">,</span>
            <span class="token string-property property">'code'</span><span class="token operator">:</span> <span class="token number">3</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string-property property">'not_found'</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
            <span class="token string-property property">'msg'</span><span class="token operator">:</span> <span class="token string">'cannot find '</span> <span class="token operator">+</span> param<span class="token punctuation">,</span>
            <span class="token string-property property">'code'</span><span class="token operator">:</span> <span class="token number">4</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 检查参数格式，只能输入字母，数字和汉字
 */</span>
<span class="token keyword">function</span> <span class="token function">checkParam</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\u4e00-\u9fa5_a-zA-Z0-9]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="get_cartoon_list">1) get_cartoon_list</h4>
<p>这个接口用来获取所有的漫画列表。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**
 * 获取漫画列表
 */</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/get_cartoon_list'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/public/store'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err <span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            res<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span>ErrorHelper<span class="token punctuation">.</span><span class="token function">internal_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        res<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">'cartoon'</span><span class="token operator">:</span> files<span class="token punctuation">,</span> <span class="token string-property property">'code'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个函数十分的简单，通过 <code>fs</code> 读取store中的文件名，然后用json的格式返回回去。这里小喵用的jsonp，为了解决跨域请求的问题，不过我们的页面和服务是一台机器的，所以这部分并不需要。</p>
<h4 id="get_chapter_list">2) get_chapter_list</h4>
<p>这个接口用来获取漫画的章节的信息，所以需要输入参数，这里定为cartoon。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**
 * 获取章节信息
 */</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/get_chapter_list'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">var</span> cartoon <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>cartoon<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cartoon<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span>ErrorHelper<span class="token punctuation">.</span><span class="token function">missing_param</span><span class="token punctuation">(</span><span class="token string">'cartoon'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkParam</span><span class="token punctuation">(</span>cartoon<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span>ErrorHelper<span class="token punctuation">.</span><span class="token function">error_param</span><span class="token punctuation">(</span><span class="token string">'cartoon'</span><span class="token punctuation">,</span> cartoon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">var</span> cartoon_dir <span class="token operator">=</span> __dirname <span class="token operator">+</span> <span class="token string">'/public/store/'</span> <span class="token operator">+</span> cartoon<span class="token punctuation">;</span>
    fs<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>cartoon_dir <span class="token operator">+</span> <span class="token string">'/index'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">exists</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>exists<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            res<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span>ErrorHelper<span class="token punctuation">.</span><span class="token function">not_found</span><span class="token punctuation">(</span>cartoon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>cartoon_dir <span class="token operator">+</span> <span class="token string">'/index'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                res<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span>ErrorHelper<span class="token punctuation">.</span><span class="token function">internal_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">var</span> chapter_list <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> d<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            res<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">'chapter'</span><span class="token operator">:</span> chapter_list<span class="token punctuation">,</span> <span class="token string-property property">'code'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先判断输入的参数，之后判断对应漫画的文件夹中是否有index这个文件，如果有的话就读取然后返回给用户。</p>
<h4 id="get_img_list">3) get_img_list</h4>
<p>这个接口用来返回漫画的具体章节的图片的URL，用户需要输入漫画名(cartoon)和章节名(chapter)。注意要修改自己的HOST的地址。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token constant">HOST</span> <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span> <span class="token comment">// 如果不是在本机上使用，请改成实际的ip地址</span>
                        <span class="token comment">// 后面的图片的URL会使用这个变量来构造</span>
<span class="token keyword">var</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/get_img_list'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">var</span> cartoon <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>cartoon<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cartoon<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span>ErrorHelper<span class="token punctuation">.</span><span class="token function">missing_param</span><span class="token punctuation">(</span><span class="token string">'cartoon'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkParam</span><span class="token punctuation">(</span>cartoon<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span>ErrorHelper<span class="token punctuation">.</span><span class="token function">error_param</span><span class="token punctuation">(</span><span class="token string">'cartoon'</span><span class="token punctuation">,</span> cartoon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">var</span> chapter <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>chapter<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>chapter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span>ErrorHelper<span class="token punctuation">.</span><span class="token function">missing_param</span><span class="token punctuation">(</span><span class="token string">'chapter'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkParam</span><span class="token punctuation">(</span>chapter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span>ErrorHelper<span class="token punctuation">.</span><span class="token function">error_param</span><span class="token punctuation">(</span><span class="token string">'chapter'</span><span class="token punctuation">,</span> chapter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">var</span> cartoon_dir <span class="token operator">=</span> __dirname <span class="token operator">+</span> <span class="token string">'/public/store/'</span> <span class="token operator">+</span> cartoon<span class="token punctuation">;</span>
    fs<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>cartoon_dir <span class="token operator">+</span> <span class="token string">'/index'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">exists</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>exists<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            res<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span>ErrorHelper<span class="token punctuation">.</span><span class="token function">not_found</span><span class="token punctuation">(</span>cartoon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>cartoon_dir <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> chapter<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> images</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                res<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span>ErrorHelper<span class="token punctuation">.</span><span class="token function">error_param</span><span class="token punctuation">(</span><span class="token string">'chapter'</span><span class="token punctuation">,</span> chapter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">// 按名字排序</span>
            images<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">lhs<span class="token punctuation">,</span> rhs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">var</span> urls <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">image</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token string">'http://'</span> <span class="token operator">+</span> <span class="token constant">HOST</span> <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token constant">PORT</span> <span class="token operator">+</span> <span class="token string">'/store/'</span> <span class="token operator">+</span> cartoon <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> chapter <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> image<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">'img'</span><span class="token operator">:</span> urls<span class="token punctuation">,</span> <span class="token string-property property">'code'</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是目前最复杂的函数了，先检查参数，然后判断漫画是否存在，再判断章节是否存在，列出章节文件夹里面的图片名，并按数字的顺序排序。最终构造成URL，返回给用户。</p>
<h4 id="静态资源">4) 静态资源</h4>
<p>public文件夹中的资源都是静态资源，用户可以通过URL访问。在这里Nodejs也是支持的：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>不过Nodejs本身并不适这种静态资源的工作，所以如果是生产环境中，建议大家还是使用Nginx等工具，让Nodejs安心的处理业务逻辑吧。</p>
<h4 id="启动服务">5) 启动服务</h4>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> server <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"应用实例，访问地址为 http://%s:%s"</span><span class="token punctuation">,</span> <span class="token constant">HOST</span><span class="token punctuation">,</span> <span class="token constant">PORT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="三前端">三、前端</h2>
<h3 id="ajax">1. Ajax</h3>
<p>前端使用Ajax就可以很容易完成，相信即使是前端小白也能实现，而且还比小喵做的好看（无奈脸）。小喵使用了<a href="http://jquery.com">JQuery</a> 来处理Ajax的内容，界面库使用了 <a href="https://metroui.org.ua">Metro</a>，然而即使这样也没有提高网站的颜值。</p>
<p>源码可以从github上下载到，所以小喵就不重点介绍前端了。</p>
<h3 id="懒加载">2. 懒加载</h3>
<p>有一点需要注意，在漫画图片的页面中，通常会出现大量的图片，如果只是简单的使用 <code>img</code> 标签的话，可能会导致浏览器同时加载所有的图片，如果网速不好的话，我们的体验也会相当的差（局域网请无视）。所以我们使用一种 <strong>懒加载</strong> 的策略，只有可见的图片才会加载。然后小喵就从github上找相关的插件，然后发现了一个使用比较方便的代码，还有详细的原理介绍，感兴趣的话大家可以看一下。</p>
<p>图片懒加载插件实战：<a href="http://www.cnblogs.com/beidan/p/5648240.html">http://www.cnblogs.com/beidan/p/5648240.html</a></p>
<p>插件的github：<a href="https://github.com/beidan/lazeLoadImg">https://github.com/beidan/lazeLoadImg</a></p>
<h2 id="四写在后面">四、写在后面</h2>
<p>至此，我们就搭建好了一个可以随时玩耍的个人漫画网站了。喵粉们感兴趣可以star、fork这个项目，如果喜欢开发的话，能帮忙一起提高网站的颜值就更好了 O(∩_∩)O哈！</p>
<p>项目地址：<a href="https://github.com/miaoerduo/cartoon-cat-server">https://github.com/miaoerduo/cartoon-cat-server</a> ，欢迎大家随时star、fork和指教。</p>
<p>PS. 请搭配漫画喵爬虫版一起食用：<a href="https://github.com/miaoerduo/cartoon-cat">https://github.com/miaoerduo/cartoon-cat</a></p>
<p>使用的话，按如下的流程：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:miaoerduo/cartoon-cat-server.git
<span class="token builtin class-name">cd</span> cartoon-cat-server
<span class="token function">npm</span> <span class="token function">install</span>
<span class="token function">node</span> main.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>另外，为了避免程序突然崩掉，建议大家使用 <code>forever</code> 这个工具。上面的流程的最后一句 <code>node main.js</code> 就可以改成下面的。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> forever <span class="token parameter variable">-g</span>
forever start main.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这样，我们的程序就更健壮了。 最后，小喵再说一句，这个项目有很多的缺陷，比如直接访问文件，Nodejs直接管理静态文件，需要提供奇怪的参数，没有验证用户等等。因此不适合真的生成中的使用。不过，自娱自乐应该是足够了。小喵自己是放在宿舍的树莓派里，睡前躺床上看会儿漫画。</p>
<p>希望小喵能和大家一起学习和进步~~</p>
<p><strong>转载请注明出处~</strong></p>
]]></content>
      <categories>
        <category>Miscellanea</category>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>Interest</tag>
      </tags>
  </entry>
  <entry>
    <title>CNN的目标检测概述（一）</title>
    <url>/2018/02/26/cnn-object-detection1/</url>
    <content><![CDATA[<p>在2012年的ImageNet中，AlexNet拔得头筹。之后，CNN成为了图像识别中的一大利器。</p>
<p>在目标检测中引入CNN，开山之作就是2013年的 Rich feature hierarchies for accurate object detection and semantic segmentation，之后简称R-CNN。</p>
<span id="more"></span>
<h2 id="一r-cnn">一、R-CNN</h2>
<h3 id="算法原理">1）算法原理</h3>
<p>R-CNN中，将目标检测分成两步来实现：</p>
<ol type="1">
<li>首先是生成Region proposals，也就是候选框。有许多的基于图像的低维特征生成候选框的算法，例如selective search等。</li>
<li>训练一个分类和回归的网络。这个网络可以根据候选框的区域的图片，判断这个图片的类别，以及它应该回归到的位置。</li>
</ol>
<h3 id="检测过程">2）检测过程</h3>
<p>这样，在具体的一张图片的目标检测的时候，我们可以通过下面的过程来得到结果：</p>
<p><img src="RCNN-Framework.jpg" alt="RCNN-Framework" /></p>
<ol type="1">
<li>对于给定一张图片，通过算法得到大量的候选框(2k个左右)。</li>
<li>将候选框的图片裁剪出，然后输入到CNN网络中。</li>
<li>网络的输出为分类的结果和回归的结果。然后我们就知道这个区域是不是目标，如果是，计算出它的回归的位置。</li>
<li>得到大量的有类别的框，通过NMS算法，得到最终的目标的框。</li>
</ol>
<h3 id="网络训练">3）网络训练</h3>
<p>对于目标检测这个任务，我们现有的标注数据其实并不多。所以通常都是使用ImageNet等大的公开的数据进行预训练，或者直接使用预训练好的模型在finetune。</p>
<h4 id="预训练supervised-pre-training">1. 预训练（Supervised pre-training）</h4>
<p>这里使用ILSVRC 2012（也就是ImageNet的训练数据集）进行分类任务的CNN网络的预训练。</p>
<p>在我们自己复现论文的时候，可以选择现有的开源模型。在各种框架的Model Zoo中可以方便的下载各种网络的模型。常见的有AlexNet，VGGNet，GoogleNet，ResNet等的模型。据师弟的实验，VGGNet在目标检测中使用的频率最高，效果也最好。</p>
<h4 id="微调domain-specific-fine-tuning">2. 微调（Domain-specific fine-tuning）</h4>
<p>之前的模型是用于分类的模型，因此对于VOC中的目标检测并不完全的切合。这里需要再使用VOC的数据进行fine-tuning。</p>
<p>VOC中需要检测的目标共有20种，因此我们的分类任务需要的类别数为21类，其中包含一个背景类。</p>
<p>训练数据使用VOC的数据，首先用Selective search等方法得到候选框，截取候选框的图片。根据候选框和Groundtruth直接的IOU（交比并，通常认为大于0.5就是目标）判断这个候选框是不是目标，如果是目标，再计算出应该的回归值。这里选择的IOU的阈值为0.3。</p>
<h4 id="目标分类器object-category-classifiers">3. 目标分类器（Object category classifiers）</h4>
<p>对每个类别的特征训练SVM。由于训练数据过大，这里使用了难负样本最小化策略。最终的分类按照SVM的输出打分而不是上面的网络的21分类的输出。</p>
<p>通常，我们可以使用CNN的输出表示类别的得分，但有时候为了得到更好地结果，会将最后一个隐含层的输出作为特征，然后给每个类别再训练一个SVM模型。</p>
<h4 id="bounding-box回归">4. Bounding Box回归</h4>
<p>这里使用了每个proposal的最后的卷积的输出（pool5）作为特征，训练了线性回归模型，用来预测新的窗口的位置。</p>
<h3 id="个人理解">4）个人理解</h3>
<p>R-CNN作为目标检测的开山之作，提出了一套目标检测的框架，是两段式的目标检测的代表。相比于传统的目标检测算法，他并不依赖手工设计的特征算子，而是通过CNN这一工具完成特征提取和分类回归的任务。</p>
<p>当然，R-CNN的缺点也很明显。首先是，速度慢。由于一张图片可以提取大量的候选框（~2K），每个候选框都要通过网络进行前馈，这样造成大量的计算量。其次是训练的过程需要人工的处理数据，相比于之后的目标检测的方法，并不是十分的方便。</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>CNN的目标检测概述（二）</title>
    <url>/2018/03/01/cnn-object-detection2/</url>
    <content><![CDATA[<blockquote>
<p>这次介绍的是2015年的Kaiming He的一篇论文：Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition，以下简称SPP-net。 SPP-net的主要贡献是提出了一种新的pooling的方式，spatial pyramid pooling，简称为SPP。使用这种pooling的方式，可以将任意大小的输入feature map给pooling到固定的大小。使用这种pooling的方式，最终在分类和检测任务上均有一定的效果。</p>
</blockquote>
<span id="more"></span>
<h3 id="二spp-net">二、SPP-net</h3>
<h4 id="问题描述">1）问题描述</h4>
<p>在介绍SPP这个pooling方式之前，我们先说一下，为什么需要这种特殊的pooling。</p>
<p>一般来看，CNN结构通常都由两个部分组成：卷积层和全连接层。比如7层的AlexNet，就是由5层的卷积层和2层的全连接层组成。对于卷积层，它可以处理任意尺度的输入（= = 请忽略极端情况）。而全连接层需要固定大小的输入。因此最终，我们的CNN结构的输入大小是由全连接层所固定。</p>
<p>那么固定大小的输入会造成什么问题呢？一般图像的大小并不是固定的，但是CNN要求输入固定，这样我们通常会采取两种方式得到固定大小的图像：裁剪和变形（仿射变换，缩放等）。</p>
<p><img src="cnn-object-detection-crop-and-warp.jpg" /></p>
<p>裁剪操作很难正好的包含需要的目标，而变形的方式会导致目标发生形变。两种方式都不能很好的处理图片的尺度问题。</p>
<p>而SPP这种pooling方式的引入，就可以突破CNN固定输入的约束。SPP可以将任意大小的输入feature map给pooling到固定的大小。将SPP层加在最后一个卷积层的后面，这样就可以pooling出固定的大小，之后再接上全连接层。这样得到的CNN结构，就可以以任意尺度的图像作为输出了，而使用了SPP层的网络，就成为SPP-net。</p>
<p><img src="cnn-and-spp-net.jpg" /></p>
<p>这张图就是一般的CNN结构（上）和SPP-net（下）的结构示意图。</p>
<h4 id="spp层工作流程">2）SPP层工作流程</h4>
<p>使用SPP层的CNN结构如下：</p>
<p><img src="cnn-object-detection-spp-framework.jpg" /></p>
<p>这里重点介绍一下SPP层的工作方式，之前查阅其他的博客，发现都没有得到很好地解释，为此专门阅读了Caffe的SPPLayer实现代码，发现实现的方式很简单。</p>
<p>上图中，最下方是CNN的卷积部分，黑色的部分是最后一个卷积层的输出，在这个图里面，卷积的最终输出的通道数为256。</p>
<p>对于一个feature map，我们按照固定的方式对他进行划分。比如现在有一个feature map的宽和高分别是W和H，通道数不妨就取256。我们使用MAX-Pooling的方式做处理，金字塔的层数设置为3。</p>
<p>首先，我们将这个feature map复制为3份。每一份都看成金字塔的一层。</p>
<ol type="1">
<li>对于第一层，也就是顶层，即图中最右边的示意图。我们将整个feature map看做一个整体。这样使用一个 <code>(W, H)</code> 的kernel来进行pooling，这样就得到了 <code>1*1*256</code> 的输出。</li>
<li>对于第二层，即图中的中间的示意图。我们将feature map看成 <code>2*2</code> 个独立的区域，每个区域单独的pooling。实现上即使用了kernel大小为 <span class="math inline">\((\lceil \frac{W}{2}\rceil ,\lceil \frac{H}{2}\rceil )\)</span>，stride大小为 <span class="math inline">\((\lceil \frac{W}{2}\rceil ,\lceil \frac{H}{2}\rceil )\)</span> 的一个pooling层进行pooling。最终得到了 <code>2*2*256</code> 的输出。</li>
<li>同理，第三层，即图中的左边的示意图。将feature map看成 <code>4*4</code> 个独立的区域，单独pooling。使用kernel大小为 <span class="math inline">\((\lceil \frac{W}{4}\rceil ,\lceil \frac{H}{4}\rceil )\)</span>，stride大小为 <span class="math inline">\((\lceil \frac{W}{4}\rceil ,\lceil \frac{H}{4}\rceil )\)</span> 的pooling层进行pooling。最终得到 <code>4*4*256</code> 的输出。</li>
<li>总结下来，就是对于第N层，我们将整个feature map划分成 <span class="math inline">\((2^{N-1}*2^{N-1})\)</span> 的区域，分别pooling。实现上使用kernel为 <span class="math inline">\((\lceil \frac{W}{2^{N-1}}\rceil ,\lceil \frac{H}{2^{N-1}}\rceil )\)</span>，stride为 <span class="math inline">\((\lceil \frac{W}{2^{N-1}}\rceil ,\lceil \frac{H}{2^{N-1}}\rceil )\)</span> 的pooling层进行pooling即可，最终得到 <span class="math inline">\((2^{N-1}*2^{N-1}*dim)\)</span> 的输出。</li>
</ol>
<p>最终将所有的pooling的结果进行flatten，最后concat在一起就完成。这里由于输入的feature map的大小可能不能被 <span class="math inline">\(2^N\)</span>整除，采取了向上取整的做法，因此有时候需要额外的pad来填充feature map。</p>
<p>还有，这里使用的 <span class="math inline">\(2^N\)</span> 这种区域划分的策略，那么我们能不能使用其他的策略呢？比如划分成 <code>1*1</code>，<code>3*3</code>，<code>5*5</code>，<code>7*7</code>...这个样子呢？这里，其实是可以的。SPP提供的是一个pooling的策略，只要能理解他的原理，我们完全可以设计一个自己的pooling方式。事实上，作者也使用了<code>1*1</code>，<code>2\*2</code>，<code>3*3</code>这样的三级划分。</p>
<p>以上就是SPP层的实现原理，总结下来就是，对输入feature map使用多个不同大小的pooling层进行无重叠的pooling操作，最终再合并。</p>
<p>如果这里解释的还不够清楚地话，可以参看一下Caffe的源码，相信聪慧的你一定能轻松的理解。</p>
<h4 id="spp层的特性">3）SPP层的特性</h4>
<p>这里直接照搬论文的说法：</p>
<blockquote>
<p>We note that SPP has several remarkable properties for deep CNNs: 1) SPP is able to generate a fixed-length output regardless of the input size, while the sliding window pooling used in the previous deep networks cannot; 2) SPP uses multi-level spatial bins, while the sliding window pooling uses only a single window size. Multi-level pooling has been shown to be robust to object deformations; 3) SPP can pool features extracted at variable scales thanks to the flexibility of input scales. Through experiments we show that all these factors elevate the recognition accuracy of deep networks.</p>
</blockquote>
<p>SPP有很多特性：</p>
<ol type="1">
<li>SPP能够对于任意大小的输入，得到固定大小的输出。（强调输出大小固定）</li>
<li>SPP使用了多级的pooling维度（从上面的SPP工作流程就能看出来，他有各式各样的pooling尺寸），而传统的pooling策略是固定pooling大小的，多级pooling对目标的变形等有很好的鲁棒性。</li>
<li>SPP能够处理任意大小的输入。（强调输入大小可变）</li>
</ol>
<h4 id="分类任务中的spp">4）分类任务中的SPP</h4>
<p>分类不是这个系列要研究的重点，这里就简单的介绍一下，作者如何训练SPP-net的。</p>
<h5 id="单尺度训练">1 单尺度训练</h5>
<p>单尺度训练和一般的CNN的训练没有什么不同，图像经过缩放，然后截取224*224的区域用来训练。</p>
<h5 id="多尺度训练">2 多尺度训练</h5>
<p>由于SPP可以处理任意尺度的输入，这就使得多尺度的输入图像的训练成为可能。但是各种CNN框架的卷积的实现都是使用矩阵的操作来完成的，一个mini-batch中的图像的大小必须是相同的。这里，作者先使用一个尺度的图像进行训练，1个epoch之后，再换成另一种尺度进行训练，这样不断的改变尺度。</p>
<p>最终，训练的收敛情况和一般的单尺度训练是差不多的，但是测试的效果要好了一些。</p>
<p>上面是训练上的技巧，细节可以看原论文。在测试的时候，也有相应的不同策略。以下简单说明一下作者的实验和结论：</p>
<h5 id="多级pooling提高准确率">1 多级Pooling提高准确率</h5>
<p>将一般的网络，ZFNet，OverFeat等的最后一个卷积替换成SPP层，发现最终的效果有提升。</p>
<h5 id="多尺度训练可以提高准确率">2 多尺度训练可以提高准确率</h5>
<p><img src="cnn-object-detection-multi-scale-test.jpg" /></p>
<p>多尺度训练即上面训练中的策略。多尺度训练的结果要比单尺度好。</p>
<h5 id="使用整张图片会提高准确率">3 使用整张图片会提高准确率</h5>
<p><img src="cnn-object-detection-full-image-train.jpg" /></p>
<p>这里作者做了两组实验。一是中心crop的224*224的图像作为输入，另一个是将图像的短边缩放到256像素并保证长宽比，然后输入网络做前馈。</p>
<h5 id="multi-view的测试方式">4 Multi-View的测试方式</h5>
<p>这部分和之后的目标检测的方式类似。</p>
<h4 id="目标检测中的spp">5）目标检测中的SPP</h4>
<p>在R-CNN中，需要先是用selective search等方法，生成候选框，然后使用候选框的图像进行分类和回归的训练。在SPP-net，可以很大的简化这一流程，加速训练和测试。</p>
<h5 id="目标检测中spp的训练">1 目标检测中SPP的训练</h5>
<p>首先使用selective search得到2K的候选框。之后将图像缩放到短边固定大小（可以是多种尺度，这样可以一定程度提升性能），然后使用一个预训练好的网络的卷积的部分（比如ZFNet的前5层）进行前馈，得到整张图的feature map。根据候选框的位置，可以推出候选框在feature map上相应的位置，对这些位置上的feature map进行SPP操作，从而可以得到候选框的特征向量。</p>
<p>作者做了两个方式的训练，一个是使用SVM做的类别分类器，另一种是fine-tune预训练的模型。 对于SVM的训练，目的是给每一种类别都训练一个二分类的分类器。因此总共需要训练20个SVM分类器。根据和groundtruth的iou来选择正负样本，具体的选择策略和R-CNN相同。最终得到了20个分类器，给每个候选框打分，最终的结果使用NMS来处理。</p>
<p>预训练模型的fine-tune。这里只fune-tune了fc层。保留了前面的卷积部分。这样的话，就也只需要使用前面提取的候选框的特征向量作为输入了。训练十分的迅速。回归的训练，和R-CNN相同，使用了最后的pool5的特征来训练线性回归模型。</p>
<h5 id="目标检测的测试流程">2 目标检测的测试流程</h5>
<p>和训练部分类似，目标检测的首先使用selective search得到候选框，之后将图像缩放成固定尺度（可以是多个尺度，这样会有更好的效果），使用卷积部分前馈得到整张图的feature map。使用SPP得到每个候选框的特征向量。之后将特征向量输入到SVM或者fine-tune之后的网络的fc层，从而得到最终的框的得分和位置。最终使用NMS处理即可。</p>
<h5 id="多模型融合">3 多模型融合</h5>
<p>多模型融合可以很好的提高最终的准确率。论文中，作者使用了两种不同的网络，分别按照上面的方式得到候选框的得分和位置。之后将两个网络的候选框放在一起，使用NMS处理之后，作为最终的结果。检测的效果的确有了一些提升。</p>
<h4 id="个人总结">6）个人总结</h4>
<p>总体来说，本文最重要的部分还是在于SPP层的提出。这个层可以有效的将各种尺度的输入pooling到固定大小的输出。在分类任务上，多级pooling的策略可以从各种维度上保留特征的信息，在检测任务上，又可以通过一次性计算全图的feature map，再pooling出每个候选区域的特征，极大地减小特征提取部分的计算量。</p>
<p>论文中有大量的实验和训练中的细节，这里并没有介绍到。感兴趣的同学最好还是看一下原文，相信应该可以收获更多。</p>
<p>在检测部分，该方法还是有一些缺点的。首先是这个的训练过程和R-CNN还是差不多的，相比于之后的目标检测的方法，可以看出这里还是需要大量的人工的参与。其次，这里的特征是固定的，在SVM或者模型的fine-tune过程中，都是直接使用网络的卷积层的输出，并没有对卷及部分进行训练。那么图像的特征在检测任务中是否还具有优化的潜力呢？我相信还是有的。</p>
<p>技术总是在不断的进步的。这里的SPP层的提出。可以说，一定程度上造就了另一个经典的目标检测方法Fast R-CNN的提出，Fast R-CNN就是下一篇博客的主角！</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>CNN的目标检测概述（三）</title>
    <url>/2018/04/03/cnn-object-detection3/</url>
    <content><![CDATA[<p>本次介绍的是Fast R-CNN，与之前的RCNN和SPPNet不同，Fast R-CNN是一个清晰和快速的目标检测的框架。在训练和测试的速度上都远超过上述两种方法。同时，Fast R-CNN的训练是一次性的端到端的训练，同时训练的分类和回归两个任务。极大的简化的训练的流程。</p>
<p>项目代码：<a href="https://github.com/rbgirshick/fast-rcnn">https://github.com/rbgirshick/fast-rcnn</a></p>
<span id="more"></span>
<h2 id="三fast-r-cnn">三、Fast R-CNN</h2>
<h3 id="r-cnn与sppnet的不足">1）R-CNN与SPPNet的不足</h3>
<p>R-CNN在目标检测中有很好的准确率，但是这个方法本身仍有很多的问题。</p>
<ol type="1">
<li><strong>训练过程是多级的。</strong> R-CNN的训练分成三个部分，首先是 <code>finetune</code> 一个网络（目标检测的类别和ImageNet不一样）。之后是使用SVM进行目标的分类的训练。最后是使用 <code>feature map</code> 来进行目标的 <code>bounding-box</code> 的回归训练。</li>
<li><strong>训练过程费时费空间。</strong> SVM和回归两个任务，需要存储目标的特征，需要很多空间。网络的训练过程很慢。</li>
<li><strong>测试速度太慢。</strong> 需要对每个 <code>proposal</code> 进行前馈，耗时太长。速度只有47s / image。</li>
</ol>
<p><code>SPPNet</code> 可以加速 <code>R-CNN</code>，在 <code>SPPNet</code> 中，在卷积的部分直接前馈整张图片，之后对于每个 <code>proposal</code>，计算出它在 <code>feature map</code> 上的位置，然后使用 <code>SPP Pooling</code> 的方式，得到定长的特征向量。使得测试时间大大缩短。但 <code>SPPNet</code> 也有很多的问题。首先，<code>SPPNet</code> 在训练的过程和 <code>R-CNN</code> 几乎相同，因此有上面所有的问题，其次，<code>SPPNet</code> 只训练的网络最后的FC层，这样，前面的卷积的部分就没有参与训练。</p>
<h3 id="fast-r-cnn的主要贡献">2）Fast R-CNN的主要贡献</h3>
<ol type="1">
<li>更好的检测效果（mAP）</li>
<li>训练是单步的，使用多任务loss</li>
<li>所有的网络的参数都可以训练和更新</li>
<li>不需要存储特征</li>
</ol>
<h3 id="fast-r-cnn的训练">3）Fast R-CNN的训练</h3>
<p><code>Fast R-CNN</code> 的结构如下：</p>
<p><img src="fastrcnn.jpg" /></p>
<p>首先按照惯例，使用一个在ImageNet预训练好的模型。保留网络的卷积的部分，在卷积的后面接上 <code>RoI Pooling</code> 层，<code>RoI Pooing</code> 层可以将 <code>feature map</code> 上任意大小的特征区域 <code>Pooling</code> 到指定的大小。直接接入若干个全连接，最终再接上两组输出的分支。一个用于输出分类的结果，假设有K个类别的目标，则输出K+1个类别，其中多出的一个类别是背景类。另一个分支用来输出回归的结果，每个目标都有自己的回归的结果，因此总的输出数为4K（K个类别的 <code>x,y,w,h</code>）。</p>
<p>这里就有一个问题：我们为什么不直接输出4个数值直接表示目标的位置，而是这么费劲的得到4K个输出呢？其实回归出4个值，讲道理也是可行的。通常给每个类都进行回归，可以理解为每个类别都是用自己这个类别自己的信息进行位置的预测，而不是使用统一的信息进行预测。比如一张图是人骑自行车，那么我们应该回归出人还是自行车呢？而这里的策略就是两个都分别回归出两个目标的位置。</p>
<h4 id="roi-pooling层">1 RoI Pooling层</h4>
<p><code>RoI Pooling</code> 层是一种简化版本的 <code>SPP Pooling</code> 层。他的计算方式如下：</p>
<p>对于 <code>feature map</code> 上的一个感兴趣的区域（<code>Region of Interest</code>），即 <code>RoI</code>，其大小为 <code>W × H</code>。我们需要把它 <code>pooling</code> 到 <code>W x H</code> 的大小。那么我们就使用 <span class="math inline">\(\frac{W}{w}*\frac{H}{h}\)</span> 的 <code>pooling</code> 核，<code>stride_w</code> 设成 <span class="math inline">\(\frac{W}{w}\)</span> ，<code>stride_h</code> 设成 <span class="math inline">\(\frac{H}{h}\)</span> 。这样经过 <code>pooling</code> 就可以到的我们需要的 <code>W x H</code> 的输出了，且通道数不变。当然这里要考虑取整的问题，细节上可以看一下 <code>FastR-CNN</code> 的源码。</p>
<h4 id="使用预训练的网络">2 使用预训练的网络</h4>
<p>本文中，使用了3个在ImageNet预训练好的模型。他们都有5个 <code>max pooling</code> 层，卷积层数在5-13之间。对于这些用于初始化的模型，需要做三点改变：</p>
<ol type="1">
<li>将最后一个 <code>max pooling</code> 层替换成 <code>RoI Pooling</code> 层。输出固定的大小，并且这个大小和网络的全连接的输入要相匹配。（看样子，这里还想复用之前的FC层的参数）</li>
<li>网络的最后的FC层，替换成两并列的FC。一个用于输出新的类别（K+1），另一个用来输出回归的结果（4K）。</li>
<li>网络的输入变成两个，一个是图像数据（N个），另一个是 <code>RoI</code>（R个）。</li>
</ol>
<h4 id="fine-tuning-for-detection">3 Fine-tuning for detection</h4>
<p>在 <code>Fast R-CNN</code> 中，训练的样本是整张图像，网络的卷积部分可以处理任意尺度的输入，因此可以一次性得到整张图像的 <code>feature map</code>。之后，根据输入的 <code>RoI</code> 的位置（也就是之前的 <code>Proposal</code>），对每个区域在 <code>feature map</code> 上进行 <code>RoI Pooling</code>，得到固定大小的输出。最终经过若干个全连接，得到分类和回归的输出，监督训练。从而使得检测任务可以做到 <code>one stage</code>。整个过程包括：<code>Loss</code>，<code>mini-batch</code> 采样策略，<code>RoI Pooling</code> 层的后馈以及 <code>SGD</code> 的超参数。下面专门依次介绍。</p>
<h3 id="fine-tuning-for-detection-1">4）Fine-tuning for detection</h3>
<h4 id="multi-task-loss">1 Multi-Task loss</h4>
<p>网络共有两个输出，一个是每个RoI的分类的概率，使用 <code>Softmax</code> 之后得到概率分布 <span class="math inline">\(p=(p_{0},p_{1},p_{2},...,p_{K})\)</span>。</p>
<p>另一个输出是回归的结果，每个类别的结果用 <span class="math inline">\(t^{k}=(t^{k}_{x},t^{k}_{y},t^{k}_{w},t^{k}_{h}), k \in [0,K)\)</span> 表示。</p>
<p>这里使用多任务Loss的监督学习：</p>
<p><span class="math display">\[L(p,k^{*},t,t^{*})=L_{cls}(p,k^{*})+\lambda[k^{*}\ge1]L_{loc}(t,t^{*})\]</span></p>
<p>其中，<span class="math inline">\(k^{*}\)</span> 表示正确类别的 <code>label</code>，<span class="math inline">\(L_{cls}(p,k^{*})=-log(p_{k^{*}})\)</span> 是标准的交叉熵Loss。</p>
<p>对于回归的部分，对于一个类别 <span class="math inline">\(k^{*}\)</span> ，正确的回归值为 <span class="math inline">\(t^{*} = (t^{*}_{x},t^{*}_{y},t^{*}_{w},t^{*}_{h})\)</span> ，预测的回归值 <span class="math inline">\(t = (t_{x},t_{y},t_{w},t_{h})\)</span> ，对于 <span class="math inline">\([k^{*}\ge1]\)</span> 的值，当 <span class="math inline">\(k^{*}\ge1\)</span> 时为1，否则为0（0的时候表示背景类，不需要回归）。</p>
<p>对于回归，使用如下的Loss：</p>
<p><span class="math display">\[L_{loc}(t, t^{*}) = \sum_{i \in {x,y,w,h}} smooth_{L1}(t_{i}, t^{*}_{i})\]</span></p>
<p>其中：</p>
<p><span class="math display">\[smooth_{L1}(x) = \left\{\begin{matrix} 0.5x^{2} &amp; if |x| &lt; 1 \\ |x|-0.5 &amp; otherwise \end{matrix}\right.\]</span></p>
<p>使用 <code>smoothL1 Loss</code> 的好处是，在 <code>x</code>比较大的时候，他的梯度为固定的1，而使用 <code>L2 Loss</code> 的时候，其梯度为 <code>2x</code>，会变得很大，不利于训练。</p>
<p>等式中的 <code>lambda</code> 用来平衡两种 <code>Loss</code> 之间的关系，这里的对于 <code>groundtruth</code> 进行了归一化，使得他的均值为0，方差为单位方差。在这种情况下，<code>lambda</code> 取1，在各种实验中均取得了不错的结果。</p>
<p>这里的归一化的操作，在之前的 <code>RCNN</code> 和之后的 <code>Faster R-CNN</code> 等都没有再出现。让我仔细看了一下源码才大致知道他是怎么计算的。至于效果，论文中并没有提到。这里感兴趣的同学可以看看源码。</p>
<p>对于回归值的计算。使用如下的公式：</p>
<p><span class="math display">\[G=\{G_{x},G_{y},G_{w},G_{h}\}\]</span></p>
<p>表示 <code>groundtruth</code> 的位置，<span class="math inline">\(P=\{P_{x},P_{y},P_{w},P_{h}\}\)</span> 表示 <code>proposal</code> 的位置。<code>x</code> 和 <code>y</code> 表示目标中心的坐标，<code>w</code> 和 <code>h</code> 表示宽和高。对于每个 <code>proposal</code>，其回归的目标为：</p>
<p><span class="math display">\[\begin{matrix} t_{x} = \frac{G_{x} - P_{x}}{P_{w}} \\ t_{y} = \frac{G_{y} - P_{y}}{P_{h}} \\ t_{w} = \log{\frac{G_{w}}{P_{w}}} \\ t_{h} = \log{\frac{G_{h}}{P_{h}}} \end{matrix}\]</span></p>
<p>这里的 <code>tw</code> 和 <code>th</code> 用了一个 <code>log</code> 函数，为什么不直接使用类似于 <code>Gw/Pw - 1</code> 这样的形式呢？我想了很久，才恍然大悟。如果 <code>Gw/Pw</code> 的值分别为0.5和2的时候，二者都是两倍的关系，取log之后正好互为相反数。</p>
<h4 id="mini-batch的样本选择">2 Mini-batch的样本选择</h4>
<p>对于每一个 <code>mini-batch</code>，选择2张图片，每个图片选择64个 <code>RoI</code>，得到总计128个 <code>RoI</code>。其中25%的 <code>RoI</code> 与目标的 <code>IOU</code> 大于0.5，即25%的正样本，75%的负样本。在训练中，所有的样本按照50%的几率翻转。没有其他的额外的数据增强的策略。</p>
<h4 id="roi-pooling层的后馈">3 RoI Pooling层的后馈</h4>
<p>这部分没什么好说的，和 <code>Max Pooling</code> 一样，<code>RoI Pooling</code> 前馈的时候保存的最大值的索引信息，直接后馈就行。</p>
<h4 id="sgd-超参数">4 SGD 超参数</h4>
<blockquote>
<p>The fully-connected layers used for softmax classification and bounding-box regression are initialized randomly from a zero-mean Gaussian distribution with standard deviations 0.01 and 0.001, respectively. All layers use a per-layer learning rate of 1 for weights and 2 for biases (following standard practice) and a global learning rate of 0.001. When training on VOC07 or VOC12 trainval we run SGD for 30k mini-batch iterations, and then lower the learning rate to 0.0001 and train for another 10k iterations. When we train on larger datasets, we run SGD for more iterations, as described later. A momentum term with weight 0.9 and weight decay factor of 0.0005 are used in all experiments.</p>
</blockquote>
<h3 id="尺度变化">5）尺度变化</h3>
<p>由于目标的尺度跨度很大，这里有两种处理的办法：</p>
<h4 id="暴力学习">1 暴力学习</h4>
<p>使用整张图片训练，一次性处理所有尺度的目标。这样依赖网络学习出不同尺度的目标。</p>
<h4 id="图像金字塔">2 图像金字塔</h4>
<p>将图像进行不同尺度的缩放，每种尺度的图像，网络都只学习最适合学习的尺度的目标。在测试的时候，也是，输入不同尺度的图像，得到不同尺度的目标。在实验中，这种方法的mAP更高，但是更加的耗时。</p>
<h3 id="svd分解压缩检测">6）SVD分解，压缩检测</h3>
<p>在一般的分类的网络中，计算量主要在前面的卷积的部分。但是对于检测来说，由于有大量的RoI，对于每个RoI都需要经过一次全连接，最终卷积和全连接的计算量差不多。</p>
<p>对于一个全连接，它的权重是一个 <code>u × v</code> 的矩阵 <code>W</code>。可以使用 <code>SVD</code> 近似的分解成：</p>
<p><span class="math display">\[W \approx U\Sigma _{t}V^{T}\]</span></p>
<p>这样分解之后，<code>U</code> 是个 <code>u × t</code> 的矩阵，<span class="math inline">\(\Sigma_{t}\)</span> 是个 <code>t × t</code> 的对角阵，<code>V</code> 是个 <code>v × t</code> 的矩阵。当 <code>t</code> 远小于 <code>min(u,v)</code> 的时候，参数量就可以从 <code>uv</code> 缩减到 <code>t(u+v)</code>。同时计算量也大大减少了。</p>
<h3 id="个人总结">7）个人总结</h3>
<p><code>Fast R-CNN</code> 中，将目标检测的任务集成为一个清晰的框架，极大的简化了目标检测的训练过程，同时在速度和精度上均得到的很好的保证。其思想影响了之后的各种改进版本的目标检测算法。真的十分值得仔细的阅读。</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>C++ 并发队列的原理简介与开源库concurrentqueue安利</title>
    <url>/2018/04/30/cpp-concurrent/</url>
    <content><![CDATA[<blockquote>
<p>由于最近在做一个项目，但是框架本身有个不合理的设计。其中的代码是单线程的，数据的读取和计算都在一个线程里面完成。也就是说，我们的程序有很大的一部分时间在读取文件数据，导致最终的运行速度很慢。这里就可以使用多线程来优化。</p>
<p>这里需要使用最基本的<strong>生产者消费者模式</strong>。使用若干个线程作为生产者，负责数据的读取和预处理，这部分任务是IO密集型的，也就是不太占CPU，但是比较占带宽，而且有延时。在处理完数据之后，将数据放到一个队列中。</p>
<p>同时，使用若干个线程充当消费者，从这个队列里面获取数据，然后进行计算。计算的部分是CPU密集型的（其实我这里计算是GPU做的，就只有一个消费者），计算完成之后输出结果。</p>
<p>那么贯穿这一整套方案的，就是我们的队列。</p>
<p>在并发任务中，通常都需要一个队列机制，将并行的任务转化成串行的任务，或者将串行的任务提供给并行工作的线程。这个队列会同时被多个线程读写，因此也必须是线程安全的。</p>
</blockquote>
<span id="more"></span>
<h2 id="一线程安全的实现策略">一、线程安全的实现策略</h2>
<p>对于线程安全的队列的实现，似乎经常成为企业的面试题，常见的实现方法就是互斥量和条件变量，本质上就是锁的机制。同一时间只有一个线程具有读写的权限。锁的机制在并发量不大情况下，十分的清晰有效。在并发量较大的时候，会因为对锁的竞争而越发不高效。同时，锁本身也需要维护一定的资源，也需要消耗性能。</p>
<p>这时候，大家肯定会想问，不使用锁机制，还可以处理这种并发的情况吗？</p>
<p>答案是肯定的，首先我们知道锁主要有两种，悲观锁和乐观锁。</p>
<p>对于悲观锁，它永远会假定最糟糕的情况，就像我们上面说到的互斥机制，每次我们都假定会有其他的线程和我们竞争资源，因此必须要先拿到锁，之后才放心的进行我们的操作，这就使得争夺锁成为了我们每次操作的第一步。乐观锁则不同，乐观锁假定在很多情况下，资源都不需要竞争，因此可以直接进行读写，但是如果碰巧出现了多线程同时操控数据的情况，那么就多试几次，直到成功（也可以设置重试的次数）。</p>
<p>我们生活的时候，总会碰到很多的不顺心的事情，比如模型训练崩了，被某些库搞得头大，或者女票又生气了什么的，不妨学习一下乐观锁的精神，再训一次？再编译一次？大不了再哄一次。一次不行就两次。</p>
<p>回到乐观锁上，乐观锁中，每次读写都不考虑锁的存在，那么他是如何知道自己这次操作和其他线程是冲突的呢？这就是Lock-free队列的关键——原子操作。原子操作可以保证一次操作在执行的过程中不会被其他线程打断，因此在多线程程序中也不需要同步操作。在C++的STL中其实也提供了atomic这个库，可以保证多线程在操控同一个变量的时候，即使不加锁也能保证起最终结果的正确性。而我们乐观锁需要的一个原子操作就是CAS（Compare And Swap），绝大多数的CPU都支持这个操作。</p>
<p>CAS操作的定义如下(STL中的一个)：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">atomic_compare_exchange_weak</span> <span class="token punctuation">(</span>atomic<span class="token operator">*</span> obj<span class="token punctuation">,</span> T<span class="token operator">*</span> expected<span class="token punctuation">,</span> T val<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>首先函数会将 <code>obj</code> 与 <code>expected</code> 的内容作比较：</p>
<ol type="1">
<li>如果相等，那么将交换 <code>obj</code> 和 <code>val</code> 的值，并返回 <code>true</code>。</li>
<li>如果不相等，则什么也不做，之后返回 <code>false</code>。</li>
</ol>
<p>那么使用这个奇怪的操作，为什么就可以实现乐观锁了呢？这里我们看一个例子。这也是我学习的时候看的例子。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">list</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span>node<span class="token operator">*</span><span class="token operator">></span> head<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">append</span><span class="token punctuation">(</span>list<span class="token operator">*</span> s<span class="token punctuation">,</span> node<span class="token operator">*</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    node<span class="token operator">*</span> head<span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
        head <span class="token operator">=</span> s<span class="token operator">-></span>head<span class="token punctuation">;</span>
        n<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>std<span class="token double-colon punctuation">::</span><span class="token function">atomic_compare_exchange_weak</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>s<span class="token operator">-></span>head<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>head<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// or while (!s->head.compare_exchange_weak(head, n));</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在我们向list中插入元素的时候，首先获取到当前的头指针的值head，然后我们在写数据的时候，首先和此刻的头指针值作对比，如果相同，那么就把新的节点插入。如果不相同，说明有线程先我们一步成功了，那么我们就多尝试一次，直到写入成功。</p>
<p>以上就是使用CAS操作实现的乐观锁。上面的这个append就是最简单的Lock-free且线程安全的操作。</p>
<h2 id="二concurrentqueue">二、concurrentqueue</h2>
<p>最近在做这个项目的时候，就被安利了一个header only的C++并发队列库 <a href="https://github.com/cameron314/concurrentqueue">concurrentqueue</a>。本着不重复造轮子的原则，我在项目中用了这个库，由于它只是两个头文件，特别方便的就加入到了项目中。关于这个库的特点，项目的github上写了很多。这里直接照搬下来，不做解释。</p>
<blockquote>
<ul>
<li>Knock-your-socks-off <a href="http://moodycamel.com/blog/2014/a-fast-general-purpose-lock-free-queue-for-c++#benchmarks">blazing fast performance</a>.</li>
<li>Single-header implementation. Just drop it in your project.</li>
<li>Fully thread-safe lock-free queue. Use concurrently from any number of threads.</li>
<li>C++11 implementation -- elements are moved (instead of copied) where possible.</li>
<li>Templated, obviating the need to deal exclusively with pointers -- memory is managed for you.</li>
<li>No artificial limitations on element types or maximum count.</li>
<li>Memory can be allocated once up-front, or dynamically as needed.</li>
<li>Fully portable (no assembly; all is done through standard C++11 primitives).</li>
<li>Supports super-fast bulk operations.</li>
<li>Includes a low-overhead blocking version (BlockingConcurrentQueue).</li>
<li>Exception safe.</li>
</ul>
</blockquote>
<p>我体验了一下，感觉最舒服的有以下几点：</p>
<ol type="1">
<li>这个库确实可以很好的实现线程安全队列，而且速度很快。接口也比较简单。很容易上手。</li>
<li>整个库就是两个头文件，而且没有其他的依赖，使用C++11实现，兼容各大平台，很容易融入项目。</li>
<li>这个并发队列支持阻塞和非阻塞两种。(只在获取元素的时候可以阻塞)</li>
</ol>
<p>因为这个队列的用法十分简单，这里就直接贴上官网的介绍，然后针对一些细节，补充说明一下，下面是<strong>非阻塞队列</strong>的常用接口：</p>
<blockquote>
<ul>
<li><code>ConcurrentQueue(size_t initialSizeEstimate)</code> Constructor which optionally accepts an estimate of the number of elements the queue will hold</li>
<li><code>enqueue(T&amp;&amp; item)</code> Enqueues one item, allocating extra space if necessary</li>
<li><code>try_enqueue(T&amp;&amp; item)</code> Enqueues one item, but only if enough memory is already allocated</li>
<li><code>try_dequeue(T&amp; item)</code> Dequeues one item, returning true if an item was found or false if the queue appeared empty</li>
</ul>
</blockquote>
<ul>
<li><code>ConcurrentQueue(size_t initialSizeEstimate)</code> 这个没什么好说的，一个构造函数，可以指定队列的容量。</li>
<li><code>enqueue(T&amp;&amp; item)</code> 入队操作。比较有意思的是，如果我们的队列已经满了的话，那么这个还是会把数据放到队列里，使得队列的容量变大。所以，如果希望队列的长度不变的话，尽量还是不要使用这个函数。</li>
<li><code>try_enqueue(T&amp;&amp; item)</code> 这个也是入队操作，与上一个不同，这个函数当队列已经满了的时候，并不会进行入队操作，而是返回一个bool类型的值，表示是否入队成功。我在使用的时候，会判断这个bool值，如果是false，就让线程等待10ms之后重试。</li>
<li><code>try_dequeue(T&amp; item)</code> 这个是出队操作，如果队列有值的话，则得到数据（放到参数item里面）。他也会返回一个bool类型的值，表示时候出队成功。</li>
</ul>
<p>在<strong>阻塞版本的队列</strong>中，主要多了如下两个函数： <code>wait_dequeue(T&amp;&amp; item)</code>和 <code>wait_dequeue_timed(T&amp;&amp; item, std::int64_t timeout_usecs)</code>。这两个函数的功能类似，都是进行出队操作，如果队列为空，则等待。唯一的区别是，前者永久等待，而后者可以指定等待的时间，如果超时，则会停止等待并返回false。</p>
<p>最后是块操作，两种模式的队列都支持批量插入的操作。这里，我没有用过这些接口，所以大家自行看文档就好。 完整的API：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Allocates more memory <span class="token keyword">if</span> necessary</span></span>
<span class="token function">enqueue</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">bool</span>
<span class="token function">enqueue</span><span class="token punctuation">(</span>prod_token<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">bool</span>
<span class="token function">enqueue_bulk</span><span class="token punctuation">(</span>item_first<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">bool</span>
<span class="token function">enqueue_bulk</span><span class="token punctuation">(</span>prod_token<span class="token punctuation">,</span> item_first<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">bool</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Fails <span class="token keyword">if</span> <span class="token operator">not</span> enough memory to enqueue</span></span>
<span class="token function">try_enqueue</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">bool</span>
<span class="token function">try_enqueue</span><span class="token punctuation">(</span>prod_token<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">bool</span>
<span class="token function">try_enqueue_bulk</span><span class="token punctuation">(</span>item_first<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">bool</span>
<span class="token function">try_enqueue_bulk</span><span class="token punctuation">(</span>prod_token<span class="token punctuation">,</span> item_first<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">bool</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Attempts to dequeue from the <span class="token function">queue</span> <span class="token punctuation">(</span>never allocates<span class="token punctuation">)</span></span></span>
<span class="token function">try_dequeue</span><span class="token punctuation">(</span>item<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">bool</span>
<span class="token function">try_dequeue</span><span class="token punctuation">(</span>cons_token<span class="token punctuation">,</span> item<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">bool</span>
<span class="token function">try_dequeue_bulk</span><span class="token punctuation">(</span>item_first<span class="token punctuation">,</span> max<span class="token punctuation">)</span> <span class="token operator">:</span> size_t
<span class="token function">try_dequeue_bulk</span><span class="token punctuation">(</span>cons_token<span class="token punctuation">,</span> item_first<span class="token punctuation">,</span> max<span class="token punctuation">)</span> <span class="token operator">:</span> size_t

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">If you happen to know which producer you want to dequeue from</span></span>
<span class="token function">try_dequeue_from_producer</span><span class="token punctuation">(</span>prod_token<span class="token punctuation">,</span> item<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">bool</span>
<span class="token function">try_dequeue_bulk_from_producer</span><span class="token punctuation">(</span>prod_token<span class="token punctuation">,</span> item_first<span class="token punctuation">,</span> max<span class="token punctuation">)</span> <span class="token operator">:</span> size_t

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">A <span class="token operator">not</span><span class="token operator">-</span>necessarily<span class="token operator">-</span>accurate count of the total number of elements</span></span>
<span class="token function">size_approx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> size_t<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>基于Caffe的DeepID2实现（上）</title>
    <url>/2016/07/13/deepid2-1/</url>
    <content><![CDATA[<blockquote>
<p>小喵的唠叨话：小喵最近在做人脸识别的工作，打算将汤晓鸥前辈的DeepID，DeepID2等算法进行实验和复现。DeepID的方法最简单，而DeepID2的实现却略微复杂，并且互联网上也没有比较好的资源。因此小喵在试验之后，确定了实验结果的正确性之后，才准备写这篇博客，分享给热爱Deep Learning的小伙伴们。</p>
</blockquote>
<p>能够看到这篇博客的小伙伴们，相信已经对Deep Learning有了比较深入的了解。因此，小喵对亲作了如下的假定：</p>
<ol type="1">
<li>了解Deep Learning的基本知识</li>
<li>目前在做人脸识别的相关工作</li>
<li>仔细阅读过DeepID和DeepID2的论文</li>
<li>使用Caffe作为训练框架</li>
<li>即使不满足上述4个条件，也会持之以恒的学习</li>
</ol>
<span id="more"></span>
<p>如果亲发现对上述的条件都不满足的话，那么这篇博文可能内容还是略显枯涩乏味，你可以从了解Caffe开始，慢慢学习。</p>
<p>相关资源：</p>
<ul>
<li>DeepID：<a href="http://mmlab.ie.cuhk.edu.hk/pdf/YiSun_CVPR14.pdf">http://mmlab.ie.cuhk.edu.hk/pdf/YiSun_CVPR14.pdf</a></li>
<li>DeepID2：<a href="http://papers.nips.cc/paper/5416-analog-memories-in-a-balanced-rate-based-network-of-e-i-neurons">http://papers.nips.cc/paper/5416-analog-memories-in-a-balanced-rate-based-network-of-e-i-neurons</a></li>
<li>Caffe：<a href="http://caffe.berkeleyvision.org/">http://caffe.berkeleyvision.org/</a></li>
</ul>
<p>由于篇幅较大，这里会分成几个部分，依次讲解。</p>
<h2 id="一设计我们独特的data层">一、设计我们独特的Data层</h2>
<p>在DeepID2中，有两种监督信号。一是<strong>Identity signal</strong>，这和DeepID中的实现方法一样，用给定label的人脸数据，进行分类的训练，这里使用 <code>softmax_with_loss</code> 层来实现(<code>softmax + cross-entropy loss</code>)。这里不再介绍。另一种就是<strong>verification signal</strong>，也就是人脸比对的监督。这里要求，输入的数据时成对存在，每一对都有一个公共的label，是否是同一个类别。如果是同一个identity，则要求他们的特征更接近，如果是不同的identity，则要求他们的特征尽可能远离。</p>
<p>不论最终怎么实现，我们的第一步是确定的，构造合适的数据。</p>
<p>使用Caffe训练的时候，第一步是打Batch，将训练数据写入LMDB或者LevelDB数据库中，训练的时候Caffe会从数据库中读取图片，因此一个简单的实现方法就是构造许多的pair，然后打Batch的时候就能保证每对图片都是相连的，然后在训练的时候做一些小Trick就可以实现。</p>
<p>但是就如上面所说，打Batch的同时，图片的顺序就已经是确定的了，因此网络输入的图片pair也是固定的，这样似乎就缺乏了一些灵活性。</p>
<p>那么如何动态的构造我们的训练数据呢？</p>
<p><strong>设计我们独特的data层。</strong></p>
<p>这里为了方便，使用Python来拓展Caffe的功能。Python是一门简洁的语言，非常适合做这种工作。不过Caffe中如果使用了Python的层，那么就不能使用多GPU了，这点需要注意（希望以后能增加这个支持）。</p>
<h3 id="让你的caffe支持python拓展">1）让你的Caffe支持Python拓展</h3>
<p>在Caffe根目录的Makefile.config中，有这么一句话。</p>
<p><img src="caffe_with_python_layer.png" alt="with_python_layer" /></p>
<p>我们需要使用Python层，因此需要取消这个注释。之后Make一下你的Caffe和pycaffe。这样Caffe就支持Python层了。</p>
<h3 id="编写data层">2）编写data层</h3>
<p>基于Python的data层的编写，Caffe是给了一个简单的例子的，在<code>/caffe_home/examples/pycaffe/layers/</code>中。我们简单的照着这个例子来写。</p>
<p>首先，我们定义自己需要的参数。这里，我们需要：</p>
<ol type="1">
<li>batch_size: batch的大小，没什么好解释的，要求这个数是大于0的偶数</li>
<li>mean_file：图像的均值文件的路径</li>
<li>scale：图像减均值后变换的尺度</li>
<li>image_root_dir：训练数据的根目录</li>
<li>source：训练数据的list路径</li>
<li>crop_size：图像crop的大小</li>
<li>ratio：正样本所占的比例（0~1）</li>
</ol>
<p>caffe在train.prototxt中定义网络结构的时候，可以传入这些参数。我们目前只需要知道，这些参数一定可以获取到，就可以了。另外，source表示训练数据的list的文件地址，这里用到的训练数据的格式和Caffe打batch的数据一样。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">file_path1 label1
file_path2 label2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这样的格式。</p>
<p>Data层的具体实现，首先需要继承caffe.Layer这个类，之后实现setup, forward, backward和reshape，不过data层并不需要backward和reshape。setup主要是为了初始化各种参数，并且设置top的大小。对于Data层来说，forward则是生成数据和label。</p>
<p>闲话少说，代码来见。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#-*- encoding: utf-8 -*-</span>

<span class="token keyword">import</span> sys
<span class="token keyword">import</span> caffe
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> os
<span class="token keyword">import</span> os<span class="token punctuation">.</span>path <span class="token keyword">as</span> osp
<span class="token keyword">import</span> random
<span class="token keyword">import</span> cv2

<span class="token keyword">class</span> <span class="token class-name">id2_data_layer</span><span class="token punctuation">(</span>caffe<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    这个python的data layer用于动态的构造训练deepID2的数据
    每次forward会产生多对数据，每对数据可能是相同的label或者不同的label
    """</span>
    <span class="token keyword">def</span> <span class="token function">setup</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>top_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span>

        <span class="token comment"># 读取输入的参数</span>
        params <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>param_str<span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token string">"init data layer"</span>
        <span class="token keyword">print</span> params

        self<span class="token punctuation">.</span>batch_size <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token string">'batch_size'</span><span class="token punctuation">]</span>  <span class="token comment"># batch_size</span>
        self<span class="token punctuation">.</span>ratio <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token string">'ratio'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>scale <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token string">'scale'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>batch_size <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>batch_size <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"batch size must be 2X"</span>
        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>ratio <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>ratio <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ratio must be in (0, 1)"</span>
        self<span class="token punctuation">.</span>image_root_dir <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token string">'image_root_dir'</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>mean_file <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token string">'mean_file'</span><span class="token punctuation">]</span>       
        self<span class="token punctuation">.</span>source <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>crop_size <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token string">'crop_size'</span><span class="token punctuation">]</span>

        top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>self<span class="token punctuation">.</span>batch_size<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'crop_size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'crop_size'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        top<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>self<span class="token punctuation">.</span>batch_size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>batch_loader <span class="token operator">=</span> BatchLoader<span class="token punctuation">(</span>self<span class="token punctuation">.</span>image_root_dir<span class="token punctuation">,</span> self<span class="token punctuation">.</span>mean_file<span class="token punctuation">,</span> self<span class="token punctuation">.</span>scale<span class="token punctuation">,</span> self<span class="token punctuation">.</span>source<span class="token punctuation">,</span> self<span class="token punctuation">.</span>batch_size<span class="token punctuation">,</span> self<span class="token punctuation">.</span>ratio<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">:</span>
        blob<span class="token punctuation">,</span> label_list <span class="token operator">=</span> self<span class="token punctuation">.</span>batch_loader<span class="token punctuation">.</span>get_mini_batch<span class="token punctuation">(</span><span class="token punctuation">)</span>
        top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token operator">=</span> blob
        top<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token operator">=</span> label_list

    <span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token keyword">def</span> <span class="token function">reshape</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

<span class="token keyword">class</span> <span class="token class-name">BatchLoader</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root_dir<span class="token punctuation">,</span> mean_file<span class="token punctuation">,</span> scale<span class="token punctuation">,</span> image_list_path<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> ratio<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">"init batch loader"</span>
        self<span class="token punctuation">.</span>batch_size <span class="token operator">=</span> batch_size
        self<span class="token punctuation">.</span>ratio <span class="token operator">=</span> ratio <span class="token comment"># true pair / false pair</span>
        self<span class="token punctuation">.</span>image2label <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token comment"># key:image_name    value:label</span>
        self<span class="token punctuation">.</span>label2images <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment"># key:label         value: image_name array</span>
        self<span class="token punctuation">.</span>images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># store all image_name</span>
        self<span class="token punctuation">.</span>mean <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>mean_file<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>scale <span class="token operator">=</span> scale
        self<span class="token punctuation">.</span>root_dir <span class="token operator">=</span> root_dir
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>image_list_path<span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>
            <span class="token keyword">for</span> line <span class="token keyword">in</span> fp<span class="token punctuation">:</span>
                data <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
                image_name <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
                label <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
                self<span class="token punctuation">.</span>images<span class="token punctuation">.</span>append<span class="token punctuation">(</span>image_name<span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>image2label<span class="token punctuation">[</span>image_name<span class="token punctuation">]</span> <span class="token operator">=</span> label
                <span class="token keyword">if</span> label <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>label2images<span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>label2images<span class="token punctuation">[</span>label<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                self<span class="token punctuation">.</span>label2images<span class="token punctuation">[</span>label<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>image_name<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>labels <span class="token operator">=</span> self<span class="token punctuation">.</span>label2images<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>label_num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>labels<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>image_num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>image2label<span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token string">"init batch loader over"</span>

    <span class="token keyword">def</span> <span class="token function">get_mini_batch</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        image_list<span class="token punctuation">,</span> label_list <span class="token operator">=</span> self<span class="token punctuation">.</span>_get_batch<span class="token punctuation">(</span>self<span class="token punctuation">.</span>batch_size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
        cv_image_list <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> image_name<span class="token punctuation">:</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>scale <span class="token operator">*</span> <span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root_dir<span class="token punctuation">,</span> image_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> copy<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>mean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> image_list<span class="token punctuation">)</span>
        blob <span class="token operator">=</span> np<span class="token punctuation">.</span>require<span class="token punctuation">(</span>cv_image_list<span class="token punctuation">)</span>
        label_blob <span class="token operator">=</span> np<span class="token punctuation">.</span>require<span class="token punctuation">(</span>label_list<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>batch_size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> blob<span class="token punctuation">,</span> label_blob
    
    <span class="token keyword">def</span> <span class="token function">_get_batch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pair_num<span class="token punctuation">)</span><span class="token punctuation">:</span>
        image_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        label_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> pair_idx <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span>pair_num<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>ratio<span class="token punctuation">:</span> <span class="token comment"># true pair</span>
                <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
                    label_idx <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>label_num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
                    label <span class="token operator">=</span> self<span class="token punctuation">.</span>labels<span class="token punctuation">[</span>label_idx<span class="token punctuation">]</span>
                    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>label2images<span class="token punctuation">[</span>label<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">:</span>
                        <span class="token keyword">break</span>
                first_idx <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>label2images<span class="token punctuation">[</span>label<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
                second_id <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>label2images<span class="token punctuation">[</span>label<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> second_id <span class="token operator">>=</span> first_idx<span class="token punctuation">:</span>
                    second_id <span class="token operator">+=</span> <span class="token number">1</span>
                image_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>label2images<span class="token punctuation">[</span>label<span class="token punctuation">]</span><span class="token punctuation">[</span>first_idx<span class="token punctuation">]</span><span class="token punctuation">)</span>
                image_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>label2images<span class="token punctuation">[</span>label<span class="token punctuation">]</span><span class="token punctuation">[</span>second_id<span class="token punctuation">]</span><span class="token punctuation">)</span>
                label_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">)</span>
                label_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>                   <span class="token comment"># false pair</span>
                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    image_id <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>image_num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
                    image_name <span class="token operator">=</span> self<span class="token punctuation">.</span>images<span class="token punctuation">[</span>image_id<span class="token punctuation">]</span>
                    label <span class="token operator">=</span> self<span class="token punctuation">.</span>image2label<span class="token punctuation">[</span>image_name<span class="token punctuation">]</span>
                    image_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>image_name<span class="token punctuation">)</span>
                    label_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> image_list<span class="token punctuation">,</span> label_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述的代码可以根据给定的list，batch size，ratio等参数生成符合要求的data和label。这里还有一些问题需要注意：</p>
<ol type="1">
<li>对输入的参数没有检验。</li>
<li>没有对读取图像等操作做异常处理。因此如果很不幸地读到的图片路径不合法，那么程序突然死掉都是有可能的。。。小喵的数据都是可以读的，所以木有问题。</li>
<li>在选取正负样本对的时候，对于正样本对，只有样本对应的label中的图片数大于5的时候，才选正样本（小喵的训练数据每个人都有至少几十张图片，所以木有出现问题），如果样本比较少的话，可以更改这个数（特别是有测试集的时候，测试集通常数目都很少，小喵训练的时候都是不用测试集的，因为会死循环。。。）。对于选取负样本对的时候，只是随便选了两张图片，而并没有真的保证这一对是不同label，这里考虑到训练数据是比较多的，所以不大可能选中同一个label的样本，因此可以近似代替负样本对。</li>
<li>这里有个减均值的操作，这个均值文件是经过特殊转换求出的numpy的数组。Caffe生成的均值文件是不能直接用的，但是可以通过仿照Caffe中Classifier中的写法来代替（caffe.io.Transformer工具）。另外这里的图片数据和均值文件是一样大小的，但实际上可能并不一定相等。如果需要对输入图片做各种随机化的操作，还需要自己修改代码。</li>
</ol>
<p>至此，我们就完成了一个简单的Data层了。</p>
<p>那么怎么调用自己的data层呢？</p>
<p>这里有一个十分简单的写法。在我们用来训练的prototxt中，将Data层的定义改成如下的方式：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">layer &#123;
    name: "data"
    type: "Python"
    top: "data"
    top: "label"
    include &#123;
        phase: TRAIN
    &#125;    
    python_param &#123;
        module: "id2_data_layer"
        layer: "id2_data_layer"
        param_str: "&#123;'crop_size' : 128, 'batch_size' : 96, 'mean_file': '/your/data/root/mean.npy', 'scale': 0.0078125, 'source': '/path/to/your/train_list', 'image_root_dir': '/path/to/your/image_root/'&#125;"    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>python_param中的这三个参数需要注意：</p>
<p><code>module</code>：模块名，我们先前编写的data层，本身就是一个文件，也就是一个模块，因此模块名就是文件名。</p>
<p><code>layer</code>：层的名字，我们在文件中定义的类的名字。这里比较巧合，module和layer的名字相同。</p>
<p><code>param_str</code>：所有的需要传给data层的参数都通过这个参数来传递。这里简单的使用了Python字典的格式的字符串，在data层中使用eval来执行（o(╯□╰)o  这其实并不是一个好习惯），从而获取参数，当然也可以使用别的方式来传递，比如json或者xml等。</p>
<p>最后，你在训练的时候可能会报错，说找不到你刚刚的层，或者找不到caffe，只需要把这个层的代码所在的文件夹的路径加入到PYTHONPATH中即可。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">PYTHONPATH</span><span class="token operator">=</span>PYTHONPATH:/path/to/your/layer/:/path/to/caffe/python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样就完成了我们的Data层的编写，是不是非常简单？</p>
<div style="background-color: #ddd; padding: 20px">
<p>重要更新：<br/> 1，小喵最近发现直接在image_data_layer.cpp中进行修改，可以更好的实现这个目标，而且支持多GPU。<br/> 2，训练的数据可以只用正样本对，因为identity signal已经十分强调不同identity的feature之间的距离，因此verification signal只需要强调相同的identity的feature相近就好。<br/> 3，小喵新的训练数据，构造pair的方式也做了修改。每次使用所有的数据构造pair，然后用来训练，每个epoch后都重新生成一次list。这样可以保证identity signal能够每次训练所有的图片，而verification signal也能每次训练不同的样本对。</p>
</div>
<p><strong>转载</strong>请注明出处~</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>基于Caffe的DeepID2实现（中）</title>
    <url>/2016/07/15/deepid2-2/</url>
    <content><![CDATA[<blockquote>
<p>小喵的唠叨话：我们在上一篇博客里面，介绍了Caffe的Data层的编写。有了Data层，下一步则是如何去使用生成好的训练数据。也就是这一篇的内容。  </p>
</blockquote>
<span id="more"></span>
<h2 id="二精髓deepid2-loss层">二、精髓，DeepID2 Loss层</h2>
<p>DeepID2这篇论文关于verification signal的部分，给出了一个用于监督verification的loss。</p>
<p><img src="verification_loss.jpg" alt="verification_loss" /></p>
<p>其中，<span class="math inline">\(f_i\)</span> 和 <span class="math inline">\(f_j\)</span> 是归一化之后的特征。</p>
<p>当 <span class="math inline">\(f_i\)</span> 和<span class="math inline">\(f_j\)</span> 属于同一个identity的时候，也就是 <span class="math inline">\(y_{ij}=1\)</span> 时，loss是二者的L2距离，约束使得特征更为相近。</p>
<p>当 <span class="math inline">\(f_i\)</span> 和 <span class="math inline">\(f_j\)</span> 不属于同一个identity的时候，即 <span class="math inline">\(y_{ij}=-1\)</span> ，这时的loss表示什么呢？参数m又表示什么？</p>
<p>m在这里是margin的意思，是一个可以自行设置的参数，表示期望的不同identity的feature之间的距离。当两个feature的大于margin时，说明网络已经可以很好的区分这两个特征，因此这是loss为0，当feature间的距离小于margin时，loss则为<span class="math inline">\((m-|f_i - f_j|)^2\)</span>，表示还需要两个特征能够更好的区分。因此这个loss函数比较好的反应了我们的需求，也就是DeepID2的算法思想。</p>
<p>这个Loss层实现起来似乎并不麻烦，前馈十分的简单。至于后馈，求导也非常简单。但是Caffe加入新层，需要在caffe.proto文件中，做一些修改，这也是最困扰小喵的地方。</p>
<p>不过有个好消息就是：Caffe官网增加了ContrastiveLossLayer这个层！和我们的需要是一样的。因此我们不需要自己实现这个层。</p>
<p>喜大普奔之余，小喵也专门看了Caffe的文档，以及这里提到了siamese network，发现这个网络使用ContrastiveLossLayer的方式比较独特，Caffe项目中的examples中有例子，感兴趣可以看看。</p>
<p>ContrastiveLossLayer的输入，也就是bottom有三部分，feature1、feature2、label，feature1和feature2是分别对应的两组feature，而label则表示该对feature是否是属于同一个identity，是的话，则为1，不是则为0。而且该层还提供一个参数margin，也就是论文的公式里面的m。</p>
<p>最终的结论就是，虽然我们不需要自己写Loss层，但是还是必须增加一些额外的层。</p>
<p>主要有2个，用于将特征归一化的NormalizationLayer以及用于将feature层转换成ContrastiveLossLayer的输入的层，不妨命名为ID2SliceLayer。</p>
<h2 id="三小问题大智慧之normalization-layer">三、小问题，大智慧之Normalization Layer</h2>
<p>这个归一化的层用于将输入的feature map进行归一化。Caffe官网并没有提供相关的层，因此我们必须自己实现（或者从网上找），这里我们还是选择自己来实现，顺便学习一下Caffe加层的技巧。</p>
<p>Normalization层的前馈非常的简单，输入为一个向量x，输出为归一化之后的向量：</p>
<p><span class="math display">\[f(\vec x)=\frac{\vec x}{\left\| \vec x \right \|}\]</span></p>
<p>至于后馈，需要求导，计算稍微有点复杂，小喵在推导4遍之后才给出如下表达式：</p>
<p><span class="math display">\[\frac{\partial \vec f}{\partial \vec x}=-\frac{1}{\left\| \vec x \right\|}*{\vec x}*{\vec x^T}+\frac{1}{\left\| \vec x \right\|}\]</span></p>
<p>其中x为输入的特征向量，为列向量。这里是将整个feature map看做一个列向量。</p>
<p>知道了前馈后馈的计算规则，那么很容易编写自己的层了，这里小喵建议大家找个Caffe已经有了的内容相近的层，照着改写。比如这个Normalization层，没有任何层的参数，所以照着ReLU类似的层就很好编写。</p>
<p>之后就祭出我们的code：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// create by miao</span>
<span class="token comment">// 主要实现了feature的归一化</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">CAFFE_NORMALIZATION_LAYER_HPP_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CAFFE_NORMALIZATION_LAYER_HPP_</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/blob.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/layer.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/proto/caffe.pb.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/layers/neuron_layer.hpp"</span></span>

<span class="token keyword">namespace</span> caffe <span class="token punctuation">&#123;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">NormalizationLayer</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">NeuronLayer</span><span class="token operator">&lt;</span><span class="token class-name">Dtype</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">explicit</span> <span class="token function">NormalizationLayer</span><span class="token punctuation">(</span><span class="token keyword">const</span> LayerParameter<span class="token operator">&amp;</span> param<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token generic-function"><span class="token function">NeuronLayer</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">LayerSetUp</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">inline</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">"Normalization"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">ExactNumBottomBlobs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">ExactNumTopBlobs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  
 <span class="token keyword">protected</span><span class="token operator">:</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Forward_cpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Forward_gpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Backward_cpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> propagate_down<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Backward_gpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> propagate_down<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span> norm_val_<span class="token punctuation">;</span> <span class="token comment">// 记录每个feature的模</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>  <span class="token comment">// namespace caffe</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// CAFFE_NORMALIZATION_LAYER_HPP_</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个层的头文件异常的简单，和ReLU的仅有的区别就是类的名字不一样，而且多了个成员变量norm_val_，用来记录每个feature的模值。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// create by miao</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/layers/normalization_layer.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/util/math_functions.hpp"</span></span>

<span class="token keyword">namespace</span> caffe <span class="token punctuation">&#123;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">NormalizationLayer</span><span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">LayerSetUp</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
        <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">NeuronLayer</span><span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">LayerSetUp</span><span class="token punctuation">(</span>bottom<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CHECK_NE</span><span class="token punctuation">(</span>top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" Layer does not "</span>
        <span class="token string">"allow in-place computation."</span><span class="token punctuation">;</span>
    norm_val_<span class="token punctuation">.</span><span class="token function">Reshape</span><span class="token punctuation">(</span>bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 申请norm的内存</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span> 
<span class="token keyword">void</span> <span class="token class-name">NormalizationLayer</span><span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Forward_cpu</span><span class="token punctuation">(</span>
    <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    Dtype <span class="token operator">*</span>norm_val_cpu_data <span class="token operator">=</span> norm_val_<span class="token punctuation">.</span><span class="token function">mutable_cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 计算每个c * h * w的区域的模</span>
        norm_val_cpu_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>
                    <span class="token generic-function"><span class="token function">caffe_cpu_dot</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>
                        bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                        bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">offset</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> 
                        bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">offset</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
                        <span class="token punctuation">)</span>
                    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将每个bottom归一化，输出到top</span>
        <span class="token generic-function"><span class="token function">caffe_cpu_scale</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>
                top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                <span class="token number">1.</span> <span class="token operator">/</span> norm_val_cpu_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> 
                bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">offset</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> 
                top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">mutable_cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">offset</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">NormalizationLayer</span><span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Backward_cpu</span><span class="token punctuation">(</span>
    <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> propagate_down<span class="token punctuation">,</span>
    <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    
    <span class="token keyword">const</span> Dtype <span class="token operator">*</span>norm_val_cpu_data <span class="token operator">=</span> norm_val_<span class="token punctuation">.</span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> Dtype <span class="token operator">*</span>top_diff <span class="token operator">=</span> top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">cpu_diff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Dtype <span class="token operator">*</span>bottom_diff <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">mutable_cpu_diff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> Dtype <span class="token operator">*</span>bottom_data <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">caffe_copy</span><span class="token punctuation">(</span>top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> top_diff<span class="token punctuation">,</span> bottom_diff<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        Dtype a <span class="token operator">=</span> <span class="token operator">-</span> <span class="token number">1.</span><span class="token operator">/</span><span class="token punctuation">(</span>norm_val_cpu_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> norm_val_cpu_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> norm_val_cpu_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token generic-function"><span class="token function">caffe_cpu_dot</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>
                top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                top_diff <span class="token operator">+</span> top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">offset</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>
                bottom_data <span class="token operator">+</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">offset</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
        Dtype b <span class="token operator">=</span> <span class="token number">1.</span> <span class="token operator">/</span> norm_val_cpu_data<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token generic-function"><span class="token function">caffe_cpu_axpby</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>
                top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                a<span class="token punctuation">,</span>
                bottom_data <span class="token operator">+</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">offset</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>
                b<span class="token punctuation">,</span>
                bottom_diff <span class="token operator">+</span> top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">offset</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CPU_ONLY</span></span>
<span class="token function">STUB_GPU</span><span class="token punctuation">(</span>NormalizationLayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token function">INSTANTIATE_CLASS</span><span class="token punctuation">(</span>NormalizationLayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">REGISTER_LAYER_CLASS</span><span class="token punctuation">(</span>Normalization<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span> <span class="token comment">// namespace caffe</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后就是GPU部分的代码，如果不在乎性能的话，直接在CUDA的前后馈里面调用CPU版的前后馈就行。当然如果了解CUDA的话，完全可以写一份GPU版的代码。小喵这里就偷懒了一下。。。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// create by miao</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/layers/normalization_layer.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/util/math_functions.hpp"</span></span>

<span class="token keyword">namespace</span> caffe <span class="token punctuation">&#123;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span> 
<span class="token keyword">void</span> <span class="token class-name">NormalizationLayer</span><span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Forward_gpu</span><span class="token punctuation">(</span>
    <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">Forward_cpu</span><span class="token punctuation">(</span>bottom<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>   

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">NormalizationLayer</span><span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Backward_gpu</span><span class="token punctuation">(</span>
    <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">,</span> 
    <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> propagate_down<span class="token punctuation">,</span>
    <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">Backward_cpu</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> propagate_down<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">INSTANTIATE_LAYER_GPU_FUNCS</span><span class="token punctuation">(</span>NormalizationLayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// namespace caffe</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样，我们就写完了Normalization层的所有代码。</p>
<p>对于比较老版本的Caffe，还需要修改/caffe_root/src/caffe/caffe.proto文件。而新版的Caffe只要在新增参数的情况下才需要修改。我们的这个Normalization层并没有用到新的参数，因此并不需要修改caffe.proto文件。</p>
<p>至于新版的Caffe为什么这么智能，原因其实就在这两行代码：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">INSTANTIATE_CLASS</span><span class="token punctuation">(</span>NormalizationLayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">REGISTER_LAYER_CLASS</span><span class="token punctuation">(</span>Normalization<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>宏INSTANTIATE_CLASS在/caffe_root/include/caffe/common.hpp中定义。</p>
<p>宏REGISTER_LAYER_CLASS在/caffe_root/include/caffe/layer_factory.hpp中定义。</p>
<p>感兴趣可以自行查阅。</p>
<div style="background-color: #ddd; padding: 20px">
<p>重要更新:</br> 小喵最近训练的时候实际上已经不使用Normalization层了，而是将Contrastive Loss直接接在feature层的后面，同时由于训练数据都是正样本对，那么margin就没有意义了。不过比较麻烦的是loss weight的选取。</p>
</div>
<p><strong>转载</strong>请注明出处~</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>基于Caffe的DeepID2实现（下）</title>
    <url>/2016/07/15/deepid2-3/</url>
    <content><![CDATA[<blockquote>
<p>小喵的唠叨话：这次的博客，真心累伤了小喵的心。但考虑到知识需要巩固和分享，小喵决定这次把剩下的内容都写完。</p>
</blockquote>
<span id="more"></span>
<h2 id="四数据的重整简单的划分">四、数据的重整，简单的划分</h2>
<p>前面的Data层用于生成成对的输入数据，Normalization层，用于将feature归一化，那么之后是不是就可以使用ContrastiveLoss层进行训练了呢？</p>
<p>且慢，还差一步。</p>
<p>ContrastiveLoss层要求有3个bottom：feature1、feature2以及表示对位的feature是否为同一个identity的label。</p>
<p>我们现在得到的feature却是所有的都在一起，data层直接得到的label也和这里要求的label不同。因此务必要对数据进行一次重整。</p>
<p>一个简单的规则就是按照奇偶，将feature划分成两部分。这样得到的两部分正好就是相同位置为一对。对于label的重整，也可以用类似的方法。小喵这里只对feature进行重整，而label的处理则是通过改ContrastiveLoss层来实现。</p>
<p>feature的重整本质上就是一个切片的操作，这里命名为id2_slice_layer，实现方法就是按照奇偶把bottom的数据复制到top。后馈的时候，也就是将两部分的feature的diff都直接复制到对应位置的bottom_diff中，具体实现如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// created by miao</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">CAFFE_ID2_SLICE_LAYER_HPP_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CAFFE_ID2_SLICE_LAYER_HPP_</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/blob.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/layer.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/proto/caffe.pb.h"</span></span>

<span class="token keyword">namespace</span> caffe <span class="token punctuation">&#123;</span>

<span class="token comment">/**
 * @brief Takes a Blob and slices it along either the num or channel dimension,
 *        outputting multiple sliced Blob results.
 *
 * TODO(dox): thorough documentation for Forward, Backward, and proto params.
 */</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">Id2SliceLayer</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Layer</span><span class="token operator">&lt;</span><span class="token class-name">Dtype</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">explicit</span> <span class="token function">Id2SliceLayer</span><span class="token punctuation">(</span><span class="token keyword">const</span> LayerParameter<span class="token operator">&amp;</span> param<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token generic-function"><span class="token function">Layer</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">LayerSetUp</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Reshape</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">virtual</span> <span class="token keyword">inline</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">"Id2Slice"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">ExactNumBottomBlobs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">MinTopBlobs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

 <span class="token keyword">protected</span><span class="token operator">:</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Forward_cpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Forward_gpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Backward_cpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> propagate_down<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Backward_gpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> propagate_down<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>  <span class="token comment">// namespace caffe</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// CAFFE_ID2_SLICE_LAYER_HPP_</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>头文件，巨简单。。。</p>
<p>Cpp的代码，也非常简单，要注意id2_slice层的top有两个，每个的形状都是bottom的一半。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// created by miao</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/layers/id2_slice_layer.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/util/math_functions.hpp"</span></span>

<span class="token keyword">namespace</span> caffe <span class="token punctuation">&#123;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">Id2SliceLayer</span><span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">LayerSetUp</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">Id2SliceLayer</span><span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Reshape</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> top_shape <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    top_shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">Reshape</span><span class="token punctuation">(</span>top_shape<span class="token punctuation">)</span><span class="token punctuation">;</span>
    top<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">Reshape</span><span class="token punctuation">(</span>top_shape<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">Id2SliceLayer</span><span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Forward_cpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> feature_size <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">caffe_copy</span><span class="token punctuation">(</span>
                feature_size<span class="token punctuation">,</span> 
                bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">*</span> feature_size<span class="token punctuation">,</span> 
                top<span class="token punctuation">[</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">mutable_cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> feature_size
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">Id2SliceLayer</span><span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Backward_cpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> propagate_down<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> feature_size <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">caffe_copy</span><span class="token punctuation">(</span>
                feature_size<span class="token punctuation">,</span>
                top<span class="token punctuation">[</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">cpu_diff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> feature_size<span class="token punctuation">,</span>
                bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">mutable_cpu_diff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">*</span> feature_size
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CPU_ONLY</span></span>
<span class="token function">STUB_GPU</span><span class="token punctuation">(</span>Id2SliceLayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token function">INSTANTIATE_CLASS</span><span class="token punctuation">(</span>Id2SliceLayer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">REGISTER_LAYER_CLASS</span><span class="token punctuation">(</span>Id2Slice<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>  <span class="token comment">// namespace caffe</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>GPU上的实现，为了简单起见，也是直接调用了CPU的前馈函数。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// created by miao</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/layers/id2_slice_layer.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/util/math_functions.hpp"</span></span>

<span class="token keyword">namespace</span> caffe <span class="token punctuation">&#123;</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">Id2SliceLayer</span><span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Forward_gpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">Forward_cpu</span><span class="token punctuation">(</span>bottom<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">Id2SliceLayer</span><span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Backward_gpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> propagate_down<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">Backward_cpu</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> propagate_down<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">INSTANTIATE_LAYER_GPU_FUNCS</span><span class="token punctuation">(</span>Id2SliceLayer<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>  <span class="token comment">// namespace caffe</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样就完成了feature的重整。由于没有用到新的参数，因此也不需要修改caffe.proto。</p>
<p>亲可以仿照这个方法对label来做类似的操作。鉴于小喵比较懒。。。这里就只是简单的改ContrastiveLoss层的代码了。</p>
<p>第一步，在ContrastiveLossLayer中新增一个用于记录feature pair是否是同一个identity的成员变量，取代原本的第三个bottom的功能。这样只需要在前馈的时候提前算好，就可以代替之前的第三个bottom来使用，而不需要再修改别的地方的代码。</p>
<p>为了大家使用的方便，小喵直接把修改之后的头文件粘贴出来（删掉注释）。新增的行，用“added by miao”这个注释标注出来。头文件只加了一行。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">CAFFE_CONTRASTIVE_LOSS_LAYER_HPP_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CAFFE_CONTRASTIVE_LOSS_LAYER_HPP_</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/blob.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/layer.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/proto/caffe.pb.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/layers/loss_layer.hpp"</span></span>

<span class="token keyword">namespace</span> caffe <span class="token punctuation">&#123;</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">ContrastiveLossLayer</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">LossLayer</span><span class="token operator">&lt;</span><span class="token class-name">Dtype</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token keyword">explicit</span> <span class="token function">ContrastiveLossLayer</span><span class="token punctuation">(</span><span class="token keyword">const</span> LayerParameter<span class="token operator">&amp;</span> param<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token generic-function"><span class="token function">LossLayer</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">diff_</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">LayerSetUp</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">virtual</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">ExactNumBottomBlobs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">inline</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">"ContrastiveLoss"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">AllowForceBackward</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> bottom_index<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> bottom_index <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
 <span class="token keyword">protected</span><span class="token operator">:</span>
  <span class="token comment">/// @copydoc ContrastiveLossLayer</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Forward_cpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Forward_gpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Backward_cpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> propagate_down<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Backward_gpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">,</span>
      <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> propagate_down<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>

  Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span> diff_<span class="token punctuation">;</span>  <span class="token comment">// cached for backward pass</span>
  Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span> dist_sq_<span class="token punctuation">;</span>  <span class="token comment">// cached for backward pass</span>
  Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span> diff_sq_<span class="token punctuation">;</span>  <span class="token comment">// tmp storage for gpu forward pass</span>
  Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span> summer_vec_<span class="token punctuation">;</span>  <span class="token comment">// tmp storage for gpu forward pass</span>
  Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span> is_same_<span class="token punctuation">;</span> <span class="token comment">// added by miao</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>  <span class="token comment">// namespace caffe</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">// CAFFE_CONTRASTIVE_LOSS_LAYER_HPP_</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>源文件的修改也十分简单，这里只贴出来Cuda的部分。源文件，修改了与原来的bottom3相关的地方。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/layers/contrastive_loss_layer.hpp"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"caffe/util/math_functions.hpp"</span></span>

<span class="token keyword">namespace</span> caffe <span class="token punctuation">&#123;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">ContrastiveLossLayer</span><span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Forward_gpu</span><span class="token punctuation">(</span>
    <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> count <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">caffe_gpu_sub</span><span class="token punctuation">(</span>
      count<span class="token punctuation">,</span>
      bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// a</span>
      bottom<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// b</span>
      diff_<span class="token punctuation">.</span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a_i-b_i</span>
  <span class="token function">caffe_gpu_powx</span><span class="token punctuation">(</span>
      count<span class="token punctuation">,</span>
      diff_<span class="token punctuation">.</span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// a_i-b_i</span>
      <span class="token function">Dtype</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      diff_sq_<span class="token punctuation">.</span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (a_i-b_i)^2</span>
  <span class="token function">caffe_gpu_gemv</span><span class="token punctuation">(</span>
      CblasNoTrans<span class="token punctuation">,</span>
      bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">channels</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">Dtype</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      diff_sq_<span class="token punctuation">.</span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// (a_i-b_i)^2</span>
      summer_vec_<span class="token punctuation">.</span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">Dtype</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      dist_sq_<span class="token punctuation">.</span><span class="token function">mutable_gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Sum (a_i-b_i)^2</span>
  Dtype margin <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>layer_param_<span class="token punctuation">.</span><span class="token function">contrastive_loss_param</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">bool</span> legacy_version <span class="token operator">=</span>
      <span class="token keyword">this</span><span class="token operator">-></span>layer_param_<span class="token punctuation">.</span><span class="token function">contrastive_loss_param</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">legacy_version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Dtype <span class="token function">loss</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// added by miao</span>
    is_same_<span class="token punctuation">.</span><span class="token function">mutable_cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>bottom<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">==</span> bottom<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>is_same_<span class="token punctuation">.</span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// similar pairs</span>
      loss <span class="token operator">+=</span> dist_sq_<span class="token punctuation">.</span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// dissimilar pairs</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>legacy_version<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        loss <span class="token operator">+=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>margin <span class="token operator">-</span> dist_sq_<span class="token punctuation">.</span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">Dtype</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        Dtype dist <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>margin <span class="token operator">-</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>dist_sq_<span class="token punctuation">.</span><span class="token function">cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                              <span class="token function">Dtype</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        loss <span class="token operator">+=</span> dist<span class="token operator">*</span>dist<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  loss <span class="token operator">=</span> loss <span class="token operator">/</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">Dtype</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">mutable_cpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> loss<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
__global__ <span class="token keyword">void</span> <span class="token function">CLLBackward</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> channels<span class="token punctuation">,</span>
    <span class="token keyword">const</span> Dtype margin<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">bool</span> legacy_version<span class="token punctuation">,</span> <span class="token keyword">const</span> Dtype alpha<span class="token punctuation">,</span>
    <span class="token keyword">const</span> Dtype<span class="token operator">*</span> y<span class="token punctuation">,</span> <span class="token keyword">const</span> Dtype<span class="token operator">*</span> diff<span class="token punctuation">,</span> <span class="token keyword">const</span> Dtype<span class="token operator">*</span> dist_sq<span class="token punctuation">,</span>
    Dtype <span class="token operator">*</span>bottom_diff<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">CUDA_KERNEL_LOOP</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> i <span class="token operator">/</span> channels<span class="token punctuation">;</span>  <span class="token comment">// the num index, to access y and dist_sq</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// similar pairs</span>
      bottom_diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> alpha <span class="token operator">*</span> diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// dissimilar pairs</span>
      Dtype <span class="token function">mdist</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      Dtype <span class="token function">beta</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>legacy_version<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        mdist <span class="token operator">=</span> <span class="token punctuation">(</span>margin <span class="token operator">-</span> dist_sq<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        beta <span class="token operator">=</span> <span class="token operator">-</span>alpha<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        Dtype dist <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>dist_sq<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mdist <span class="token operator">=</span> <span class="token punctuation">(</span>margin <span class="token operator">-</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>
        beta <span class="token operator">=</span> <span class="token operator">-</span>alpha <span class="token operator">*</span> mdist <span class="token operator">/</span> <span class="token punctuation">(</span>dist <span class="token operator">+</span> <span class="token function">Dtype</span><span class="token punctuation">(</span><span class="token number">1e-4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>mdist <span class="token operator">></span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        bottom_diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> beta<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        bottom_diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Dtype</span><span class="token operator">></span>
<span class="token keyword">void</span> <span class="token class-name">ContrastiveLossLayer</span><span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Backward_gpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> top<span class="token punctuation">,</span>
    <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> propagate_down<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>Blob<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>propagate_down<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> <span class="token keyword">int</span> count <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> <span class="token keyword">int</span> channels <span class="token operator">=</span> bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">channels</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      Dtype margin <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>layer_param_<span class="token punctuation">.</span><span class="token function">contrastive_loss_param</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> <span class="token keyword">bool</span> legacy_version <span class="token operator">=</span>
          <span class="token keyword">this</span><span class="token operator">-></span>layer_param_<span class="token punctuation">.</span><span class="token function">contrastive_loss_param</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">legacy_version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> Dtype sign <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> Dtype alpha <span class="token operator">=</span> sign <span class="token operator">*</span> top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">cpu_diff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span>
          <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Dtype<span class="token operator">></span></span></span><span class="token punctuation">(</span>bottom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// NOLINT_NEXT_LINE(whitespace/operators)</span>
      CLLBackward<span class="token operator">&lt;</span>Dtype<span class="token operator">></span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token function">CAFFE_GET_BLOCKS</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span> CAFFE_CUDA_NUM_THREADS<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>
          count<span class="token punctuation">,</span> channels<span class="token punctuation">,</span> margin<span class="token punctuation">,</span> legacy_version<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span>
          is_same_<span class="token punctuation">.</span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// pair similarity 0 or 1  added by miao</span>
          diff_<span class="token punctuation">.</span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// the cached eltwise difference between a and b</span>
          dist_sq_<span class="token punctuation">.</span><span class="token function">gpu_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// the cached square distance between a and b</span>
          bottom<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span><span class="token function">mutable_gpu_diff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      CUDA_POST_KERNEL_CHECK<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">INSTANTIATE_LAYER_GPU_FUNCS</span><span class="token punctuation">(</span>ContrastiveLossLayer<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>  <span class="token comment">// namespace caffe</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>需要注意的时候，前馈和后馈都需要做一点代码上的修改，虽说十分的简单，但也要小心。 至此，基于Caffe的DeepID2的修改全部完成。</p>
<p>最后，十分感谢小喵的师弟，胖喵的审查，每一篇博客都由胖喵第一手的阅读并提出意见。  </p>
<p><strong>转载</strong>请注明出处~</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>dlib人脸关键点检测的模型分析与压缩</title>
    <url>/2018/01/08/dlib-landmark-model-compression/</url>
    <content><![CDATA[<p>人脸关键点检测的技术在很多领域上都有应用，首先是人脸识别，常见的人脸算法其实都会有一步，就是把人脸的图像进行对齐，而这个对齐就是通过关键点实现的，因此关于人脸关键点检测的论文也常叫face alignment，也就是人脸对齐。另一方面，对于美颜，2D/3D建模等等也需要一来人脸的关键点技术，而且通常也要求有尽可能多的人脸关键点。</p>
<blockquote>
<p>Dlib is a modern C++ toolkit containing machine learning algorithms and tools for creating complex software in C++ to solve real world problems. It is used in both industry and academia in a wide range of domains including robotics, embedded devices, mobile phones, and large high performance computing environments. Dlib's <a href="http://dlib.net/license.html">open source licensing</a> allows you to use it in any application, free of charge.</p>
</blockquote>
<p>Dlib是一个包含了大量的机器学习和复杂软件开发工具的现代C++工具箱，被广泛的用于软件开发等领域。</p>
<p>本篇博客主要研究的就是Dlib中的人脸关键点检测的工具。该工具的方法依据是 One Millisecond Face Alignment with an Ensemble of Regression Trees by Vahid Kazemi and Josephine Sullivan, CVPR 2014 这篇论文，在速度和精度上均达到了极好的效果。 本文的侧重点在于人脸关键点模型的存储结构的分析和模型的压缩策略分析，最终在性能几乎不变的情况下，得到模型的至少10倍的压缩比。项目最终的github地址为：<a href="https://github.com/miaoerduo/dlib-face-landmark-compression">https://github.com/miaoerduo/dlib-face-landmark-compression</a> 欢迎fork、star和pr。</p>
<span id="more"></span>
<p>注意：</p>
<ol type="1">
<li>本文假定了读者对该论文有一定的了解，可以使用Dlib完成人脸关键点的训练和部署，因此不做论文的相关方法的解释。</li>
<li>本文中分析的数据都是Dlib的shape_predictor类的私有成员，这里不得不把他们的修饰符从private改成了public，但文中并没有专门指出。</li>
<li>本文中所有的代码均在本地的64位操作系统上运行，在变量数据存储的大小描述的时候也均以64位来说明，即使是不同的编译器也会对数据大小造成影响，但这不是本文的重点。</li>
<li>本文中的数据类型如果不在C++中见到的数据类型，则为下面的typedef的数据类型：</li>
</ol>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">char</span>        int8<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">short</span>       int16<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span>         int32<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span>   int64<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">float</span>       float32<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">double</span>      float64<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span>       uint8<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span>      uint16<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span>        uint32<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span>  uint64<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Dlib中人脸关键点实现的类是<code>dlib::shape_predictor</code>，源码为：<a href="https://github.com/davisking/dlib/blob/master/dlib/image_processing/shape_predictor.h">https://github.com/davisking/dlib/blob/master/dlib/image_processing/shape_predictor.h</a></p>
<p>这里简单的抽取了数据相关的接口定义：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> dlib
<span class="token punctuation">&#123;</span>
    <span class="token keyword">namespace</span> impl
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">struct</span> <span class="token class-name">split_feature</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">unsigned</span> <span class="token keyword">long</span> idx1<span class="token punctuation">;</span>
            <span class="token keyword">unsigned</span> <span class="token keyword">long</span> idx2<span class="token punctuation">;</span>
            <span class="token keyword">float</span> thresh<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

        <span class="token keyword">struct</span> <span class="token class-name">regression_tree</span>
        <span class="token punctuation">&#123;</span>
            std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>split_feature<span class="token operator">></span> splits<span class="token punctuation">;</span>
            std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>matrix<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">></span> <span class="token operator">></span> leaf_values<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">class</span> <span class="token class-name">shape_predictor</span>
    <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        matrix<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">></span> initial_shape<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>impl<span class="token double-colon punctuation">::</span>regression_tree<span class="token operator">></span> <span class="token operator">></span> forests<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">></span> <span class="token operator">></span> anchor_idx<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>dlib<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">></span> <span class="token operator">></span> <span class="token operator">></span> deltas<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面，我们逐一对每个部分的参数进行分析。<code>Dlib</code>内置了很多的数据类型，像<code>vector</code>、<code>metrix</code>等等，每种数据类型又可以单独序列化成二进制的数据。对于<code>shape_predictor</code>的序列化，本质上就是不断的调用成员变量数据的序列化方法，由此极大地简化代码，提高了代码的复用率。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">serialize</span> <span class="token punctuation">(</span><span class="token keyword">const</span> shape_predictor<span class="token operator">&amp;</span> item<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> out<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> version <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    dlib<span class="token double-colon punctuation">::</span><span class="token function">serialize</span><span class="token punctuation">(</span>version<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dlib<span class="token double-colon punctuation">::</span><span class="token function">serialize</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>initial_shape<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dlib<span class="token double-colon punctuation">::</span><span class="token function">serialize</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>forests<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dlib<span class="token double-colon punctuation">::</span><span class="token function">serialize</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>anchor_idx<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dlib<span class="token double-colon punctuation">::</span><span class="token function">serialize</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>deltas<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但，对于移动端等应用场景，需要模型占用尽可能少的存储空间，这样一来，这些标准的存储方式就会造成数据的很大程度的冗余。我们的任务就是一点点的减少这些冗余，只存有用的数据。</p>
<h2 id="一常量部分">一、常量部分</h2>
<p>首先，我们需要知道一些常量的数据。这些数据完成了对模型的描述。 [table id=6 /]</p>
<table>
<thead>
<tr class="header">
<th>变量名</th>
<th>数据类型</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>version</td>
<td>uint64</td>
<td>记录模型版本号</td>
</tr>
<tr class="even">
<td>cascade_depth</td>
<td>uint64</td>
<td>回归树的级数</td>
</tr>
<tr class="odd">
<td>num_trees_per_cascade_level</td>
<td>uint64</td>
<td>每一级中的树的个数</td>
</tr>
<tr class="even">
<td>tree_depth</td>
<td>uint64</td>
<td>树的深度</td>
</tr>
<tr class="odd">
<td>feature_pool_size</td>
<td>uint64</td>
<td>特征池的大小</td>
</tr>
<tr class="even">
<td>landmark_num</td>
<td>uint64</td>
<td>特征点的数目</td>
</tr>
<tr class="odd">
<td>quantization_num</td>
<td>uint64</td>
<td>量化的级数</td>
</tr>
<tr class="even">
<td>prune_thresh</td>
<td>float32</td>
<td>剪枝的阈值</td>
</tr>
</tbody>
</table>
<h2 id="二初始形状-initial_shape">二、初始形状 initial_shape</h2>
<p><code>matrix&lt;float,0,1&gt; initial_shape;</code> 表示的是初始化人脸关键点的坐标，存储类型是<code>float</code>型，个数为<code>landmark_num * 2</code>（不要忘了一个点是两个数组成 :P）。</p>
<h2 id="三锚点-anchor_idx">三、锚点 anchor_idx</h2>
<p><code>std::vector&lt;std::vector&lt;unsigned long&gt; &gt; anchor_idx;</code> 是一个二维的数组，存放的是landmark点的下标。在常见的68点和192点的任务中，使用一个<code>uint8</code>就可以存放下标，而这里使用的是<code>unsigned long</code>，显然过于<strong>冗余</strong>，这里可以简化成uint8存储。这个二维数组的大小为 <code>cascade_depth * feature_pool_size</code>。每一级回归树使用一套锚点。</p>
<h2 id="四deltas">四、deltas</h2>
<p><code>std::vector&lt;std::vector&lt;dlib::vector&lt;float,2&gt; &gt; &gt; deltas;</code>和anchor_idx类似，是一个二维数组，不同的是，数组的每个值都是<code>dlib::vector&lt;float,2&gt;</code>的结构。这个数组的大小为<code>cascade_depth * feature_pool_size * 2</code>，存放的内容是<code>float</code>数值。考虑到这里的参数量很少，没有压缩的必要，这里我们直接存储原数据。</p>
<h2 id="五森林-forests">五、森林 forests</h2>
<p>这部分是模型参数量最大的部分，一个模型大概2/3的存储都耗在了这个地方。这里才是我们压缩的重点！ <code>std::vector&lt;std::vector&lt;impl::regression_tree&gt; &gt; forests;</code>一个<code>shape_predictor</code>中，有<code>cascade_depth</code>级，每一级有<code>num_trees_per_cascade_level</code>棵树。对于每棵树，它主要存放了两个部分的数据：分割的阈值<code>splits</code>和叶子的值<code>leaf_values</code>。为了便于阅读，再把数据结构的定义附上。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> dlib
<span class="token punctuation">&#123;</span>
    <span class="token keyword">namespace</span> impl
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">struct</span> <span class="token class-name">split_feature</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">unsigned</span> <span class="token keyword">long</span> idx1<span class="token punctuation">;</span>
            <span class="token keyword">unsigned</span> <span class="token keyword">long</span> idx2<span class="token punctuation">;</span>
            <span class="token keyword">float</span> thresh<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

        <span class="token keyword">struct</span> <span class="token class-name">regression_tree</span>
        <span class="token punctuation">&#123;</span>
            std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>split_feature<span class="token operator">></span> splits<span class="token punctuation">;</span>
            std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>matrix<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">></span> <span class="token operator">></span> leaf_values<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token comment">// end namespace impl</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="splits">5.1 splits</h3>
<p>splits存放的数据是阈值和特征像素值的下标，这个下标的范围是<code>[0, feature_pool_size)</code>，在通常情况下，<code>feature_pool_size</code>不会太大，论文中最大也就设到了2000。这里我们可以使用一个<code>uint16</code>来存储。<code>thresh</code>就直接存储。对于一棵树，树的深度为<code>tree_depth</code>，则有 <code>2^tree_depth - 1</code>个split_node。（这里认为只有根节点的树深度为0）。</p>
<h3 id="leaf_values">5.2 leaf_values</h3>
<p><code>std::vector&lt;matrix&lt;float,0,1&gt; &gt; leaf_values;</code>对于深度为<code>tree_depth</code>的树，有<code>2^tree_depth</code>个叶子节点。对于每个叶子节点，需要存储整个关键点的偏移量，也就是说每个节点存放了<code>landmark_num * 2</code>个<code>float</code>的数值。那么这部分的参数量到底有多大呢？</p>
<p>举个例子，在<code>cascade_num</code>为10，<code>num_trees_per_cascade_level</code>为500，<code>tree_depth</code>为5，<code>landmark_num</code>为68的时候。<code>leaf_values</code>的值有<code>cascade_num * num_trees_per_cascade_level * (2 ^ tree_depth) * landmark_num * 2 = 21760000 = 20.8M</code>的参数量，由于使用<code>float</code>存储，通常一个<code>float</code>是4个字节，因此总的存储量达到了逆天的<strong>80MB</strong>！远大于其他的参数的总和。 那么如何才能有效的降低这部分的存储量呢？ 这就要要用到传说中的模型压缩三件套：<strong>剪枝，量化</strong>和<strong>编码</strong>。</p>
<h4 id="参数分布分析">5.2.1 参数分布分析</h4>
<p>首先笔者统计了参数的分布，大致的情况是这样的，（具体的结果找不到了）。 叶子节点里的参数的范围在<code>[-0.11, 0.11]</code>之间，其中<code>[-0.0001, 0.0001]</code>的参数占了50%以上。说明模型中有大量的十分接近0的数字。</p>
<h4 id="剪枝">5.2.2 剪枝</h4>
<p>剪枝的策略十分粗暴，选择一个剪枝的阈值prune_thresh，将模小于阈值的数全部置0。</p>
<h4 id="量化">5.2.3 量化</h4>
<p>量化的过程，首先获取数据中的最小值和最大值，记为：<code>leaf_min_value</code>和<code>leaf_max_value</code>。之后根据量化的级数<code>quantization_num</code>，计算出每一级的步长：<code>quantization_precision = (leaf_max_value - leaf_min_value) / quantization_num</code>。之后对于任意数值<code>x</code>，那么它最终为<code>x / quantization_precision</code>进行四舍五入的结果。这样就可以把<code>float</code>的数字转换成整形来表示。量化级数越高，则量化之后的值损失就越小。</p>
<h4 id="编码">5.3.3 编码</h4>
<p>如果我们不做任何的编码操作，直接存储量化之后的结果，也是可以一定程度上进行模型的压缩的。比如使用256级量化，则量化的结果使用一个<code>uint8</code>就可以存储，从而把存储量降为原来的1/4。但是这样有两个问题：1，依赖量化的级数；2，存储量减少不大。 在信息论中有个信息熵的概念。为了验证存储上的可以再优化，这里选择了一个68点的模型，经过256级量化之后，计算出信息熵（信息熵的计算请查阅其他的资料），其数值为1.53313，也就是说，理想情况下，一个数值只需要不到<code>2 bits</code>就可以存储了。如果不编码则需要<code>8 bits</code>。压缩比为<code>1.53313 / 8 = 19.2%</code>，前者仅为后者的1/5不到！</p>
<p>这里，我采用的是经典的huffman编码，使用了github上的<a href="https://github.com/ningke/huffman-codes">https://github.com/ningke/huffman-codes</a>项目中的代码，感谢作者的贡献！原项目中只能对char类型的数据进行编码，因此这里也做了相应的修改，以适应于int类型的编码，同时删除了一些用不到的函数。使用huffman对上述的256级的数值进行编码，最终的每个数字的平均长度为1.75313，已经很接近理想情况。使用huffman编码时，同时需要将码表进行储存，这部分细节较为繁琐，读者可以自行阅读源码。</p>
<p>至此，Dlib的模型的分析和压缩就全部介绍完了。对代码感兴趣的同学可以在：<a href="https://github.com/miaoerduo/dlib-face-landmark-compression">https://github.com/miaoerduo/dlib-face-landmark-compression</a> ，也就是我的github上clone到最新的代码，代码我目前也在不断的测试，如果有问题，也会及时更新的。</p>
<p>在本地的实验中，原模型的大小为127M，压缩之后只有5.9M，且性能几乎不变（这里<code>prune_thresh</code>设为0.0001，<code>quantization_num</code>设为256，<code>quantization_num</code>设置越大，则精度越接近原模型，同时<code>prune_thresh</code>的大小很多时候是没有用的）。</p>
<p>马上就要毕业了，希望写博客的习惯能够一直保持下去。</p>
<p>最后，再一次，希望小喵能和大家一起学习和进步~~</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>Easy Pipeline，一种轻量级的Python Pipeline库</title>
    <url>/2019/03/23/easy-pipeline/</url>
    <content><![CDATA[<blockquote>
<p>嗯，很久没有写博客了，最近的工作都是偏开发性质的，以至于没有时间对自己感兴趣的领域进行探索，感觉个人的成长停滞了一些。如何在枯燥的工作中，提取出有助于自己成长的养分，对于每个人来说都是不小的考验。</p>
</blockquote>
<p>这次，带来的是之前编写的一下挺简单的库，用来简化流水线作业的小框架。</p>
<p>Github: <a href="https://github.com/miaoerduo/easy-pipeline">https://github.com/miaoerduo/easy-pipeline</a> 欢迎Star和提交MR。</p>
<span id="more"></span>
<p>起因是这样的，组内有一个需求，需要挖掘视频中的检测难样本，这样可以极大地减少标注的量，从而降低成本。难样本挖掘的策略，简单来说就是如果视频的前几帧和后几帧都能检测到目标，而就只有当前帧没有检测到，就说明当前帧很可能存在漏检（没有检测本到该检测到的目标）；反之，如果前后都没有检测到目标，而当前帧检测到了，那就很可能是误检（检测到不是目标的东西）。</p>
<p><img src="simple-pipeline.png" alt="simple pipeline" /></p>
<p>初步的方案是这样的，我们先把视频抽帧，直接用FFMpeg就可以方便的完成。然后调用现在的检测器，进行逐帧的检测，把检测结果存下来。最后写个脚本，分析检测的结果，然后输出可能有问题的帧，然后这些帧就会进行送标（发给标注员进行标注）。最终我们就只需要标注一些比较hard的样本就行了。</p>
<p>但是这样会带来很多的问题，最显著的两个：1. 需要保存大量的中间结果（图片帧）；2. 必须依次完成每一步之后，才能得到最终的结果。</p>
<p>这时候，相比大家都知道了该如何去解决。对的，我们应该用流水线作业的方式去进行。</p>
<p><img src="simple-pipeline2.png" alt="simple pipeline2" /></p>
<p>首先我们可以将每部分任务并行的去处理。抽帧之后的结果送入队列；之后检测模块从队列取帧，检测之后将结果送入下一个队列；最后一个队列得到检测结果，再做最终的分析。相比于之前的方式，这样可以尽量的减少中间的结果。</p>
<p>实现该方案，只需要使用最简单的生产者消费者队列即可以完成。所以说，相信大家都十分了解了。对于上面的逻辑，我们需要的队列的数目和我们的模块数是正相关的。如果单纯的进行实现的话，实在的太麻烦了，给队列命名都要我们绞尽脑汁了。所以，为了更优雅的编写代码，这里就推出本文标题中的Easy Pipeline框架。</p>
<p>首先，我们举个最简单的例子来说明该框架的工作模式。输入一个数字的序列，按要求对他们进行加减乘除的操作（这里的每个操作，其实可以等价于前面的抽帧或是检测的更复杂的操作 ），并且支持每个操作的进程数。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> easy_pipeline <span class="token keyword">import</span> SimplePipeline<span class="token punctuation">,</span> PipelineItem<span class="token punctuation">,</span> Task<span class="token punctuation">,</span> StopTask<span class="token punctuation">,</span> EmptyTask
<span class="token keyword">import</span> multiprocessing <span class="token keyword">as</span> mp

<span class="token comment"># define our Task</span>
<span class="token keyword">class</span> <span class="token class-name">NumTask</span><span class="token punctuation">(</span>Task<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>NumTask<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x

<span class="token comment"># init function, here we use closure to get different function</span>
<span class="token keyword">def</span> <span class="token function">get_init_fn</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> x
    <span class="token keyword">return</span> init

<span class="token comment"># operations</span>
<span class="token keyword">def</span> <span class="token function">plus</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> NumTask<span class="token punctuation">(</span>task<span class="token punctuation">.</span>val <span class="token operator">+</span> res<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">mul</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> NumTask<span class="token punctuation">(</span>task<span class="token punctuation">.</span>val <span class="token operator">*</span> res<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">minus</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> NumTask<span class="token punctuation">(</span>task<span class="token punctuation">.</span>val <span class="token operator">-</span> res<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">div</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> NumTask<span class="token punctuation">(</span>task<span class="token punctuation">.</span>val <span class="token operator">/</span> res<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>

    <span class="token comment"># job queue</span>
    manager <span class="token operator">=</span> mp<span class="token punctuation">.</span>Manager<span class="token punctuation">(</span><span class="token punctuation">)</span>
    job_queue <span class="token operator">=</span> manager<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>

    <span class="token comment"># define pipeline and start</span>

    <span class="token comment"># x = （(x + 1) * 2 - 3）/ 5</span>
    pipeline_items <span class="token operator">=</span> <span class="token punctuation">[</span>
        PipelineItem<span class="token punctuation">(</span>plus<span class="token punctuation">,</span> get_init_fn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment"># plus 1</span>
        PipelineItem<span class="token punctuation">(</span>mul<span class="token punctuation">,</span> get_init_fn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token comment"># mul 2</span>
        PipelineItem<span class="token punctuation">(</span>minus<span class="token punctuation">,</span> get_init_fn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment"># minus 3</span>
        PipelineItem<span class="token punctuation">(</span>div<span class="token punctuation">,</span> get_init_fn<span class="token punctuation">(</span><span class="token number">5.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment"># div 5</span>
    <span class="token punctuation">]</span>

    pipeline <span class="token operator">=</span> SimplePipeline<span class="token punctuation">(</span>pipeline_items<span class="token punctuation">,</span> job_queue<span class="token punctuation">)</span>
    pipeline<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    result_queue <span class="token operator">=</span> pipeline<span class="token punctuation">.</span>get_result_queue<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># Feed jobs anytime (before StopTask)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        job_queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>NumTask<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># get partial output</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Get Output Start'</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> result_queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> StopTask<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"get stop task"</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> EmptyTask<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Get Output End'</span><span class="token punctuation">)</span>

    <span class="token comment"># Feed jobs anytime (before StopTask)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        job_queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>NumTask<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># Stop pipeline, means no more job will be added then.</span>
    <span class="token comment"># Every process will exit when it has done all current jobs in job_queue</span>
    pipeline<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># get all output</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Get Output Start'</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> result_queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> StopTask<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Output Queue Empty"</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> EmptyTask<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Get Output End'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面，我们来简单的说明一下工作逻辑。</p>
<ol type="1">
<li><strong>首先，我们需要定义自己的任务Task。</strong> 只需要继承Task这个类即可，内部可以存放自己喜欢的任何数据。这里只是为了计算，所以就只存放了一个数字。</li>
<li><strong>定义我们的初始化函数和工作函数。</strong> 初始化函数的作用是给每个进程初始化一些资源，如果不需要也可以不要。这里的初始化函数就是返回了一个值，表示操作数。工作函数是最重要的函数，他会处理接收到的Task，处理并返回新的Task（新的Task可以理解为处理的结果）。工作函数有两个输入，一个是资源，即初始化函数的返回值，另一个就是Task本身。</li>
<li><strong>构建Pipeline。</strong> 每个工作模块都只需要用PipelineItem这个对象进行封装即可。器参数分别是：工作函数、初始化函数、进程数、结果队列的长度（-1表示不限长度）。结果队列的长度，通常设置为较大的值即可。因为不能的模块的处理速度可能不同，因此很容易出现结果堆积的现象，如果不支持队列长度，会导致内存的大量的占用。最后将PipelineItem的数组和输入的对垒传给SimplePipeline对象即可构建完我们的整套Pipeline程序了！</li>
<li><strong>启动Pipeline程序，并输入数据。</strong></li>
<li><strong>得到结果！</strong> 完事了，优秀。</li>
</ol>
<p>上面这是一个最简单的例子，可以比较直观的感受到这个框架的便捷之处。完全屏蔽掉对队列，并发等的操作。</p>
<p>在我推荐给同事之后，确实一定程度地减小他的工作量，但同时，他也向我反馈了一些问题：这个框架在某些地方有些比较灵活的设计，应该给出足够多的实例，才能方便实用。关于该框架的设计思路和实例，将会在下一篇博客中进行详细介绍。</p>
<p>最后，欢迎大家Star和提交MR。愿与你们一同进步。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Framework</category>
      </categories>
  </entry>
  <entry>
    <title>_rebuild_tensor_v2？pytorch版本间模型兼容性脱坑实践</title>
    <url>/2018/08/02/fix-rebuild-tensor-v2-error-in-pytorch/</url>
    <content><![CDATA[<blockquote>
<p>最近使用Pytorch 0.4.0 进行模型训练，之后使用一个转模型的工具时，报了一个错，就是标题里面的<code>_rebuild_tensor_v2</code>相关的错误。最后发现是本地使用的pytorch的版本是0.3.0，和0.4.0模型上不兼容。各论坛上的解决方案都是说pytorch版本不向后兼容，建议升级pytorch。无奈我这里不方便升级pytorch版本。那么问题就来了，有没有什么不需要修改pytorch源码，或是不升级pytorch，又能让老版本的pytorch读取新版本模型的方案呢？</p>
</blockquote>
<p>当然是有的，而且工作量很小。</p>
<span id="more"></span>
<h2 id="一pytorch模型存储和读取的流程">一、Pytorch模型存储和读取的流程</h2>
<p>首先，我们使用pytorch存储模型会使用 <code>torch.save</code> 这个函数，直接将模型的<code>state_dict()</code>保存下来。类似下面的代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token string">'state_dict'</span><span class="token punctuation">:</span> model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">'other'</span><span class="token punctuation">:</span> other_data
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token string">'model.pth'</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>读取参数的代码也十分简单：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> Model<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'model.pth'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>
    param <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>fp<span class="token punctuation">)</span>

model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>param<span class="token punctuation">[</span><span class="token string">'state_dict'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而低版本的pytorch就是在 <code>load_state_dict</code> 这里报了错。</p>
<h2 id="二state-dict">二、State Dict</h2>
<p>我们首先要知道，<code>model.state_dict()</code>的返回值究竟是什么。</p>
<p>这里我直接给出结论：</p>
<p><code>model.state_dict()</code> 的返回值是一个 <code>collections.OrderedDict</code> 对象，它的键是一个字符串，它的值是Tensor的对象。所以造成兼容性问题的其实是Tensor对象的不兼容。</p>
<p>那么是不是可以将Tensor转化成一个新的非Pytorch内置的数据类型呢？这样就可以避免兼容性问题。</p>
<p><code>numpy.ndarray</code> 就是我们需要的中间态。</p>
<h2 id="三模型转换">三、模型转换</h2>
<p>首先，我们需要将state_dict的参数转换成 <code>numpy.ndarray</code> 保存下来。这里使用高版本的pytorch。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict
<span class="token keyword">import</span> pickle

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'model.pth'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>
    param <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>fp<span class="token punctuation">)</span>

state_dict <span class="token operator">=</span> param<span class="token punctuation">[</span><span class="token string">'state\_dict'</span><span class="token punctuation">]</span>
numpy_state_dict <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> key<span class="token punctuation">,</span> tensor <span class="token keyword">in</span> state_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    numpy_state_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> tensor<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'state_dict.pic'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>
    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>numpy_state_dict<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>之后，用低版本的pytorch载入这个numpy的<code>state_dict</code>。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle
<span class="token keyword">import</span> torch

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'numpy_state_dict.pic'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>
    state_dict <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>fp<span class="token punctuation">)</span>

<span class="token comment"># numpy.ndarray -> tensor</span>
<span class="token keyword">for</span> key<span class="token punctuation">,</span> ndarr <span class="token keyword">in</span> state_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    state_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span>ndarr<span class="token punctuation">)</span>

model <span class="token operator">=</span> Model<span class="token punctuation">(</span><span class="token punctuation">)</span>
model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>state_dict<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="四总结">四、总结</h2>
<p>对于这个问题，还有很多的解决方案，这里是比较简单的一种。</p>
<p>PS. 这是目前为止，写的最快的一篇博客了。。。</p>
<p><strong>转载请注明出处，谢谢！</strong></p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>免费的云服务搜集</title>
    <url>/2024/01/26/free-serverless-provider/</url>
    <content><![CDATA[<blockquote>
<p>注意，以下的信息仅截止于2024年11月25，后续可能会有变化。 以下顺序不代表排名。</p>
</blockquote>
<p>下面的内容主要是免费的一些云服务资源，具体有：</p>
<ol type="1">
<li>计算资源
<ul>
<li>Serverless函数</li>
<li>容器</li>
</ul></li>
<li>数据
<ul>
<li>KV</li>
<li>Redis</li>
<li>MySQL</li>
<li>MongoDB</li>
<li>Kafka</li>
</ul></li>
</ol>
<span id="more"></span>
<h2 id="github.com"><a href="https://github.com">github.com</a></h2>
<p>这个没啥好说的，github pages能用来搭建静态博客。actions能执行编译任务。</p>
<h2 id="cloudflare.com"><a href="https://cloudflare.com">cloudflare.com</a></h2>
<p>Pages和github pages类似。workers是serverless的应用，并且提供了KV的读写，但是Quota比较少。国内访问的速度有点慢。</p>
<h2 id="vercel.com"><a href="https://vercel.com">vercel.com</a></h2>
<p>支持35+框架。Serverless functions和KV+Postgres数据库。KV是256M空间3w请求每月，postgres是256M空间，60hours每月，写入数据量每月256M。</p>
<h2 id="deno.com"><a href="https://deno.com">deno.com</a></h2>
<p>Deno是一个javascript的runtime，和nodejs并列的存在。这个网站上可以托管deno的服务（也能部署静态网站，用个纯静态文件代理的deno程序就行）。免费版支持部署服务+KV存储。量都挺多。支持从github部署。</p>
<h2 id="netlify.com"><a href="https://netlify.com">netlify.com</a></h2>
<p>一个用于构建和静态网站托管的网站。免费版每个月支持300min编译时间，100G的网站流量。用github就能登录，支持直接部署github项目，网速也不错。(PS. 本博客目前使用该平台)</p>
<h2 id="www.4everland.org"><a href="https://www.4everland.org">www.4everland.org</a></h2>
<p>一个web3.0的平台，能够托管静态网站。免费版也是量大管饱，但是激活需要关联eth钱包，否则只有1个月试用。</p>
<h2 id="leancloud.cn-leancloud.app"><a href="https://leancloud.cn">leancloud.cn</a> / <a href="https://leancloud.app">leancloud.app</a></h2>
<p>提供了存储和一个很轻量的运行实例。KV存储是1G，是自己定一个类似MongoDB的数据库。实例好像只能连续运行16h。一般都是用它来做静态博客的评论区。</p>
<p>还支持即时通讯和消息推送。</p>
<h2 id="cloud.mongodb.com"><a href="https://cloud.mongodb.com/">cloud.mongodb.com</a></h2>
<p>免费版有512M的mongodb的共享实例。</p>
<h2 id="upstash.com"><a href="https://upstash.com/">upstash.com</a></h2>
<p>提供redis/kafka/QStash的免费实例。</p>
<ul>
<li>redis是1k QPS limit + 10k command daily limit</li>
<li><del>kafka是1k QPS limit + 10k messages daily limit 好像已经没有了，只能用redis的lpush和blpop来代替了</del></li>
<li>Vector数据库</li>
<li>QStash是一个消息推送的功能。100 QPS limit + 500 messages daily limit</li>
</ul>
<h2 id="supabase.com"><a href="https://supabase.com/">supabase.com</a></h2>
<p>提供数据库和存储的功能。</p>
<ul>
<li>PostgreSQL database，500MB空间，每个月5GB流量，不限API调用次数。并且支持realtime功能，可以让开发者监控消息变更（我用Python试了下，最终是跑通了，这个Realtime的教程感觉不够清晰，并且出现了服务端拒绝的情况，最后也没用这个特性）。</li>
<li>1GB存储空间。</li>
<li>Edge Functions，应该就是云函数，使用TypeScript编写，支持5M次调用。</li>
</ul>
<h2 id="turso.tech"><a href="https://turso.tech/">turso.tech</a></h2>
<p>基于LibSQL提供的兼容SQLite的服务。</p>
<p>支持9GB空间。每个月1 Billion行读取，25 Million行写入。</p>
<h2 id="val.town"><a href="https://val.town">val.town</a></h2>
<p>部署TS的服务，能写定时任务和API，还能发邮件。每个账号还有一个私有的SQLite，免费版是10M的空间。</p>
<h2 id="azure.microsoft.com"><a href="https://azure.microsoft.com">azure.microsoft.com</a></h2>
<p>免费的内容很多，但是需要绑定信用卡。</p>
]]></content>
      <categories>
        <category>Miscellanea</category>
      </categories>
  </entry>
  <entry>
    <title>GPU硬件结构</title>
    <url>/2016/02/05/gpu-hardware/</url>
    <content><![CDATA[<blockquote>
<p>小喵的唠叨话：没想到研究生的生活这么繁忙，居然还有考试。小喵都快累成狗了。终于稍微闲下来一点了，开始继续写博客。这次的题目，其实是差不多一个月之前就想好的，但是一直碰到许多的事情，就耽搁了。</p>
</blockquote>
<p>这片文章主要介绍一下GPU的硬件结构。</p>
<span id="more"></span>
<p>首先，给大家看一张示意图（图片资源来自网上）。</p>
<p><img src="GPU_hardware.jpg" alt="GPU（G80/GT200）卡的组成模块图" /></p>
<center>
图1 GPU（G80/GT200）卡的组成模块图
</center>
<p><img src="GPU_hardware.jpg" alt="GPU硬件结构示意图" /></p>
<center>
图2 GPU结构示意图
</center>
<p>这里，我们主要了解需要有以下几个认识：</p>
<h3 id="一个主机可以有多个gpu">1，一个主机可以有多个GPU</h3>
<p>像我们一般的PC机，就大多数有集显和独显。一般的运算服务器，也是可以一个机器上有多显卡。不同的主板上的有不同数目的显卡的插槽，需要强大的计算性能就可以考虑多卡的结构。当然电源和散热可能就会成为新的问题。</p>
<h3 id="smstreaming-multiprocessors-and-spstream-processor">2，SM(Streaming Multiprocessors) and SP(Stream Processor)</h3>
<p>GPU是一种<strong>SPMD</strong>（single program, multiple data）的工作方式是<strong>SIMD</strong>（Single Instruction Multiple Data）的一个升华。在同一时间，多个处理器运行同一套程序，但是处理的数据可以不同。这样带来的效果就是，如果简单的重复的任务特别多的话（比如向量的加法），GPU可以在同一时间处理多条数据。而且每个处理器需要处理的程序是相同的，因此只需要一次指令的取操作，所有处理器可以共同执行，效率上大大提高了。 流处理器簇（SM）的概念与CPU的核心类似，GPU的程序的执行单位就是SM，GPU的SM的数目通常有15-16个，一个SM中包含了多个SP，通常是32个，SP是实际的执行单元。对于一堆任务，GPU会按照以32个为一个单位分配到每个SM中执行。 举个例子，对于向量的加法，假设有两个向量长度分别为1024，每个SP都执行一个加法，那么一共会有1024/32=32批任务，如果每个GPU有16个SM，则每个SM被调用了32/16=2次。<strong>不考虑内存读写，指令优化，或其他的延时，只考虑计算时间</strong>。那么可以理解该次计算只需要2个计算的周期（切记，这里有取指令，取数据，运算和写数据的各种时间）。而对于一个四核的CPU机器而言，需要1024/4=256次计算周期。100倍的差距。</p>
<h3 id="内存">3，内存</h3>
<p>GPU的内存通常称为显存，是GPU上高速读写的存储介质，功能上和PC的内存类似。但GPU上的内存分为多种，具体有：寄存器内存，共享内存，全局内存，纹理内存，常量内存。看到这么多种内存，有没有和小喵一样目瞪口呆？</p>
<p>下面表格里是内存的带宽和延时</p>
<center>
Access Time by Memory Type
</center>
<table>
<colgroup>
<col style="width: 15%" />
<col style="width: 29%" />
<col style="width: 18%" />
<col style="width: 19%" />
<col style="width: 16%" />
</colgroup>
<thead>
<tr class="header">
<th>Storage Type</th>
<th>Registers Shared Memory</th>
<th>Texture Memory</th>
<th>Constant Memory</th>
<th>Global Memory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Bandwidth</td>
<td>~8 TB/s ~1.5 TB/s</td>
<td>~200 MB/s</td>
<td>~200 MB/s</td>
<td>~200 MB/s</td>
</tr>
<tr class="even">
<td>Latency</td>
<td>1 cycle</td>
<td>1 to 32 cycles</td>
<td>~400 to 600</td>
<td>~400 to 600</td>
</tr>
</tbody>
</table>
<h4 id="寄存器内存">寄存器内存</h4>
<p>读写最高效的内存，在CPU上，可用的寄存器内存微乎其微。</p>
<p>于是小喵专门Google了一下：</p>
<blockquote>
<p>Registers are memories located within the Central Processing Unit (CPU). They are few in number (there are rarely more than 64 registers) and also small in size, typically a register is less than <strong>64 bits</strong> in size.[1]</p>
</blockquote>
<p>但是GPU上，每个SM就提供了至少8192个寄存器！也就是说，如果一个SM上只运行32个线程，平均每个线程可以得到8192/32=256个寄存器（虽然通常不会只运行这么少的线程）。</p>
<p>GPU为了能够高效的工作，在粗细两个粒度对内存和任务进行管理。合理的使用各种内存可以使自己的程序更加高效。</p>
<h4 id="共享内存">共享内存</h4>
<p>顾名思义，是指数据能够共享的一块内存。该内存主要在每个SM内部，同一个SM中的所有的SP都可以访问该块内存。而且读写速度仅次于寄存器内存，因此在线程间进行通信用共享内存最适合不过了。</p>
<h4 id="全局内存">全局内存</h4>
<p>在整个GPU上，任何部件都能访问的内存，我们平时说的显存1G等等的就是说的全局内存。全局内存是GPU上最大的内存，也是我们最常打交道的内存。相比于寄存器内存和共享内存，全局内存的读写速度慢了几个数量级。所以我们在设计GPU的程序的时候，要尽量充分利用寄存器内存和共享内存，才能设计出高效的程序。</p>
<h4 id="常量内存">常量内存</h4>
<p>存放常量，大小通常是32K（本质上和L2缓存共享了内存，可以通过API修改模式）。</p>
<h4 id="纹理内存">纹理内存</h4>
<p>这个现在的作用比较少了，但功能很特殊，在后面会详细介绍。 以上就是GPU的硬件结构的简单介绍。感兴趣的同学可以访问NVIDIA的官网，获取更多的信息。</p>
<p>[1]<a href="http://www.doc.ic.ac.uk/~eedwards/compsys/memory/">http://www.doc.ic.ac.uk/~eedwards/compsys/memory/</a></p>
]]></content>
      <categories>
        <category>C++</category>
        <category>CUDA</category>
      </categories>
  </entry>
  <entry>
    <title>Hello CUDA - CUDA程序简单入门</title>
    <url>/2016/02/07/hello-cuda/</url>
    <content><![CDATA[<blockquote>
<p>小喵的唠叨话：通过之前的对于GPU和CUDA的学习，我们应该简单的了解了什么是GPU，它能做什么，以及GPU的硬件结构。那么，大家是不是迫不及待的想要写出CUDA程序了呢？</p>
</blockquote>
<span id="more"></span>
<p>本章就要通过最简单的几个理解，教会大家CUDA程序的写法，并理解其工作方式。 下面就是第一个程序：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello CUDA!\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将上述代码保存成文件<code>hello_cuda.cu</code>，使用nvcc进行编译。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvcc hello_cuda.cu <span class="token parameter variable">-o</span> hello_cuda.out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>便可以得到可执行文件<code>hello_cuda.out</code>，运行该可执行文件，便可得到如下的结果（实验的环境为CentOS 7）:</p>
<pre class="line-numbers language-none"><code class="language-none">Hello CUDA!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这就是第一个CUDA程序。</p>
<div style="color: gray">
旁观者小汪：这不就是C语言的Hello World程序嘛，和GPU有什么关系？
</div>
<p>是的，这个程序确实和一般的CPU程序没什么两样，写这个程序主要是告诉大家，其实CUDA的语法本身并不难，我们可以像写CPU程序一样编写GPU上的程序。</p>
<p>现在我们简单分析一下这个程序，代码内容就不用分析了吧。首先，源码文件是以.cu结尾，这有别于C和C++的.c,.cc,.cpp等后缀。其次，编译的时候使用nvcc这个编译器，对于C/C++的程序，我们常用的编译器是gcc。NVIDIA公司通过提供额外的关键字（后面会说到）来拓展了C/C++语言，重写了gcc为nvcc，支持了整个CUDA程序的编译过程。nvcc的使用可以使用nvcc -h来查询。这不是本章的重点。 下面，我们看一个稍微复杂一点的程序。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">function_call3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>

__device__ <span class="token keyword">void</span> <span class="token function">function_call2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>

__global__ <span class="token keyword">void</span> <span class="token function">function_call1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">function_call2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// success</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    function_call1<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// success</span>
    <span class="token comment">// function_call2&lt;&lt;&lt;1, 1>>>();  // error: a __device__ function call cannot be configured</span>
    <span class="token function">function_call3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// success</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>很遗憾，这个程序既不会完成出色的算法，也不会有任何的输出，更不会为您煮出香喷喷的咖啡。</p>
<p>但这里我们可以惊奇的发现两个特殊的关键字<code>__global__</code>和<code>__device__</code>，这就是我们之前提到过的对<code>C/C++</code>的拓展的关键字。</p>
<p>CUDA程序主要有两个部分，CPU上运行的程序和GPU上的程序。这些特殊的关键字就是为了说明后面定义的函数（这些关键字也可以修饰变量）在何处运行。main函数作为入口函数，之前没有任何的修饰，是很正常的CPU程序。同理<code>function_call3</code>也是CPU的程序(CPU上的程序也可以用<code>__host__</code>来修饰)。<code>function_call1</code>被<code>__global__</code>修饰，意思是该程序可以被任何程序所调用（CPU或GPU），但是是在GPU上运行。<code>function_call2</code>被<code>__device__</code>修饰，表示该程序是GPU上的程序并且只能被GPU程序所调用。理解调用规则了吗？<code>&lt;&lt;&lt;1, 1&gt;&gt;&gt;</code>这个符号，这也是对C/C++的拓展，这两个数字分别表示<code>block_num</code>和<code>thread_num</code>，用来指示GPU程序的线程块和块内线程的数目。我们暂时不用理解。</p>
<p>现在，整个程序是不是就变得很清晰？这其实就是一个验证CPU和GPU上的函数调用的例子。</p>
<p>通过上面的这个例子，我们已经知道了CPU和GPU程序的调用规则。并编写出了两个_什么都不做的_CUDA程序。</p>
<p>最后，我们看一个更为复杂的程序，一个向量的加法程序。程序中可能有一些我们没有介绍过的东西，只需意会即可。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cuda_runtime.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">CUDA_CALL</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">const</span> cudaError_t a <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">!=</span> cudaSuccess<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\nCUDA Error: %s(err_num=%d)\n"</span><span class="token expression"><span class="token punctuation">,</span> <span class="token function">cudaGetErrorString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">cudaDeviceReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VECTOR_LENGTH</span> <span class="token expression"><span class="token number">1024</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BLOCK_NUM</span> <span class="token expression"><span class="token number">2</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">THREAD_NUM</span> <span class="token expression"><span class="token number">256</span></span></span>

__global__ <span class="token keyword">void</span> <span class="token function">vector_add</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>v1<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>v2<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 线程号</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> tid <span class="token operator">=</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">*</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>tid <span class="token operator">&lt;</span> VECTOR_LENGTH<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        r<span class="token punctuation">[</span>tid<span class="token punctuation">]</span> <span class="token operator">=</span> v1<span class="token punctuation">[</span>tid<span class="token punctuation">]</span> <span class="token operator">+</span> v2<span class="token punctuation">[</span>tid<span class="token punctuation">]</span><span class="token punctuation">;</span>
        tid <span class="token operator">+=</span> BLOCK_NUM <span class="token operator">*</span> THREAD_NUM<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// CPU内存</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>host_v1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>VECTOR_LENGTH <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>host_v2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>VECTOR_LENGTH <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>host_result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>VECTOR_LENGTH <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>gpu_result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>VECTOR_LENGTH <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// GPU内存</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>device_v1<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>device_v2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>device_result<span class="token punctuation">;</span>
    <span class="token function">CUDA_CALL</span><span class="token punctuation">(</span><span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>device_v1<span class="token punctuation">,</span> VECTOR_LENGTH <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CUDA_CALL</span><span class="token punctuation">(</span><span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>device_v2<span class="token punctuation">,</span> VECTOR_LENGTH <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CUDA_CALL</span><span class="token punctuation">(</span><span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>device_result<span class="token punctuation">,</span> VECTOR_LENGTH <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 初始化CPU上的数据</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> VECTOR_LENGTH<span class="token punctuation">;</span> <span class="token operator">++</span> idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        host_v1<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token punctuation">;</span>
        host_v2<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// CPU计算结果</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> VECTOR_LENGTH<span class="token punctuation">;</span> <span class="token operator">++</span> idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        host_result<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> host_v1<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">+</span> host_v2<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 将CPU数据复制到GPU上</span>
    <span class="token function">CUDA_CALL</span><span class="token punctuation">(</span><span class="token function">cudaMemcpy</span><span class="token punctuation">(</span>device_v1<span class="token punctuation">,</span> host_v1<span class="token punctuation">,</span> VECTOR_LENGTH <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cudaMemcpyHostToDevice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CUDA_CALL</span><span class="token punctuation">(</span><span class="token function">cudaMemcpy</span><span class="token punctuation">(</span>device_v2<span class="token punctuation">,</span> host_v2<span class="token punctuation">,</span> VECTOR_LENGTH <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cudaMemcpyHostToDevice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 调用核函数,GPU计算结果</span>
    vector_add<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>BLOCK_NUM<span class="token punctuation">,</span> THREAD_NUM<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span>device_v1<span class="token punctuation">,</span> device_v2<span class="token punctuation">,</span> device_result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将GPU计算结果复制到CPU上</span>
    <span class="token function">CUDA_CALL</span><span class="token punctuation">(</span><span class="token function">cudaMemcpy</span><span class="token punctuation">(</span>gpu_result<span class="token punctuation">,</span> device_result<span class="token punctuation">,</span> VECTOR_LENGTH <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cudaMemcpyDeviceToHost<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 检查计算结果</span>
    <span class="token keyword">int</span> is_match <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> VECTOR_LENGTH<span class="token punctuation">;</span> <span class="token operator">++</span> idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// printf("%d %d\\n", host_result[idx], gpu_result[idx]);</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>host_result<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">!=</span> gpu_result<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            is_match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>is_match<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"match\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"not match\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 释放资源</span>
    <span class="token function">free</span><span class="token punctuation">(</span>host_v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>host_v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>host_result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>gpu_result<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">CUDA_CALL</span><span class="token punctuation">(</span><span class="token function">cudaFree</span><span class="token punctuation">(</span>device_v1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CUDA_CALL</span><span class="token punctuation">(</span><span class="token function">cudaFree</span><span class="token punctuation">(</span>device_v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CUDA_CALL</span><span class="token punctuation">(</span><span class="token function">cudaFree</span><span class="token punctuation">(</span>device_result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个程序看起来稍微有点复杂。我们来一点点的分析和理解。<code>vector_add</code>被<code>__global__</code>修饰，看来是个GPU的程序。主函数里分别用CPU和GPU两种方式计算了两个向量的加法，最后也做了比较。还记得我们之前说过的显存的概念吗？其实，CPU和GPU的程序只能访问对应的内存，即CPU访问主存，GPU访问显存，不能互相访问，因此我们不能让<code>vector_add</code>这个函数直接对CPU上的数据进行计算(<code>malloc</code>得到的内存数据)，而是将CPU数据在GPU上做一次拷贝，之后再计算。</p>
<p><img src="heterogeneous-programming.png" alt="heterogeneous-programming" /></p>
<center>
图1 Host和Device程序运行示意图
</center>
<p>*注：上图中顺序执行的代码（Series Code）是在Host上运行，（Parallel Code）是在Device上运行。</p>
<p>参考上图，我们简单总结一下CUDA程序的运行方式：我们在下面使用<strong>主机(host)</strong>表示CPU，使用<strong>设备(device)</strong>表示GPU。因此对于一个计算问题，我们需要在主机上准备好数据，然后复制到设备上，之后调用设备上的核函数(kernel function)进行计算，最终将设备上的计算结果复制到主机上。从而完成一次计算功能。对于复杂的任务，可以多次进行CPU-&gt;GPU-&gt;CPU-&gt;GPU-&gt;...的操作。</p>
<p>现在对于这个向量加法的程序是不是有点理解了？<code>cudaMalloc</code>的功能和<code>malloc</code>类似，但是是在GPU上申请显存，第一个参数是个指针的地址（不是一个指针），第二个参数是需要申请的内存的大小。申请完显存之后，会把显存的地址存入第一个参数指向的内存中，并返回一个状态码。但是，CPU上不能访问显存，因此这个指针在CPU上并没有什么实际意义，虽然我们可以把其中的地址打印出来，但是并不能访问其指向的存储空间。<code>cudaMemcpy</code>的功能与<code>memcpy</code>类似，参数分别表示：目的存储的地址，源存储地址，复制的数据大小，数据拷贝方向。数据拷贝方向有两种，<code>Host-&gt;Device</code>和<code>Device-&gt;Host</code>，分别用<code>cudaMemcpyHostToDevice</code>和<code>cudaMemcpyDeviceToHost</code>表示。 <code>cudaFree</code>的功能和<code>free</code>类似，用于释放GPU的显存。关于<code>vector_add</code>这个函数，它的参数是两个向量和结果的指针，这样就可以访问想要相加的向量的数据和结果的数据了。但是怎么知道当前需要计算向量的第几位的数值呢？参数中并没有给出。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> tid <span class="token operator">=</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">*</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>之前我们提到过<code>&lt;&lt;&lt;block_num, thread_num&gt;&gt;&gt;</code>表示指示核函数的工作方式，在这里<code>vector_add</code>这个函数实际上是被多个SP调用（实际上有<code>block_num * thread_num</code>这么多线程，GPU程序运行成千上万的线程都是很正常的，这和CPU程序有很大的不同），即同时被运行很多次。通过上述的代码是用来计算每个被运行的核函数的线程的id（具体的意思下一章会有介绍）。这样每个线程能够根据自己的线程id，读取自己应该处理的数据，计算并将结果写回显存。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span>tid <span class="token operator">&lt;</span> VECTOR_LENGTH<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    r<span class="token punctuation">[</span>tid<span class="token punctuation">]</span> <span class="token operator">=</span> v1<span class="token punctuation">[</span>tid<span class="token punctuation">]</span> <span class="token operator">+</span> v2<span class="token punctuation">[</span>tid<span class="token punctuation">]</span><span class="token punctuation">;</span>
    tid <span class="token operator">+=</span> BLOCK_NUM <span class="token operator">*</span> THREAD_NUM<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个循环使得这个程序对于任意长度的向量都可以做加法（可能需要把vector_length当成变量传入）。<code>tid &lt; VECTOR_LENGTH</code>这个判断是为了防止线程访问越界。</p>
<p>最后需要介绍的是CUDA的状态码，<code>cudaMalloc</code>，<code>cudaMemcpy</code>，<code>cudaFree</code>都有返回函数执行的状态码，但如果每次都检查这些状态码，则会有太多的重复代码，所以这里写了一个<code>CUDA_CALL</code>的宏定义，用来对函数调用的返回值进行检查。</p>
<p>至此，相信读者以及能够很清楚的理解这个向量加法的程序了，也能照这样子写出简单的CUDA程序了。现在我们唯一不了解的可能就是<code>&lt;&lt;&lt;block_num, thread_num&gt;&gt;&gt;</code>这种写法的具体意义和里面的参数的具体作用和设置。</p>
<p>下一章，小喵为您深入浅出CUDA线程模型。定让客官们不虚此行！</p>
<p><strong>转载请注明出处。</strong></p>
]]></content>
      <categories>
        <category>C++</category>
        <category>CUDA</category>
      </categories>
  </entry>
  <entry>
    <title>hexo的小技巧</title>
    <url>/2020/02/28/hexo-trick/</url>
    <content><![CDATA[<p>从WordPress转到Hexo没多久。这里记录一下遇到的问题和解决方案。</p>
<span id="more"></span>
<h2 id="一部署失败-jekyll-build失败">一、部署失败 Jekyll Build失败</h2>
<p>在Github上，部署之后，报了Jekyll build的错误。页面虽然上传到github了，但是实际的网页却没有变化。</p>
<p>查了很久，发现是需要先删除本地的<code>.deploy_git</code>。再继续<code>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</code>才行。</p>
<h2 id="二latex">二、Latex</h2>
<p>在Next主题，使用mathjax的话，最好使用pandoc这个渲染引擎。他对Latex支持最好，并且不会出现<code>_</code>，<code>*</code>的误识别。</p>
<p>pandoc这个软件需要单独安装，npm也需要安装相关的软件。所以是要安装两个东西。</p>
<h2 id="三next主题下图片的小标题显示不正确">三、Next主题下，图片的小标题显示不正确</h2>
<pre class="line-numbers language-md" data-language="md"><code class="language-md">![tag text](image url)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这中写法，<code>tag text</code>会显示在图像的居中正下方，看起来很好看。但是在pandoc引擎下，该效果就消失。原因是pandoc和图像标题的标签改掉了。需要在<code>root/_config.yml</code>和<code>root/themes/next/_config.xml</code>两个文件中均加上：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">pandoc</span><span class="token punctuation">:</span>
  <span class="token key atrule">extensions</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">'-implicit_figures'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在两个文件都加上是因为，<code>hexo server</code>和<code>hexo deploy</code>似乎会读取不同的配置，总之都加上肯定没错。</p>
<h2 id="四在首页隐藏文章">四、在首页隐藏文章</h2>
<p>使用<code>hexo-generator-index2</code>插件。</p>
<p>安装:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-index2 <span class="token parameter variable">-save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在<code>root/_config.yml</code>中加上:</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">index2_include_index</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">index2_generator</span><span class="token punctuation">:</span>
  <span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token number">8</span>
  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date
  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> tag hide
    <span class="token punctuation">-</span> category hide<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以后tags里面有<code>hide</code>，或者类别为<code>hide</code>的文章都不会显示在首页了。</p>
<h2 id="五中英文之间有空格">五、中英文之间有空格</h2>
<p>我们文章中间，中英文之间有一点空白，会显得更好看。一般我都是自己手动加上空格，然后发现有个插件 <code>pangu</code>。<code>Next</code>主题自己就集成了。</p>
<p>把他的<code>_config.yml</code>中开关打开：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">pangu</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>我所理解的架构</title>
    <url>/2021/11/16/how-I-understand-architecture/</url>
    <content><![CDATA[<blockquote>
<p>本来是打算写一篇介绍我目前工作中有意思的设计的博客，写着写着发现设计的知识点还是有点多的，因此这里单独增加一栏，用来不断的更新相关的内容。</p>
</blockquote>
<p>由于工作的变化，我从图像算法和框架，转向了服务端架构。做服务端架构，相较于算法和sdk框架，有着挺大的区别。而适应这一变化，确实需要花费挺长的时间，也学习到很多。</p>
<p>服务端的概念很多，很难在一本书上找到所有的答案，平时也只能自己多问多摸索。</p>
<p>这里总结了一下日常遇到的有意思的概念和技巧，希望耐心看完本文的你能够更快速的理解服务端的概念和开发过程。不至于在入职时每次讨论都一脸懵逼。</p>
<p>另外，我会在各部分的章节中，插入一些工作中遇到的真实案例。事实上，由于这些案例太过有意思，让我忍不住分享出来，所以才有了本文。（本文的目录也是根据这些案例归纳出来的。）</p>
<span id="more"></span>
<h2 id="架构即设计">架构即设计</h2>
<p>“架构”一词，在我换工作之后几乎每天都会听到，在我眼中是个高大上的存在。在具体接触到大家提到的架构设计的具体实践之后，我明白了一件事情，任何一个设计都可以认为是一种架构，而架构本身也有“好”、“坏”之分。因此，当发现很“挫”的设计的时候，我们可以说这是一个不合理的“架构”，或者是为了迎合当时的需求的特化的“架构”。</p>
<p>这里，我理解“架构”其实是“设计”的别名。</p>
<h2 id="架构解决的问题">架构解决的问题</h2>
<p>那么一个好的架构，需要解决什么问题呢？</p>
<p>前端架构，可能需要的是高性能、可拓展、易上手、兼容性、体积小等目标。后端架构可能是稳定性、高并发、一致性、快速迭代等目标。</p>
<p>问题不是单一的和明确的，针对不同的业务场景，我们需要随机应变。需要理解在每种设计下，带来的优势和弊端，就像刷算法题一样，我们会分析时间复杂度和空间复杂度。对于一个架构设计而言，我们也有许多的指标，比如：CPU、内存、带宽、磁盘、扇出、扩容、容灾等等。没有银弹，好的架构需要的解决的目标有十分清晰的认识。</p>
<p>在工作中，其实可以看到许多的架构的设计，比如最常见的RPC通信的参数的设计、正排服务的存储选型、服务发现的策略、一致性Hash的不均等。本系列的愿景是将这些有意思的问题和可能的方案，整理和分析。</p>
<h2 id="本系列的内容">本系列的内容</h2>
<p>本系列打算按以下方面进行介绍：</p>
<ul>
<li><strong>IDL</strong>，不同IDL的区别和优劣</li>
<li><strong>服务状态指标</strong>，对于服务程序，我们需要从哪些维度去观察</li>
<li><strong>服务拆分</strong>，高并发下，业务的水平和竖直拆分</li>
<li><strong>一致性Hash</strong>，和服务拆分相关联的技术</li>
<li><strong>降级</strong>，在突发情况下，比较常见的降级手段</li>
<li><strong>缓存</strong>，计算和空间的tradeoff</li>
<li><strong>案例</strong>，假如上面的内容都写完的话，那就介绍更多具体的案例</li>
</ul>
<p>由于水平有限，不同的部分不太可能面面俱到，这里只求能说清遇到的问题和方案，让大家在以后碰到类似的问题时，可以当做参考（正面或者负面的）。</p>
]]></content>
      <categories>
        <category>Architecture</category>
      </categories>
  </entry>
  <entry>
    <title>嗯，此刻一个非技术板块诞生了</title>
    <url>/2018/11/04/illustration-startup/</url>
    <content><![CDATA[<p>先贴上一张昨晚的作品，这样这篇博客会自动有个插图。：P</p>
<p><img src="2018-11-03.png" /></p>
<p>左边的男生是想象着随便画的，右边的女生其实是参考的一个插画画的，画的和原图一点都不像就是了。</p>
<span id="more"></span>
<p>之前一直在博客里面记录一下自己学习的技术技能，最近写博客的频率已经降到了一个很可怕的数值。一方面是工作的内容过于枯燥，没有什么新技术的使用，不知道要写些什么有意思的内容，另一方面就是工作确实太忙了，写一篇博客需要至少半天的时间，平时肯定是没有的，周末又要陪女票大人出去逛街。这真是现实和生活之间的巨大的矛盾啊，果然有句话是对的：成人的世界里，没有容易二字。实在伐开心。</p>
<p>之前，就一直比较痴迷动漫，想着有朝一日自己也能成为P站上的大触。为次也买了很多的教程和工具。但事实上，并没有因为花了钱就学到了东西，所以最重要的还是自己的不断地尝试和积累。o(╯□╰)o</p>
<p>so，这个版块的诞生就是为了记录一下自己的学习插画的过程，等到一年后再回首看看之前的作品，希望能真的感受到进步。当然，另一个更重要的目的是鞭笞自己，既然都把话放到博客上了，怎么着也得坚持个一年半载吧。</p>
<p>这个版块，我设想的内容应该主要有3个部分吧。</p>
<p>第一个部分，是自己的作品，因为是初学者，画的肯定很烂，这些黑历史啥的也要放上来。不断鞭笞自己，等到真有进步了，对比起来也会很开心吧。最近有个同事经常提到一个名词：延迟满足感。大致意思就是不能想要什么就得到什么，而是稍后再得到，这样能带来更大的满足感。好像挺有道理。</p>
<p>第二个部分，是学习到的小技巧，比如软件的使用啊，某些具体的绘画技法呀这样的。所谓温故而知新，好的东西都要记录下来，再三的翻看。说到这里，突然想到，买了半年的CSP，到现在其中的功能甚至是快捷键，我其实都没有好好掌握。真心好菜啊。</p>
<p>最后一部分，应该就是一个大触的作品了。P站上有一大堆，所以呢，这部分估计会记录一些大触的ID啥的吧，换句话说，就是存上大触们的地址。以后想临摹的时候，直接就能找到了。</p>
<p>最后，说一下我的装备吧。</p>
<p>首先，最简单的就是纸笔了，公司有很多A4纸，用来推公式和绘画都很好。用来无聊的时候练习一下手绘。</p>
<p>之后呢，我在宿舍买了一个二手的电脑，还被骗了，哭。总之是一台能用的电脑，除了有时候开不了机之外都还凑合吧。数位板买的是Wacom的影拓CTL-690中号的板子，是之前一直想买，后来在中关村正好看到专卖店，然后就顺手买了的。还附带了一个蓝牙的发射器，能够无线连接。感觉蓝牙的话，有一点点的延时，平时还是用有线连的。说实话，我到现在都没有怎么用过这个板子，对板绘很不习惯，线条都画不好。</p>
<p>软件使用的是CSP，全称Clip Studio Paint，国内引进了，叫优动漫，价格还行。之所以没有用Sai是因为没有MAC版。之后就是PS，这个买不起正版，希望以后有钱了能支持正版吧。</p>
<p>最后说一下，我现在的水平吧。真心很菜，每天就是逛逛B站看看神仙画画，淘宝上买了一些视频教程（并没有怎么看），一堆乱七八糟的书（我都想呵呵我自己），每周画画能有2次？可能吧。从昨天开始，我才能稍微适应一点数位板。对着电脑，眼还容易花，不知道是不是天天看电脑太多了。</p>
<p>现在就只会画头像，但实际上也只是入门级别的（可能还不到），上色？不可能的。对于动态，看了一些教程，要么是火柴人，要么是块状的组合。一点一点慢慢画，可能还能看吧。总是就是很菜很菜。</p>
<p>哈哈，希望我这个菜鸡能够坚持下去，祝好~</p>
]]></content>
      <categories>
        <category>Illustration</category>
      </categories>
  </entry>
  <entry>
    <title>要开始记笔记啦——《如何有效阅读一本书》</title>
    <url>/2020/04/02/it-is-time-to-take-notes/</url>
    <content><![CDATA[<p>最近读了《如何有效阅读一本书》。书中有一个观点，让我觉得可以一试。</p>
<p>记笔记可以不那么正规，可以天马行空，可以只记录比如“我觉得这个挺有意思”，“好像很有道理”之类的无营养的内容。也可以和书的内容完全无关。总之记录这一行为本身，就已经是不错的一件事情了。</p>
<p>做笔记，可以让我们对所阅读的书加深印象，不仅仅是对书的内容更好的掌握，也能最低限度的让我们更容易回想起，阅读这本书的感受，为啥要读这本书等等。让我们在阅读中留下一些痕迹。而且在若干年后，等我们在翻开旧笔记的时候，也会觉得很有趣，这份趣味就是过去送给现在的礼物。</p>
<p>所以，我打算最近看书的时候开始记录一下，阅读时的感受、想法等等。</p>
<p>首先要记录的就是看这本书的想法了。我觉得作者是个有些上年纪的老爷子，他介绍的很多方法，对于现代的我们来说过于古老，比如要看报纸的介绍，查百科全书，都让人觉得是上个世纪的东西。然而，书中给了一个2013年这个日期，有让人觉得似乎也没有那么遥远。可能是时代变化太快了吧。</p>
<p>之前看过一些新闻，说是现在的实体书店已经很难存活了。比如西单的图书馆似乎都关了，或者就转型成了网红打卡图书馆、咖啡馆，其卖点早已不是书籍。所以还是时代变了。</p>
<p>另外，对于日本（本书的作者来自日本），我最喜欢的是他们的动漫。日本文化中似乎很自然的捕捉和放大生活中的点点细节，从而让人有深的感悟。本书也是这样，但作为类似工具书的存在，细节太多反而让人找不到重点。</p>
<p>这里，最大的收获不在于书的内容，而是让我有了试图记笔记的念头。</p>
<p>对了，今天学习了github的<code>actions</code>功能，以后可以直接提交hexo的md文件，然后直接白嫖微软的服务器了！私有仓库每个月有2000 minutes的时长，而每次部署只需要44s，看起来就是无限长的时间啦。</p>
<p>还有一个发现是<code>GitNote</code>这个软件，一个记事本软件，在各pc平台都有，使用git做文件后台。但是试用了一下，感觉配色太白了，然后文件的创建位置啥的都不直白，莫名奇妙的退出然后不知道咋进入。感觉不是很好用。我好想也自己写一个笔记软件。或许可以学习一下<code>electron</code>？</p>
<p>所以这个博客以后就增加了新的模块——我的读书笔记~</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
  </entry>
  <entry>
    <title>C++和Go关于闭包递归调用的趣事</title>
    <url>/2024/01/05/lambda-recursive-call/</url>
    <content><![CDATA[<h2 id="一次codereview引发的讨论">一次CodeReview引发的讨论</h2>
<p>起因是这样的，Code Review的时候看到了下面这段Golang的代码：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"download"</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"download error"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	times <span class="token operator">:=</span> <span class="token number">3</span>
	<span class="token keyword">var</span> tryDownload <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
	tryDownload <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> times <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"exceed max times"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
		err <span class="token operator">:=</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">&#125;</span>
		times<span class="token operator">--</span>
		<span class="token keyword">return</span> <span class="token function">tryDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">tryDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"last times"</span><span class="token punctuation">,</span> times<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>大致意思是尝试下载三次。</p>
<p>由于被Golang的闭包坑过，所以当时给的Code Review的意见是改成<code>for loop</code>的方式，避免闭包捕获可能导致的问题。</p>
<span id="more"></span>
<p>当然在Golang中，这段代码是正确的。最终输出结果为：</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">download
download
download
last times 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出这里的<code>times</code>最终值是<code>0</code>，说明了Golang中的闭包使用的是<code>引用捕获</code>。</p>
<blockquote>
<p>进一步思考一下，如果Golang使用的是值捕获，每次<code>tryDownload</code>中的<code>times</code>都被重置为3，会有问题吗？</p>
</blockquote>
<p>总之，写成<code>for loop</code>的方式既简单又直观。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	times <span class="token operator">:=</span> <span class="token number">3</span>
	tryDownload <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>times <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> times <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
			err <span class="token operator">:=</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span>
			<span class="token punctuation">&#125;</span>
			times<span class="token operator">--</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"exceed max times"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">tryDownload</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"last times"</span><span class="token punctuation">,</span> times<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最终输出为：</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">download
download
download
last times 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="可是偏偏我复现不了">可是偏偏我复现不了</h2>
<p>现在回到之前的问题，如果使用值捕获的方式，是否真的会有问题？这里我们用C++重写一下类似的逻辑。这里我尝试在MacOS和Docker中均做了测试，结果一致。</p>
<p>首先先编写相同的<code>引用捕获</code>的情况:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">bool</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"download"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> tryDownload <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">mutable</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>times <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
		times<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token function">tryDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">tryDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"last times "</span> <span class="token operator">&lt;&lt;</span> times <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译和执行，和Golang完全一致： <pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">g++ a.cpp -std=c++11
./a.out 
download
download
download
last times 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>之后我们将<code>引用捕获</code>改为<code>值捕获</code>:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">```cpp
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> tryDownload <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">mutable</span> <span class="token punctuation">&#123;</span> <span class="token comment">// change the `&amp;` to `=`</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">tryDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"last times "</span> <span class="token operator">&lt;&lt;</span> times <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译和执行：</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">g++ a.cpp -std=c++11
a.cpp:11:42: warning: variable 'tryDownload' is uninitialized when used within its own initialization [-Wuninitialized]
    std::function&lt;bool()> tryDownload = [=]() mutable &#123;
                          ~~~~~~~~~~~    ^
1 warning generated.

./a.out
[1]    38581 segmentation fault  ./a.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在编译时，编译器智能的给出了警告，用值捕获的<code>tryDownload</code>对象没有初始化。在运行期果然出现了错误。</p>
<p>但是这个段错误其实并不是由于该对象未初始化导致的，这里我们直接注释掉对<code>tryDownload</code>的调用。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> tryDownload <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">mutable</span> <span class="token punctuation">&#123;</span> <span class="token comment">// change the `&amp;` to `=`</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>times <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
		times<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token function">tryDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token comment">// tryDownload();</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"last times "</span> <span class="token operator">&lt;&lt;</span> times <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译和执行，会得到和之前相同的段错误。</p>
<p>有趣的事情发生了。</p>
<h2 id="事情并不简单">事情并不简单</h2>
<p>要解释这个问题，首先需要理解lambda表达式到底做了什么，以及如何存储捕获的数据的。这里有一个例子，测试环境为gcc <code>(Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0</code>：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> p2 <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int64_t</span> q1 <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int64_t</span> q2 <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> no_cap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> no_cap2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int64_t</span> k <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> k<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> v4 <span class="token operator">=</span> <span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> v4v8 <span class="token operator">=</span> <span class="token punctuation">[</span>p1<span class="token punctuation">,</span> q1<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> v4v4v8v8 <span class="token operator">=</span> <span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> q1<span class="token punctuation">,</span> q2<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> r4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>p1<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> r4r8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>p1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q1<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> r4r4r8r8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>p1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q2<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> v4r4 <span class="token operator">=</span> <span class="token punctuation">[</span>p1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> v8r8 <span class="token operator">=</span> <span class="token punctuation">[</span>q1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q2<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> v4r8 <span class="token operator">=</span> <span class="token punctuation">[</span>p1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q1<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> v8r4 <span class="token operator">=</span> <span class="token punctuation">[</span>q1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(no_cap)    = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>no_cap<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(no_cap2)   = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>no_cap2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(v4)        = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(v4v8)      = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v4v8<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(v4v4v8v8)  = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v4v4v8v8<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(r4)        = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>r4<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(r4r8)      = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>r4r8<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(r4r4r8r8)  = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>r4r4r8r8<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(v4r4)      = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v4r4<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(v8r8)      = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v8r8<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(v4r8)      = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v4r8<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(v8r4)      = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v8r4<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行的输出为：</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">sizeof(no_cap)    = 1
sizeof(no_cap2)   = 1
sizeof(v4)        = 4
sizeof(v4v8)      = 12
sizeof(v4v4v8v8)  = 24
sizeof(r4)        = 8
sizeof(r4r8)      = 16
sizeof(r4r4r8r8)  = 32
sizeof(v4r4)      = 12
sizeof(v8r8)      = 16
sizeof(v4r8)      = 12
sizeof(v8r4)      = 16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>说明一下：</p>
<ol type="1">
<li><code>#pragma pack(1)</code>: 这句是为了限制编译器做字节对齐的优化，不然不好分析结果。该参数在GCC上会生效，在MacOS Clang中似乎有问题。</li>
<li><code>r4r4v8v8</code>: 其中<code>r4</code>表示用<code>引用(ref)捕获</code>的方式捕获4字节的对象，<code>v8</code>表示用<code>值(value)捕获</code>的方式捕获8字节的对象。</li>
<li><code>no_cap</code>: 大小为1是因为编译器对于占用空间为0的对象，会按照大小为1来处理，比如<code>struct &#123;&#125;</code>类型的对象，其大小也是1。</li>
</ol>
<p>不难知道，lambda表达式的<code>sizeof</code>其实是值捕获的<code>大小</code>总和加上引用捕获的对象的<code>指针大小</code>总和。本质上，lambda对象其实是一个可调用(callable)的对象。正如下面的两种写法。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> p1<span class="token punctuation">;</span>
<span class="token keyword">int64_t</span> q1<span class="token punctuation">;</span>

<span class="token keyword">auto</span> v4r8 <span class="token operator">=</span> <span class="token punctuation">[</span>p1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q1<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 等价于</span>

<span class="token keyword">struct</span> <span class="token class-name">lambda_v4r8</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> p1<span class="token punctuation">;</span>
  <span class="token keyword">int64_t</span> <span class="token operator">*</span>q1<span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">lambda_v4r8</span> my_v4r8<span class="token punctuation">&#123;</span>p1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q1<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以lambda表达式其实相当于一个语法糖，简化了我们自己的很多工作。编译器需要解析lambda表达式，生成一个可调用的类型，完成赋值。最终我们直接进行调用。</p>
<p>而<code>std::function</code>是另一个有意思的话题。他可以存放各类可调用的对象，包括函数指针，可调用的类，lambda表达式等。但是，他的size是固定的，在我的环境下，它的长度是32字节(不同编译器对其的实现并不相同。这里仅代表GCC)。</p>
<p>这里<code>std::function</code>用了<code>small function optimization</code>的技术，和<code>std::string</code> 一样。如果可调用的对象的大小很小，那么直接将这个对象的内存存到<code>std::function</code>中，如果对象很大，就单独new一份空间，然后copy进去。下面是网上的例子(<a href="https://shaharmike.com/cpp/lambdas-and-functions/">Link</a>)：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span> <span class="token comment">// for malloc() and free()</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">// replace operator new and delete to log allocations</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Allocating "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">" bytes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">malloc</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token keyword">operator</span> <span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token operator">></span> arr1<span class="token punctuation">;</span>
	<span class="token keyword">auto</span> lambda1 <span class="token operator">=</span> <span class="token punctuation">[</span>arr1<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Assigning lambda1 of size "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lambda1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> f1 <span class="token operator">=</span> lambda1<span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token operator">></span> arr2<span class="token punctuation">;</span>
	<span class="token keyword">auto</span> lambda2 <span class="token operator">=</span> <span class="token punctuation">[</span>arr2<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Assigning lambda2 of size "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lambda2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> f2 <span class="token operator">=</span> lambda2<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Output:</span>
<span class="token comment">// Assigning lambda1 of size 16</span>
<span class="token comment">// Assigning lambda2 of size 17</span>
<span class="token comment">// Allocating 17 bytes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出，如果表达式对象大小在16字节以内(含)，会直接使用自身的内存，如果超过的，会调用<code>new</code>单独分配。</p>
<p>剥离出<code>std::function</code>的源码可以看到。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">union</span> _Nocopy_types <span class="token punctuation">&#123;</span> <span class="token comment">// 16 bytes</span>
    <span class="token keyword">void</span><span class="token operator">*</span>       _M_object<span class="token punctuation">;</span> <span class="token comment">// 8 bytes</span>
    <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> _M_const_object<span class="token punctuation">;</span> <span class="token comment">// 8 bytes</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>_M_function_pointer<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8 bytes</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span>_Undefined_class<span class="token double-colon punctuation">::</span><span class="token operator">*</span>_M_member_pointer<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 16 bytes</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">union</span> _Any_data <span class="token punctuation">&#123;</span> <span class="token comment">// 16 bytes</span>
    _Nocopy_types _M_unused<span class="token punctuation">;</span> <span class="token comment">// 16 bytes</span>
    <span class="token keyword">char</span> _M_pod_data<span class="token punctuation">[</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>_Nocopy_types<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 16 bytes</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">enum</span> <span class="token class-name">_Manager_operation</span>
<span class="token punctuation">&#123;</span>
    __get_type_info<span class="token punctuation">,</span>
    __get_functor_ptr<span class="token punctuation">,</span>
    __clone_functor<span class="token punctuation">,</span>
    __destroy_functor
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">_Function_base</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 32 bytes</span>
    <span class="token keyword">typedef</span> <span class="token keyword">bool</span> <span class="token punctuation">(</span><span class="token operator">*</span>_Manager_type<span class="token punctuation">)</span><span class="token punctuation">(</span>_Any_data<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> _Any_data<span class="token operator">&amp;</span><span class="token punctuation">,</span>
				  _Manager_operation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _Any_data     _M_functor<span class="token punctuation">;</span> <span class="token comment">// 16 bytes</span>
    _Manager_type _M_manager<span class="token punctuation">;</span> <span class="token comment">// 8 bytes</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">function</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">private</span> <span class="token class-name">_Function_base</span></span> <span class="token punctuation">&#123;</span> <span class="token comment">// 32 bytes</span>
    <span class="token keyword">using</span> _Invoker_type <span class="token operator">=</span> <span class="token function">_Res</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Any_data<span class="token operator">&amp;</span><span class="token punctuation">,</span> _ArgTypes<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _Invoker_type _M_invoker<span class="token punctuation">;</span> <span class="token comment">// 8 bytes</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出一个<code>std::function</code>中有三个部分:</p>
<ol type="1">
<li><code>_M_invoker</code>: <code>8 bytes</code> 实际调用的函数（指针）</li>
<li><code>_M_functor</code>: <code>16 bytes</code> 用来存放函数对象的空间。该空间的读写由<code>_M_manager</code>来控制。</li>
<li><code>_M_manager</code>: <code>8 bytes</code> 指向内存管理的工具类的指针，支持4种操作。</li>
</ol>
<p>最后，我们再回到之前的代码：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> tryDownload <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">mutable</span> <span class="token punctuation">&#123;</span> <span class="token comment">// change the `&amp;` to `=`</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>times <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
		times<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token function">tryDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token comment">// tryDownload();</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"last times "</span> <span class="token operator">&lt;&lt;</span> times <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里，其实存在多个对象：</p>
<ol type="1">
<li><code>times</code>: 4字节</li>
<li><code>tryDownload</code>: 32字节</li>
<li><code>lambda表达式</code>: 这里值捕获了<code>times</code>和<code>tryDownload</code>（注意，不是捕获了自己，而是外面的<code>std::function</code>），因此是36字节。</li>
</ol>
<p>实际的执行顺序是:</p>
<ol type="1">
<li>定义了<code>tryDownload</code>对象，但未初始化。</li>
<li>构造lambda表达式对象
<ol type="1">
<li>复制<code>times</code></li>
<li>(Crash) 复制<code>tryDownload</code></li>
</ol></li>
<li>将lambda对象（36字节）赋值给<code>tryDownload</code>
<ol type="1">
<li>触发动态分配和函数拷贝机制</li>
</ol></li>
<li>调用<code>tryDownload</code></li>
</ol>
<p><img src="lambda-crash.png" /></p>
<p>用GDB查看Core的位置，可以发现是在<code>std::function</code>的拷贝构造函数的时候挂掉了。看起来应该是构造lambda表达式的值捕获阶段出现的问题（没有再更深入研究了）。</p>
<p>最后一个问题，为什么<code>引用捕获</code>不会有问题？由于<code>引用捕获</code>实际上只是保存了其指针，因此<code>std::function</code>是否初始化都不影响其地址，也不存在拷贝等问题。</p>
<h2 id="最后简单说两句">最后简单说两句</h2>
<p>工作之后，有意思的事情越来越少了，也没有足够的时间去思考和学习，真是一大憾事。希望看到这篇博客的你，不忘初心，指定你的新年的小目标吧。</p>
<p>这里顺便Cue一下鹏哥，看完之后快留个言说说感想。😁</p>
]]></content>
      <categories>
        <category>C++</category>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>本站的WordPress插件一览</title>
    <url>/2018/02/12/my-wordpress-plugins/</url>
    <content><![CDATA[<p>其实Jetpack这个插件里面已经提供了大量的工具。如果安装了这个插件，那么下面的很多插件都是可以不用安装的。不过在国内使用Jetpack这个插件有点麻烦。我这里就一直没有用，等换了国外的服务器之后，之前的博客的很多内容都得重新编辑，太麻烦了，所以干脆不用了。</p>
<span id="more"></span>
<h3 id="akismet-anti-spam">1. Akismet Anti-Spam</h3>
<p>网址：<a href="https://wordpress.org/plugins/akismet/">https://wordpress.org/plugins/akismet/</a></p>
<blockquote>
<p>由千百万人使用，Akismet可能是保护您的站点免受垃圾评论的世界上最好的方式。 您的站点已完全配置并受到不断的保护。</p>
</blockquote>
<p>这个插件可以很好的过滤掉垃圾的评论。</p>
<h3 id="captcha">2. Captcha</h3>
<p>网址：<a href="https://wordpress.org/plugins/captcha/">https://wordpress.org/plugins/captcha/</a></p>
<blockquote>
<p>This plugin allows you to implement super security captcha form into web forms.</p>
</blockquote>
<p>顾名思义，这个插件可以为用户登录，访客评论添加验证码的服务。用上验证码插件之后，基本上就没有什么垃圾评论了。最重要的是，这个验证码插件很有逼格！</p>
<h3 id="wp-super-cache">3. WP Super Cache</h3>
<p>网址：<a href="https://wordpress.org/plugins/wp-super-cache/">https://wordpress.org/plugins/wp-super-cache/</a></p>
<blockquote>
<p>WordPress的快速缓存插件。</p>
</blockquote>
<p>这个插件支持缓存我们网站上的很多资源，这样可以避免每次PHP都重新生成，所以能加速网站的响应。同时它支持CDN服务，比较麻烦的是它不支持直接把静态资源上传到CDN服务器，因此得我们自己上传。 这里，我写了一个小工具，可以使用FTP，同步本地的静态资源到远程服务器。项目地址：<a href="https://github.com/miaoerduo/FTPSync">https://github.com/miaoerduo/FTPSync</a> 注意，不要把php等文件上传了，这样会泄露你的密码。</p>
<h3 id="updraftplus-wordpress-backup-plugin">4. UpdraftPlus WordPress Backup Plugin</h3>
<p>网址：<a href="https://wordpress.org/plugins/updraftplus/">https://wordpress.org/plugins/updraftplus/</a></p>
<blockquote>
<p>Backup and restore: take backups locally, or backup to Amazon S3, Dropbox, Google Drive, Rackspace, (S)FTP, WebDAV &amp; email, on automatic schedules.</p>
</blockquote>
<p>用来备份网站的插件，数据库，服务器等都是不靠谱的，要想我们的网站长存，就得定期备份。BTW，我的网站更新频率很低，所以是一周一备份的。</p>
<h3 id="tinymce-advanced">5. TinyMCE Advanced</h3>
<p>网址：<a href="https://wordpress.org/plugins/tinymce-advanced/">https://wordpress.org/plugins/tinymce-advanced/</a></p>
<blockquote>
<p>Enables advanced features and plugins in TinyMCE, the visual editor in WordPress.</p>
</blockquote>
<p>强大的在线编辑器插件。以至于装上这个插件之后，我基本上都是在网页端写博客。</p>
<h3 id="crayon-syntax-highlighter">6. Crayon Syntax Highlighter</h3>
<p>网址：<a href="https://wordpress.org/plugins/crayon-syntax-highlighter/">https://wordpress.org/plugins/crayon-syntax-highlighter/</a></p>
<blockquote>
<p>支持多语言、不同主题，高亮来自URL、或本地文件或文章文本。</p>
</blockquote>
<p>代码高亮插件。我一直再用。截止到目前，已经有2年没有更新了。。。</p>
<h3 id="tablepress">7. TablePress</h3>
<p>网址：<a href="https://wordpress.org/plugins/tablepress/">https://wordpress.org/plugins/tablepress/</a></p>
<blockquote>
<p>为您的文章和页面嵌入美观且功能丰富的表格而不需要编写任何代码。</p>
</blockquote>
<p>WordPress内置的表格不好看，我都是用这个的。</p>
<h3 id="wp-quicklatex">8. WP QuickLaTeX</h3>
<p>网址：<a href="https://wordpress.org/plugins/wp-quicklatex/">https://wordpress.org/plugins/wp-quicklatex/</a></p>
<blockquote>
<p>Access to complete LaTeX distribution. Publish formulae &amp; graphics using native LaTeX syntax directly in the text. Inline formulas, displayed equations auto-numbering, labeling and referencing, AMS-LaTeX, TikZ, custom LaTeX preamble. No LaTeX installation required. Easily customizable using UI dialog. Actively developed and maintained. Visit QuickLaTeX homepage for more info.</p>
</blockquote>
<p>让WordPress支持Latex，这样就可以插入复杂的Latex公式了。</p>
<h3 id="wp-statistics">9. WP Statistics</h3>
<p>网址：<a href="https://wordpress.org/plugins/wp-statistics/">https://wordpress.org/plugins/wp-statistics/</a></p>
<blockquote>
<p>Complete WordPress Analytics and Statistics for your site!</p>
</blockquote>
<p>统计功能。每天看看自己博客的访问量，也会很开心。</p>
<h3 id="easy-custom-auto-excerpt">10. Easy Custom Auto Excerpt</h3>
<p>网址：<a href="https://wordpress.org/plugins/easy-custom-auto-excerpt/">https://wordpress.org/plugins/easy-custom-auto-excerpt/</a></p>
<blockquote>
<p>Auto Excerpt for your post on home, front_page, search and archive.</p>
</blockquote>
<p>我们一般的WordPress文章，文章的所有内容都会全部显示，这样很不友好。这个插件可以帮我们自动生成摘要。</p>
<h3 id="scalable-vector-graphics-svg">11. Scalable Vector Graphics (SVG)</h3>
<p>网址：<a href="https://wordpress.org/plugins/scalable-vector-graphics-svg/">https://wordpress.org/plugins/scalable-vector-graphics-svg/</a></p>
<blockquote>
<p>Scalable Vector Graphics are two-dimensional vector graphics, that can be both static and dynamic. This plugin allows your to easily use them on your site.</p>
</blockquote>
<p>让网站支持SVG图片。</p>
<h3 id="post-smtp">12. Post SMTP</h3>
<p>网址：<a href="https://wordpress.org/plugins/scalable-vector-graphics-svg/">https://wordpress.org/plugins/scalable-vector-graphics-svg/</a></p>
<blockquote>
<p>Email not reliable? Post SMTP is the first and only WordPress SMTP plugin to implement OAuth 2.0 for Gmail, Hotmail and Yahoo Mail. Setup is a breeze with the Configuration Wizard and integrated Port Tester. Enjoy worry-free delivery even if your password changes!</p>
</blockquote>
<p>让网站支持邮件服务。</p>
<h3 id="better-notifications-for-wordpress">13. Better Notifications for WordPress</h3>
<p>网址：<a href="https://wordpress.org/plugins/bnfw/">https://wordpress.org/plugins/bnfw/</a></p>
<blockquote>
<p>Supercharge your WordPress notifications using a WYSIWYG editor and shortcodes. Default and new notifications available. Add more power with Add-ons.</p>
</blockquote>
<p>这个插件可以让我们在文章被评论的时候，通过邮件来提醒我们。他依赖<strong>Post SMTP</strong>这个插件。</p>
<h3 id="all-in-one-wp-security">14. All In One WP Security</h3>
<p>网址：<a href="https://wordpress.org/plugins/all-in-one-wp-security-and-firewall/">https://wordpress.org/plugins/all-in-one-wp-security-and-firewall/</a></p>
<blockquote>
<p>All round best WordPress security plugin!</p>
</blockquote>
<p>强大的安全检查和防护的插件。</p>
<h3 id="to-top">15. To Top</h3>
<p>网址：<a href="https://wordpress.org/plugins/to-top/">https://wordpress.org/plugins/to-top/</a></p>
<blockquote>
<p>To Top plugin allows the visitor as well as admin to easily scroll back to the top of the page, with fully customizable options and ability to use image.</p>
</blockquote>
<p>装这个插件是因为有人留言说，有的博客太长，想一键回到顶端。这个插件的作用就是给页面生成一个按钮，可以一键返回顶端。</p>
<h3 id="yoast-seo">16. Yoast SEO</h3>
<p>网址：<a href="https://wordpress.org/plugins/wordpress-seo/">https://wordpress.org/plugins/wordpress-seo/</a></p>
<blockquote>
<p>The first true all-in-one SEO solution for WordPress, including on-page content analysis, XML sitemaps and much more.</p>
</blockquote>
<p>对网站进行SEO优化的插件，我主要用到他的sitemap的功能。这个插件在添加中文关键字的时候，总是提示我有错误，我也不知道为啥。</p>
<h3 id="relevanssi-a-better-search">17. Relevanssi – A Better Search</h3>
<p>网址：<a href="https://wordpress.org/plugins/relevanssi/">https://wordpress.org/plugins/relevanssi/</a></p>
<blockquote>
<p>This plugin replaces WordPress search with a relevance-sorting search. 增强WordPress的搜索功能。然而统计显示，我的博客基本上没有用搜索功能，囧。</p>
</blockquote>
<h3 id="really-simple-ssl">18. Really Simple SSL</h3>
<p>网址：<a href="https://wordpress.org/plugins/really-simple-ssl/">https://wordpress.org/plugins/really-simple-ssl/</a></p>
<blockquote>
<p>Lightweight plugin without any setup to make your site SSL proof</p>
</blockquote>
<p>让网站支持SSL。这个首先你的网站本身要有证书。这个插件只是为了解决HTTP和HTTPS之间的转换的问题。</p>
<h3 id="ultimate-category-excluder">19. Ultimate Category Excluder</h3>
<p>网址：<a href="https://wordpress.org/plugins/ultimate-category-excluder/">https://wordpress.org/plugins/ultimate-category-excluder/</a></p>
<blockquote>
<p>Easily exclude categories from your front page, feeds, archives, and search results.</p>
</blockquote>
<p>这个插件可以选择一个文章分类，让这个分类的文章不显示在首页。比如个人笔记啥的，不想放首页，就可以用这个插件。我用这个插件就是想把一些学习笔记啥的屏蔽一下，但后来又想到，我这个博客也没有多少人看，最终这个插件就是装上，但是没有实际用上。</p>
<h3 id="disable-google-fonts">20. Disable Google Fonts</h3>
<p>网址：<a href="https://wordpress.org/plugins/disable-google-fonts/">https://wordpress.org/plugins/disable-google-fonts/</a></p>
<blockquote>
<p>Disable enqueuing of Open Sans and other fonts used by WordPress from Google.</p>
</blockquote>
<p>国内很难或者不能加载Google字体，这个插件可以屏蔽掉网站对Google字体的依赖，从而进行加速。</p>
<h3 id="wp-user-rewards">21. WP User Rewards</h3>
<p>网址：<a href="https://wordpress.org/plugins/wp-user-rewards/">https://wordpress.org/plugins/wp-user-rewards/</a></p>
<blockquote>
<p>Adds user reward/donate fields to user profiles, including Wechat pay QRCode, Alipay QRCode, and PayPal link.</p>
</blockquote>
<p>给网站增加打赏功能。不得不承认，这个打赏的页面真心很丑。。。我还是改了一下才放到网站上的。当然有没有人打赏，这个就随缘了，我就是图个开心。</p>
<h3 id="wp-user-avatar">22. WP User Avatar</h3>
<p>网址：<a href="https://wordpress.org/plugins/wp-user-avatar/">https://wordpress.org/plugins/wp-user-avatar/</a></p>
<blockquote>
<p>Use any image from your WordPress Media Library as a custom user avatar. Add your own Default Avatar.</p>
</blockquote>
<p>一个可以自定义头像的插件。</p>
]]></content>
      <categories>
        <category>Miscellanea</category>
      </categories>
  </entry>
  <entry>
    <title>Python Trick</title>
    <url>/2018/01/25/python-trick/</url>
    <content><![CDATA[<p>这里主要记录一些Python使用上的小技巧，以后使用的时候可以方便查阅。不定期更新。</p>
<span id="more"></span>
<h3 id="豆瓣源">1. 豆瓣源</h3>
<p>使用pip为python安装一个第三方库的时候，由于国内可能不方便下载国外的库，这里可以使用豆瓣源来加速。只需要加上参数<code>-i https://pypi.douban.com/simple/</code>即可。比如安装scrapy就可以使用如下的指令:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token parameter variable">-i</span> https://pypi.douban.com/simple/ scrapy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="python环境管理">2. Python环境管理</h3>
<p>很多时候，我们可能需要用到不同版本的 <code>python</code>，比如2.7和3.4两个版本。这时候可以使用<code>virtualenv</code>，<code>virtualenvwrapper</code> 等工具。但实际上 <code>anaconda</code> 本身就已经支持 <code>python</code> 的版本控制了（我一直用的 <code>anaconda</code>）。比如我们要新建一个2.7版本的 <code>python</code> 环境，就只需要输入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create <span class="token parameter variable">-n</span> py27 <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">2.7</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样就创建了一个2.7版本的 <code>python</code>，且这个 <code>python</code> 环境的名字叫做py27。 我们如果需要使用这个环境只需要输入指令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> activate py27<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>之后就进入我们的全新的 <code>python</code> 环境了，想退出环境则输入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> deactivate py27<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果需要给我们新建的环境也安装 <code>anaconda</code> 的全套环境，则需要输入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> <span class="token parameter variable">-n</span> py27 anaconda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装过程是很慢的。我们如果需要给这个环境安装第三方库的话，可以激活这个环境然后使用pip安装，或者使用：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> <span class="token parameter variable">-n</span> py27 package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>来安装，<code>package_name</code> 就是我们要安装的库。 如果我们需要删除现有的环境，使用指令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda remove <span class="token parameter variable">-n</span> py27 <span class="token parameter variable">--all</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果不使用 <code>--all</code> ,而是指定一个库，则会删除该库，比如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda remove <span class="token parameter variable">-n</span> py27 package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>就会删除 <code>package_name</code> 对应的库。 最后一个指令是查看现有的 <code>python</code> 环境：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda info <span class="token parameter variable">-e</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="简单http服务">3. 简单HTTP服务</h3>
<p>使用 <code>Python</code> 可以通过命令创建HTTP服务器，这在局域网中传输文件，或者测试服务器连通等情况下十分有效。</p>
<p>在Python2中，使用如下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-m</span> SimpleHTTPServer <span class="token number">8000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样就可以创建一个监听本地8000端口的HTTP静态资源服务。 在Python3中，命令改成：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-m</span> http.server <span class="token number">8000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>效果同上。</p>
<h3 id="给python的类或对象动态添加成员函数">4. 给Python的类或对象动态添加成员函数</h3>
<p><a href="https://www.ianlewis.org/en/dynamically-adding-method-classes-or-class-instanc">https://www.ianlewis.org/en/dynamically-adding-method-classes-or-class-instanc</a></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Miscellanea</category>
      </categories>
  </entry>
  <entry>
    <title>Redis数据结构与对象</title>
    <url>/2021/08/06/redis-data-struct/</url>
    <content><![CDATA[<p>本文主要是《Redis设计与实现》的第一部分的总结，内容为数据结构和对象。这里类比了C++ STL中的数据结构，便于理解。</p>
<p>Redis是使用C语言编写的，C语言本身没有复杂的数据结构。因此Redis自己实现了一套底层的数据结构，这些数据结构作为工具被Redis的其他模块使用。</p>
<span id="more"></span>
<h2 id="简单动态字符串-sds">简单动态字符串 SDS</h2>
<p>SDS Simple Dynamic String，和<code>std::string</code>类似。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">sdshdr</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> len<span class="token punctuation">;</span>
    <span class="token keyword">int</span> free<span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>与C语言字符串相比的优点：</p>
<ul>
<li>常熟复杂度获取字符串长度</li>
<li>杜绝缓冲区溢出</li>
<li>减少修改字符串长度时所需的内存分配次数</li>
<li>二进制安全</li>
<li>兼容部分C字符串函数</li>
</ul>
<p>特性：</p>
<ul>
<li>有长度和容量的概念，存储二进制</li>
<li>动态扩容：小于1M，每次Double；大于1M，每次扩1M。</li>
<li>惰性释放</li>
</ul>
<h2 id="链表-linkedlist">链表 LinkedList</h2>
<p>LinkedList，这里使用双向链表来实现。然后通过函数指针支持List对象的拷贝、释放和匹配，这样就用C实现了和C++的<code>std::list&lt;T&gt;</code>相同的功能。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 单个节点的定义</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> listNode<span class="token punctuation">;</span>

<span class="token comment">// list定义</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">list</span> <span class="token punctuation">&#123;</span>
    listNode <span class="token operator">*</span>head<span class="token punctuation">;</span>
    listNode <span class="token operator">*</span>tail<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>dup<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 复制</span>
    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>free<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放</span>
    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>match<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 比较</span>
<span class="token punctuation">&#125;</span> list<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="字典-dict">字典 Dict</h2>
<p>Redis的字典是Hash表来实现的，相当于<code>std::unordered_map&lt;K, T, cmp&gt;</code> ，并且有更只能的Rehash操作。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 哈希表</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictht</span> <span class="token punctuation">&#123;</span>
    dictEntry <span class="token operator">*</span><span class="token operator">*</span>table<span class="token punctuation">;</span>  <span class="token comment">// 哈希表数组</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">;</span>  <span class="token comment">// 哈希表大小</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> sizemask<span class="token punctuation">;</span>  <span class="token comment">// 哈希表大小掩码，用于计算索引值，值为size - 1</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> used<span class="token punctuation">;</span>  <span class="token comment">// 该哈希表已有节点数量</span>
<span class="token punctuation">&#125;</span> dictht<span class="token punctuation">;</span>

<span class="token comment">// 哈希表的一项</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>
    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">;</span>
        <span class="token keyword">uint64_t</span> u64<span class="token punctuation">;</span>
        <span class="token keyword">int64_t</span> s64<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> v<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> dictEntry<span class="token punctuation">;</span>

<span class="token comment">// Redis的字典结构</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dict</span> <span class="token punctuation">&#123;</span>
    dictType <span class="token operator">*</span>type<span class="token punctuation">;</span> <span class="token comment">// 类型特定函数，用于实现多态</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">;</span> <span class="token comment">// 私有数据</span>
    dictht ht<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// 两个hash表，另一个用于扩容</span>
    <span class="token keyword">int</span> rehashidx<span class="token punctuation">;</span>    <span class="token comment">// rehash索引，当rehash不在进行时，值为-1</span>
<span class="token punctuation">&#125;</span> dict<span class="token punctuation">;</span>

<span class="token comment">// 类型特定函数，对于key和val都实现了拷贝和析构函数，支持key的比较。</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictType</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>hashFunction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>keyDup<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>valDup<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>keyCompare<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>keyDestructor<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>valDestructor<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> dictType<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>特性：</p>
<ul>
<li>多态，支持任意的key和val类型</li>
<li>根据负载因子，决定hash表的扩容和缩容。
<ul>
<li>load_factor = ht[0].used / ht[0].size</li>
<li>缩容：load_factor &lt; 0.1</li>
<li>扩容：load_factor ≥ 5</li>
</ul></li>
<li>渐进式rehash，为了优化rehash的时间，每次只rehash一部分（rehashidx，hash完会加一）。最终将ht[0] rehash到ht[1]。最后ht[1]变成ht[0]，ht[0]释放变成ht[1]，重置rehashidx。</li>
</ul>
<h2 id="跳跃表-skiplist">跳跃表 SkipList</h2>
<p>跳跃表是一种有序数据结构，它通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的。支持平均O(logN)、最坏O(N)复杂度的查找，还可以通过顺序性操作来批量处理节点。</p>
<p>可以直接参考 <a href="https://redisbook.readthedocs.io/en/latest/internal-datastruct/skiplist.html">Redis设计与实现 skiplist章节</a></p>
<p><img src="skiplist.png" alt="Redis SkipList" /></p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>backward<span class="token punctuation">;</span>  <span class="token comment">// 后退指针</span>
    <span class="token keyword">double</span> score<span class="token punctuation">;</span> <span class="token comment">// 分值</span>
    robj <span class="token operator">*</span>obj<span class="token punctuation">;</span>  <span class="token comment">// 成员对象</span>
    <span class="token comment">// 层</span>
    <span class="token keyword">struct</span> <span class="token class-name">zskiplistLevel</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>forward<span class="token punctuation">;</span>  <span class="token comment">// 前进指针</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> span<span class="token punctuation">;</span> <span class="token comment">// 跨度</span>
    <span class="token punctuation">&#125;</span>  level<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> zskiplistNode<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="整数集合-intset">整数集合 IntSet</h2>
<p>整数集合(intset)是Redis用于保存整数值的集合抽象数据结构。可以保存类型为int16_t、int32_t、int64_t的整数值，并且保证集合不重复。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">intset</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">uint32_t</span> encoding<span class="token punctuation">;</span>  <span class="token comment">// 编码方式</span>
    <span class="token keyword">uint32_t</span> length<span class="token punctuation">;</span>  <span class="token comment">// 集合包含的元素数量</span>
    <span class="token keyword">int8_t</span> contents<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 保存元素的数组</span>
<span class="token punctuation">&#125;</span> intset<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里encoding表示编码方式，也就是contents里面存的数据的类型。有INTSET_ENC_INT16/INTSET_ENC_INT32/INTSET_ENC_INT64三种。</p>
<p>contents存放具体的数据，并且是有序存储，所以添加一个数字，极端情况下需要挪动所有的数字。</p>
<p>特性：</p>
<ol type="1">
<li>有序数组</li>
<li>通过encoding的方式，支持多种整数类型</li>
<li>如果整数全都可以用INT16存储，则编码方式即INTSET_ENC_INT16（INT32也相同）。</li>
<li>自动升级，如果添加的整数超过之前编码的范围，则整个集合所有的元素的升级。</li>
<li>不支持降级，即如果当前编码为INT64，删掉所有int64_t的元素，剩下的全部在int16_t的范围的话集合也不会降级编码方式。</li>
<li>contents的容量变化使用realloc</li>
</ol>
<h2 id="压缩列表-ziplist">压缩列表 ZipList</h2>
<p>压缩列表是存储上更节省的一个列表。它是一块紧凑的内存，前面的字节记录了压缩列表的容量等信息，后面跟上每一个具体的数据，每种数据也是按照特定的编码方式组织的。因此相比于链表等数据结构，这里做到了极简。</p>
<p>这里直接粘贴了原文的代码。</p>
<p>ZipList的构成</p>
<pre class="line-numbers language-none"><code class="language-none">area        |&lt;---- ziplist header ----&gt;|&lt;----------- entries -------------&gt;|&lt;-end-&gt;|

size          4 bytes  4 bytes  2 bytes    ?        ?        ?        ?     1 byte
            +---------+--------+-------+--------+--------+--------+--------+-------+
component   | zlbytes | zltail | zllen | entry1 | entry2 |  ...   | entryN | zlend |
            +---------+--------+-------+--------+--------+--------+--------+-------+
                                       ^                          ^        ^
address                                |                          |        |
                                ZIPLIST_ENTRY_HEAD                |   ZIPLIST_ENTRY_END
                                                                  |
                                                         ZIPLIST_ENTRY_TAIL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一个 ziplist 可以包含多个节点，每个节点可以划分为以下几个部分：</p>
<pre class="line-numbers language-none"><code class="language-none">area        |&lt;------------------- entry --------------------&gt;|

            +------------------+----------+--------+---------+
component   | pre_entry_length | encoding | length | content |
            +------------------+----------+--------+---------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>每个Entry的编码有许多的细节，这里就不记录了，感兴趣可以看看原文。</p>
<h2 id="对象">对象</h2>
<p>前面介绍了Redis封装的一些基础的数据结构。我们操作Redis的数据结构其实并不是前面提到的。比如LLEN，获取列表的长度，这里的列表其实可能是前面提到的ZipList或者LinkedList。</p>
<p>面向我们用户的数据结构，Redis定义为对象。包含：</p>
<ol type="1">
<li>字符串对象 REDIS_STRING</li>
<li>列表对象 REDIS_LIST</li>
<li>哈希对象 REDIS_HASH</li>
<li>集合对象 REDIS_SET</li>
<li>有序集合对象 REDIS_ZSET</li>
</ol>
<p>Redis对象的定义：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisObject</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">unsigned</span> type<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>  <span class="token comment">// 类型，也就是上面的5种对象之一</span>
    <span class="token keyword">unsigned</span> encoding<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>  <span class="token comment">// 编码，即使用的底层的存储结构，也就是上面的基础数据结构</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>  <span class="token comment">// 指向底层实现数据结构的指针</span>
<span class="token punctuation">&#125;</span> redisObject<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr class="header">
<th>类型</th>
<th>编码</th>
<th>对象</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>REDIS_STRING</td>
<td>REDIS_ENCODING_INT</td>
<td>使用整数值实现的字符串对象</td>
</tr>
<tr class="even">
<td>REDIS_STRING</td>
<td>REDIS_ENCODING_EMBSTR</td>
<td>使用embstr编码的简单动态字符串实现的字符串对象</td>
</tr>
<tr class="odd">
<td>REDIS_STRING</td>
<td>REDIS_ENCODING_RAW</td>
<td>使用简单动态字符串实现的字符串对象</td>
</tr>
<tr class="even">
<td>REDIS_LIST</td>
<td>REDIS_ENCODING_ZIPLIST</td>
<td>使用压缩列表实现的列表对象</td>
</tr>
<tr class="odd">
<td>REDIS_LIST</td>
<td>REDIS_ENCODING_LINKEDLIST</td>
<td>使用双端链表实现的列表对象</td>
</tr>
<tr class="even">
<td>REDIS_HASH</td>
<td>REDIS_ENCODING_ZIPLIST</td>
<td>使用压缩列表实现的哈希对象</td>
</tr>
<tr class="odd">
<td>REDIS_HASH</td>
<td>REDIS_ENCODING_HT</td>
<td>使用字典实现的哈希对象</td>
</tr>
<tr class="even">
<td>REDIS_SET</td>
<td>REDIS_ENCODING_INTSET</td>
<td>使用整数集合实现的集合对象</td>
</tr>
<tr class="odd">
<td>REDIS_SET</td>
<td>REDIS_ENCODING_HT</td>
<td>使用字典实现的整数集合对象</td>
</tr>
<tr class="even">
<td>REDIS_ZSET</td>
<td>REDIS_ENCODING_ZIPLIST</td>
<td>使用压缩列表实现的有序集合对象</td>
</tr>
<tr class="odd">
<td>REDIS_ZSET</td>
<td>REDIS_ENCODING_SKIPLIST</td>
<td>使用跳跃表和字典实现的有序集合对象</td>
</tr>
</tbody>
</table>
<ol type="1">
<li>字符对象
<ol type="1">
<li>INT编码：long可以保存的整数</li>
<li>EMBSTR：
<ol type="1">
<li>短的字符串</li>
<li>短的浮点数，会转换成字符串</li>
</ol></li>
<li>RAW
<ol type="1">
<li>long存不下的整数</li>
<li>长的浮点数</li>
<li>长的字符串</li>
</ol></li>
</ol></li>
<li>列表对象
<ol type="1">
<li>ZIPLIST：每一项字符串长度均小于64字节，元素个数小于512个。</li>
<li>LINKEDLIST：不满足上面的都用双向链表。</li>
</ol></li>
<li>哈希对象
<ol type="1">
<li>ZIPLIST：键值对的长度均小于64字节且数量小于512。
<ol type="1">
<li>Key1 Val1 Key2 Val2 ... 的方式存放，每对KV都是连续存放的。</li>
</ol></li>
<li>HT 哈希表：其他情况下用Hash表。</li>
</ol></li>
<li>集合对象
<ol type="1">
<li>INTSET：所有元素都是整数且数目小于512</li>
<li>HT：其他情况</li>
</ol></li>
<li>有序集合
<ol type="1">
<li>使用Hash表和ziplist或者skiplist实现
<ol type="1">
<li>Hash表用于快速查找key对应的元素。</li>
<li>ziplist/skiplist 用于维护顺序。</li>
</ol></li>
<li>元素数小于128且元素长度小于64字节时使用ziplist，其他情况使用skiplist。</li>
</ol></li>
</ol>
]]></content>
      <categories>
        <category>C++</category>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Redis MGET延时排查</title>
    <url>/2025/03/24/redis-mget-latency/</url>
    <content><![CDATA[<p>这是最近一个同事在开发中遇到的问题，觉得很有意思。记录了下来。</p>
<p>问题如下：</p>
<p>线上的服务，每个请求需要从Redis中 mget 300个key。发现P99延时高达20ms。不满足上线要求。</p>
<p>最后我们从集群负载，大Key问题，Proxy任务数以及分片的角度进行的分析。</p>
<span id="more"></span>
<p>以下是我们的排查过程：</p>
<h3 id="redis和redis-proxy的负载">Redis和Redis Proxy的负载</h3>
<p>由于数据量比较大，使用了Redis Cluster + Proxy 的方式来部署。目前负载较低。</p>
<h3 id="大key问题">大Key问题</h3>
<p>如果Redis中的Key、Val比较大，则容易出现大Key问题。该使用场景，key是比较短的字符串，val是浮点数（字符串），应该不存在大Key问题。</p>
<h3 id="redis-proxy的单个任务过大">Redis Proxy的单个任务过大</h3>
<p>不知道这是否是所在公司特有的问题，之前在使用zset存储数据的时候，在线使用pipeline + zrange的方式获取数据，pipeline中的command过多（100个）的时候，延时会很高。但是如果拆分成多个pipeline并发调用，每个仅包含几十个command的时候，延时就十分正常。推测这里的proxy的实现应该有问题（虽然但是，有问题也没用，中间件团队并不会真的优化和支持）。</p>
<p>鉴于上述反例，我们将300个key拆分为2-10组，然后并发访问，每组都是一个mget。进行了测试。在2组的时候，似乎延时有点改善，但不大。10的时候甚至出现的劣化。</p>
<p>显然分组越多的话，对Redis Proxy的扇出数就会越多，也会影响P99。但是从上述的表现可以发现，单组的key的数目对整体延时影响不大。</p>
<h3 id="redis分片过多">Redis分片过多</h3>
<p>随后，我们使用<code>CLUSTER INFO</code>命令查看了集群的分片数。发现高达50个！如果300个key分布均匀的话，那么一次请求会在Redis Proxy中被拆分成50个请求，然后每个请求包含6个key。</p>
<p>验证分片数对延时的影响：</p>
<p>我们离线编写的单测的代码。运行前，在redis中写入300个key，其中key的格式为<code>sprintf("test_&#123;%d&#125;_xxx_%d", id % shard, id)</code>。在Redis中，通过<code>&#123;&#125;</code>指定计算hash的seed。这样我们就能通过控制shard的值，来模拟分片数。最终发现（这里的测试的key数目很少，结果只能简单看看）：</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">shard 1 avg: 683.379µs p99: 2.385465ms
shard 2 avg: 723.663µs p99: 4.276358ms
shard 4 avg: 829.423µs p99: 5.022665ms
shard 8 avg: 951.461µs p99: 6.656493ms
shard 16 avg: 1.249993ms p99: 8.688271ms
shard 32 avg: 1.510463ms p99: 9.577033ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>显然分片数会直接影响到mget的性能。</p>
<p>那么下一步优化的核心就是如何减少分片数。假定我们最终的分片数是10.</p>
<p>可行的方案：</p>
<ol type="1">
<li>在读写redis的时候都在key中的hash的部分手动取模，模取10。
<ol type="1">
<li>优点：
<ol type="1">
<li>修改简单</li>
<li>可以直接复用Redis，不需要重新申请资源</li>
</ol></li>
<li>缺点：
<ol type="1">
<li>该集群会有10个节点（假定slot不同）的实例负载会比其他的高，埋了个坑。</li>
<li>如果将来将模修改为20的话，需要写入端先双写，然后服务端再修改代码，发版</li>
</ol></li>
</ol></li>
<li>缩容到10个分片，为了应对高QPS，每个分片多几个副本。
<ol type="1">
<li>优点：
<ol type="1">
<li>不需要给redis key特殊处理</li>
<li>如果分片数增加，可以依赖redis自身的机制，无缝迁移</li>
</ol></li>
<li>缺点：
<ol type="1">
<li>通过master-slave模式，会限制写入的吞吐</li>
<li>SRE在扩容时，可能会直接扩了shard，而不是新增副本，导致延时上涨</li>
</ol></li>
</ol></li>
<li>独立一个Redis集群，控制分片数
<ol type="1">
<li>该Redis仅给我们当前的服务使用，这样整体的写QPS就不大。但是还是需要和SRE进行约定。</li>
</ol></li>
</ol>
<p>最终，我们选择了方案3，离线任务使用自己的Redis，仅在最终写入数据的时候才双写到新集群。在线侧仅读取新集群。</p>
<p>注意，这里由于我们的key的总规模是千万级别，但是QPS和KPS很高，所以才适合该方式。对于其他的应用场景不一定能直接参考。</p>
]]></content>
  </entry>
  <entry>
    <title>一、Redis基本操作——String(原理篇)</title>
    <url>/2016/04/25/redis-string-principles/</url>
    <content><![CDATA[<blockquote>
<p>小喵的唠叨话：最近京东图书大减价，小喵手痒了就买了本《Redis设计与实现》[<a href="http://redisbook.com/">1</a>]来看看。这里权当小喵看书的笔记啦。这一系列的模式，主要是先介绍Redis的实现原理（可能很大一部分会直接照搬原作者的描述），加上小喵自己的想法，之后配合Redis官网上的各种相关的操作命令（原书上貌似没有很多的介绍命令）。</p>
</blockquote>
<p>本章介绍Redis中最常用到的字符串(String)。</p>
<span id="more"></span>
<h2 id="redis的字符串string的实现">Redis的字符串(String)的实现</h2>
<p>小喵之前有看到过《Redis设计与实现》的一部分章节。这是第一章的内容，小喵也是因为看了这一章的内容，才决定要买本仔细研究的。</p>
<p>首先，我们知道Redis是由C语言编写的，以高效和轻量著称。而C语言中的字符串是怎么实现的呢？字符数组。 比如一个简单的字符串"hello world"，其实是一个如下的字符的数组：<code>['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd', '\0']</code>，最后的一个'\0'是空字符，表示字符串的结尾。</p>
<p>Redis由于各种原因，并没有直接使用了C语言的字符串结构，而是对其做了一些封装，得到了自己的简单动态字符串(simple dynamic string, SDS)的抽象类型。Redis中，默认以SDS作为自己的字符串表示。只有在一些字符串不可能出现变化的地方使用C字符串。</p>
<p><strong>SDS的定义</strong>如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">sdshdr</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 用于记录buf数组中使用的字节的数目</span>
    <span class="token comment">// 和SDS存储的字符串的长度相等</span>
    <span class="token keyword">int</span> len<span class="token punctuation">;</span>
    <span class="token comment">// 用于记录buf数组中没有使用的字节的数目</span>
    <span class="token keyword">int</span> free<span class="token punctuation">;</span>
    <span class="token comment">// 字节数组，用于储存字符串</span>
    <span class="token keyword">char</span> buf\<span class="token punctuation">[</span>\<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出来，SDS的结构并不复杂:</p>
<ul>
<li>buf是一块可用的内存空间，通常大小会大于等于需要存储的字符串的大小（大于？为什么要大于呢？读者可以思考一下）。</li>
<li>len表示字符串的长度，也表示buf中已经被使用的空间的大小。</li>
<li>free表示buf中没有被使用的空间的大小。</li>
<li>要注意的是，buf的大小等于len+free+1，其中多余的1个字节是用来存储'\0'的。</li>
</ul>
<p>那么这么封装到底有什么好处呢？我们一点一点剖析。</p>
<h3 id="常数复杂度获取字符串长度">1，常数复杂度获取字符串长度</h3>
<p>在C语言中的字符串只是简单的字符的数组，当使用strlen获取字符串长度的时候，C语言内部其实是直接顺序遍历数组的内容，找到对应的<code>'\0'</code>对应的字符，从而计算出字符串的长度。显然这个算法复杂度和字符串的长度成正比，即<code>O(N)</code>。而对于SDS来说，只需要访问SDS的len属性就能得到字符串的长度，复杂度为<code>O(1)</code>。这样，获取字符串长度的操作就不会成为Redis的瓶颈（当然len的作用不止这么简单，后面还会介绍别的）。</p>
<h3 id="杜绝缓冲区溢出">2，杜绝缓冲区溢出</h3>
<p>我们知道<code>C++</code>里面的字符串使用了<code>STL</code>的<code>string</code>类型，我们开发者不太需要关注内存的分配和释放的过程。但是Redis是C语言编写的，并没有这么方便的数据类型。对于字符串的拼接、复制等操作，C语言开发者必须确保目标字符串的空间足够大，不然就会出现溢出的情况。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
<span class="token function">strcat</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">" world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">strcpy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>上面的三句代码，就是C语言的字符串拼接和复制的使用，但是明显出现了缓冲区溢出的问题。字符数组a的长度是10，而<code>"hello world"</code>字符串的长度为11，则需要12个字节的空间来存储（不要忘记了'\0'）。</p>
<p>然后，我们看看Redis的SDS是怎么处理字符串修改的这种情况。</p>
<p>当使用SDS的API对字符串进行修改的时候，API内部第一步会检测字符串的大小是否满足。如果空间已经满足要求，那么就像C语言一样操作即可。如果不满足，则拓展buf的空间，使得满足操作的需求，之后再进行操作。每次操作之后，len和free的值会做相应的修改。</p>
<p>这就是SDS的全部的高明之处了吗？当然不！</p>
<p>当API发现SDS的buf的容量不够的时候，并不是简单申请正好适合的大小，而是额外申请了一倍的空间！我们以sds的API <code>sdscat</code> 函数为例，该函数实现了sds的拼接的功能。</p>
<p>下面的例子是<code>"hello"</code> 和<code>" world"</code>的拼接的过程。</p>
<p><img src="sds-before.png" alt="修改之前的sds" /></p>
<center>
图1 sdscat执行之前的sds
</center>
<p><img src="sds-after.png" alt="修改之后的sds" /></p>
<center>
图2 sdscat执行之后的sds
</center>
<p>这里的buf的容量是23（free + len + 1）。为什么要这么做呢？耐心向下看吧。</p>
<h3 id="减少修改字符串时带来的内存重分配次数">3，减少修改字符串时带来的内存重分配次数</h3>
<p>我们之前说到，对于一个N长的字符串，C语言中底层是一个N+1长的字符数组（有一个字节存放空字符）。C字符串的长度和底层数组之间的长度存在着这样的关系，因此当进行字符串的操作而导致字符串长度发生变化的时候，需要对内存进行重新分配。</p>
<ul>
<li>如果操作会增长字符串，那么在执行之前，就需要进行内存分配扩充底层数组的大小。</li>
<li>如果是缩短字符串的操作，则需要释放额外的内存</li>
</ul>
<p>注：这是书中的意思，但小喵觉得如果字符串缩小的话，其实并不用立刻释放内存，如果字符串是malloc出来的话，需要释放的直接free就可以，也不需要给定空间的大小，所以不会出现内存泄露。当然，也可能Redis里面是用别的方式实现，这样小喵就不懂了）。</p>
<p>对于一般的程序而言，如果修改字符串的操作并不是特别常出现，那么每次修改都重新分配一下内存也是可以接受的。但是Redis作为一个数据库，其读写速度，数据修改频率都被要求达到很高的效率。因此这种低效的方式并不适合Redis。</p>
<p>为了避免C字符串的这些弊端，SDS通过<strong>未使用空间</strong>解除了字符串长度和底层数组长度之间的关系。也就是之前说的buf的长度为len和free之和（再加1）。数字里面可以包含未使用的空间，大小用free表示。</p>
<p>Redis主要通过以下两种策略来处理内存问题：</p>
<h4 id="i-空间预分配">i) 空间预分配</h4>
<p>这种方式用于处理字符串长度增加的问题。如果对字符串的修改使得字符串的长度增加，API首先会判断buf的空间大小是否满足，如果满足则直接操作，如果不满足，则进行如下操作：</p>
<p>如果对SDS进行修改之后的，SDS的长度（即len的值）小于1MB。程序将额外分配和len一样大小的未使用空间。以上面的"hello" + " world"的操作为例。在这个例子中"hello"的len是5（不考虑'\0')，修改之后的字符串"hello world"长度为11，那么新的SDS的buf的容量就是11*2+1。其中len和free都是11，多余的1字节用来存储'\0'。</p>
<p>如果对SDS修改之后的长度大于1MB，那么程序会分配1MB的未使用空间。比如原数据是5MB，修改之后需要6MB的空间，进行修改的操作后，buf的实际空间应该是7MB，其中len为6MB，free为1MB。</p>
<p>那么这些未使用空间能够做什么呢？为什么根据SDS的修改会的大小会有两种不同的分配原则呢？</p>
<p>小喵是这么认为的，如果数据被更改，则说明这个数据很可能会被再次更改，如果能够提前分配多余的空间，那么下一次变化的时候很可能就不需要再次分配空间了。如果数据比较小（&lt;1MB）的时候，可以分配等大的未使用空间。但是如果数据已经很大的时候（&gt;1MB），再分配同等大小的内存会显得十分浪费，毕竟不能确保这个字符串一定会被再次修改，所以只额外分配1MB的空间。</p>
<p>通过这种策略，SDS可以做到N次修改，最多进行N次内存分配。而C字符串在N次修改则一定要进行N次内存分配。一个是至多N次，一个是一定N次。用小喵的脑袋想，也觉得SDS这个策略简单、粗暴、高效。</p>
<h4 id="ii-惰性空间释放">ii) 惰性空间释放</h4>
<p>当执行字符串长度缩短的操作的时候，SDS并不直接重新分配多出来的字节，而是修改len和free的值（len相应减小，free相应增大，buf的空间大小不变化）。通过惰性空间释放，可以很好的避免缩短字符串需要的内存重分配的情况。而且多余的空间也可以为将来可能有的字符串增长的操作做优化。</p>
<p>当然，SDS也提供直接释放未使用空间的API，在需要的时候，也能真正的释放掉多余的空间。</p>
<h3 id="二进制安全">4，二进制安全</h3>
<p>C字符串中的字符必须符合某种编码（比如ASCII），并且字符串除了末尾之外不能出现空字符，否则会被程序认为是字符串的结尾。这就使得C字符串只能存储文本数据，而不能保存图像，音频等二进制数据。（这里，小喵的观点是不同的，小喵本人是做图像的，opencv等的库，都是使用unsigned char*来存储图像的数据。我们完全可以把字符数组看成一堆内存，存放任何数据都可以）</p>
<p>使用SDS就不需要依赖控制符，而是用len来指定存储数据的大小。同时所有的SDS操作的API都是二进制安全的（binary-safe），所有的SDS API都会以处理二进制的方式来处理SDS的buf的数据。程序不会对buf的数据做任何限制、过滤或假设，数据写入的时候是什么，读取的时候依然不变。</p>
<p>这也是我们将SDS的buf属性程序字节数组的原因，Redis不是使用这个数组来保存字符，而是储存一系列二进制数据。</p>
<h3 id="兼容部分c字符串函数">5，兼容部分C字符串函数</h3>
<p>由于SDS的buf的定义和C字符串完全相同，因此很多的C字符串的操作都是适用于SDS-&gt;buf的。比如当buf里面存的是文本字符串的时候，printf函数，也完全可以试用。这样，Redis就不需要为所有的字符串的处理编写自己的函数，大多数通过调用C语言的函数就可以。</p>
<h2 id="总结">总结</h2>
<table>
<thead>
<tr class="header">
<th>C字符串</th>
<th>SDS</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>获取字符串长度的复杂度为O(N)</td>
<td>获取字符串长度的复杂度为O(1)</td>
</tr>
<tr class="even">
<td>API是不安全的，可能会造成缓冲区溢出</td>
<td>API是安全的，不会造成缓冲区溢出</td>
</tr>
<tr class="odd">
<td>修改字符串长度N次必然需要执行N次内存重分配</td>
<td>修改字符串长度N次最多需要执行N次内存重分配</td>
</tr>
<tr class="even">
<td>只能保存文本数据</td>
<td>可以保存文本或者二进制数据</td>
</tr>
<tr class="odd">
<td>可以使用所有库中的函数</td>
<td>可以使用一部分库的函数</td>
</tr>
</tbody>
</table>
<p>以上则是Redis的string结构的原理部分。下一章我们会介绍一些string操作的redis命令。</p>
<p><strong>转载请注明出处。</strong></p>
<p>参考： [1] <a href="http://redisbook.com/">http://redisbook.com/</a></p>
]]></content>
      <categories>
        <category>C++</category>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>shadowsocks安装和配置</title>
    <url>/2018/01/25/shadowsocks-toturial/</url>
    <content><![CDATA[<h2 id="shadowsocks服务端安装和配置">Shadowsocks服务端安装和配置</h2>
<p>shadowsocks是一个十分方便安装和配置的代理工具。官网是：<a href="http://shadowsocks.org">http://shadowsocks.org</a> 这里记录一下，shadowsocks的安装和配置的过程，方便以后的查阅。这里使用的是python版本的shadowsocks。</p>
<span id="more"></span>
<p>首先安装shadowsocks，使用pip可以方便的安装：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> shadowsocks<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装完成之后，这时候就会发现我们的系统里多了一些命令，主要需要用到的是 ssserver 这个工具。 使用 <code>ssserver -h</code> 可以查看其具体的用法。</p>
<pre class="line-numbers language-none"><code class="language-none">ssserver -s 127.0.0.1 -p 8388 -k password -m aes-256-cfb --workers 10 -t 300 -q -d start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上述命令就可以以后台程序的方式启动shadowsocks服务，其中监听的端口是8388，密码是password，加密方式是aes-256-cfb，其他的参数使用<code>ssserver -h</code>就能看到。</p>
<p>这里介绍另一种配置文件的方式，新建一个文件，比如叫<code>config.json</code>，内容为:</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"server"</span><span class="token operator">:</span><span class="token string">"::"</span><span class="token punctuation">,</span>
    <span class="token property">"server_port"</span><span class="token operator">:</span><span class="token number">8388</span><span class="token punctuation">,</span>
    <span class="token property">"local_address"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>
    <span class="token property">"local_port"</span><span class="token operator">:</span><span class="token number">1080</span><span class="token punctuation">,</span>
    <span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"password"</span><span class="token punctuation">,</span>
    <span class="token property">"timeout"</span><span class="token operator">:</span><span class="token number">300</span><span class="token punctuation">,</span>
    <span class="token property">"method"</span><span class="token operator">:</span><span class="token string">"aes-256-cfb"</span><span class="token punctuation">,</span>
    <span class="token property">"workers"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token property">"fast_open"</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果希望支持多个端口的话，可以参考一下的配置：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"server"</span><span class="token operator">:</span><span class="token string">"::"</span><span class="token punctuation">,</span>
    <span class="token property">"local_address"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>
    <span class="token property">"local_port"</span><span class="token operator">:</span><span class="token number">1080</span><span class="token punctuation">,</span>
    <span class="token property">"port_password"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"10000"</span><span class="token operator">:</span> <span class="token string">"password0"</span><span class="token punctuation">,</span>
        <span class="token property">"10001"</span><span class="token operator">:</span> <span class="token string">"password1"</span><span class="token punctuation">,</span>
        <span class="token property">"10002"</span><span class="token operator">:</span> <span class="token string">"password2"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"timeout"</span><span class="token operator">:</span><span class="token number">300</span><span class="token punctuation">,</span>
    <span class="token property">"method"</span><span class="token operator">:</span><span class="token string">"aes-256-cfb"</span><span class="token punctuation">,</span>
    <span class="token property">"workers"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token property">"fast_open"</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里需要注意的是，<code>"server"</code>字段填写的是<code>"::"</code>，这样可以同时监听ipv4和ipv6的地址，如果你的服务器同时支持ipv4和ipv6的话，那么你就可以通过代理顺便完成ipv4和ipv6的相互转换了。其他的参数可以按照自己的喜好去填写，加密方式也可以改成其他的更有效的方式。 启动方式现在变成了：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssserver <span class="token parameter variable">-c</span> /path/to/config.json <span class="token parameter variable">-d</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="shadowsocks客户端">Shadowsocks客户端</h2>
<p>客户端下载： <a href="http://shadowsocks.org/en/download/clients.html">http://shadowsocks.org/en/download/clients.html</a></p>
<p>上述网址安卓版需要用Google Play下载，国内可以使用github的release程序：</p>
<p><a href="https://github.com/shadowsocks/shadowsocks-android/releases">https://github.com/shadowsocks/shadowsocks-android/releases</a></p>
<h2 id="bbr安装">BBR安装</h2>
<p>据说安装可以对服务器进行网络加速，我也试了一下，可能服务器本来就很快吧，没什么特别的感觉。</p>
<p>可以参考教程：<a href="https://q.aka.moe/2017/01/28/google-bbr/">https://q.aka.moe/2017/01/28/google-bbr/</a></p>
<p>这里简单复制一下我使用的操作： 使用root用户登录，运行以下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh
<span class="token function">chmod</span> +x bbr.sh
./bbr.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>安装完成后，脚本会提示需要重启VPS，输入<code>y</code>并回车后重启。重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR，输入以下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uname</span> <span class="token parameter variable">-r</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看内核版本，含有 4.9 就表示 OK 了。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sysctl</span> net.ipv4.tcp_available_congestion_control<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回值一般为： <code>net.ipv4.tcp_available_congestion_control = bbr cubic reno</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sysctl</span> net.ipv4.tcp<span class="token punctuation">\</span>_congestion<span class="token punctuation">\</span>_control<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回值一般为： <code>net.ipv4.tcp_congestion_control = bbr</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sysctl</span> net.core.default_qdisc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回值一般为： <code>net.core.default_qdisc = fq</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsmod <span class="token operator">|</span> <span class="token function">grep</span> bbr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回值有<code>tcp_bbr</code>模块即说明bbr已启动。</p>
<h2 id="开机启动">开机启动</h2>
<p>这里使用的是CentOS7，修改<code>rc.local</code>文件实现。原理这里不解释，我也是查的，不适用于其他的操作系统。</p>
<p>首先赋予<code>rc.local</code>可执行权限：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x /etc/rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后修改<code>/etc/rc.local</code>文件，在下面增加我们需要执行的内容，我这里就比较简单的添加了启动ss服务的脚本：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/bin/ssserver <span class="token parameter variable">-c</span> /path/to/shadowsocks/config.json <span class="token parameter variable">-d</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>建议全部写上绝对路径，免得系统找不到我们的程序和配置文件。</p>
<h2 id="utorrent配置代理">utorrent配置代理</h2>
<p>现在以utorrent为例，需要在“网络”中设置代理。shadowsocks默认的socks5代理地址是<code>127.0.0.1:1080</code>。最终的配置如下图：</p>
<p><img src="utorrent.jpg" alt="utorrent config" /></p>
]]></content>
      <categories>
        <category>Miscellanea</category>
      </categories>
  </entry>
  <entry>
    <title>小喵的在线共享编辑器</title>
    <url>/2017/07/02/shared-online-editor/</url>
    <content><![CDATA[<blockquote>
<p>小喵的唠叨话：写这篇博客的初衷是因为看到了室友电脑面试的时候，面试官要求在线写代码。然后就想到，如果两个人能够在同一个页面进行编辑工作，不就能更方便的调试代码了吗？（PS.懂linux的screen或tmux的可以绕道了。）代码十分简单，在一个月前就写完了，只是一直没有时间写博客说明一下。</p>
</blockquote>
<p>github：<a href="https://github.com/miaoerduo/shared-editor">https://github.com/miaoerduo/shared-editor</a> 欢迎 <strong>fork</strong> 和 <strong>star</strong>。</p>
<p>那么，实现一个这样的在线的共享编辑器需要哪些工作呢？我们下面一点一点的说明。</p>
<span id="more"></span>
<h2 id="一写在前面">一、写在前面</h2>
<p>熟悉Linux的同学都知道screen和tmux这两个工具。通常我们可以使用他们来执行一些长时间的任务，也可以使用他们的共享终端的功能。在结对编程中，这是很有效的一个工具。</p>
<p>本文要实现的，是和上述两个工具类似的共享编辑器。要说优点的话，可能就是更亲民一些，打开网页就能使用。很适合远程帮女票看个代码啥的（好像很多公司里面会截断websocket，这样就没法用了）。</p>
<p>实现一个这样的编辑器，主要有两个部分。编辑器和同步数据的服务端。下面我们依次介绍。</p>
<h2 id="二在线编辑器">二、在线编辑器</h2>
<p>首先，我们需要一个好看的编辑器。调研了一下，找到了ACE这个编辑器，网址是 <a href="https://ace.c9.io">https://ace.c9.io</a> ，简单的了解了一下这个编辑器，发现居然连Github用的都是这个编辑器！看来我们选择这个编辑器是没错的啦。</p>
<p>使用起来也异常的简单，官方的Demo如下：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>ACE in Action<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
  <span class="token selector">#editor</span> <span class="token punctuation">&#123;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>editor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>function foo(items) &#123;
  var x = "All this is syntax highlighted";
  return x;
  &#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/ace-builds/src-noconflict/ace.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> editor <span class="token operator">=</span> ace<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token string">"editor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  editor<span class="token punctuation">.</span><span class="token function">setTheme</span><span class="token punctuation">(</span><span class="token string">"ace/theme/monokai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  editor<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMode</span><span class="token punctuation">(</span><span class="token string">"ace/mode/javascript"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的script中的src可能需要换成可以访问的链接。之后就能预览到编辑器的效果。大致和前面小喵的效果类似。 具体的其他的用法可以在官网中查到，这里小喵就不着重介绍了。</p>
<h2 id="三消息同步机制">三、消息同步机制</h2>
<p>选择好合适的编辑器之后，我们需要做的就是消息通信的功能了。</p>
<p>这里主要有四种情况：</p>
<h3 id="文档同步">1. 文档同步</h3>
<p>当用户修改文档的时候，其修改的部分必须同步到所有的阅读改文档的用户。这里只同步修改的部分，因为每次都同步整个文档，那么会很消耗带宽（总不能输入一个 "hello world"都同步十几次文档吧）。</p>
<p>下图是一个示例（强势安利一下：<a href="https://www.processon.com">https://www.processon.com</a> 这个画图的工具）。用户1编辑了文档，文档更新的内容发送给了服务器，服务器将更新的内容组播到所有打开相同文档的用户（注意，这里不是广播，广播是向所有的用户发送），同时更新自己的远程备份。</p>
<p><img src="shared-online-editor-update.png" /></p>
<center>
图1 文档更新
</center>
<h3 id="文档副本">2. 文档副本</h3>
<p>当用户第一次访问已经存在的文档的时候。这个时候，该用户需要加载页面的所有的内容。因此我们的服务器端需要存放完整的文档的副本。</p>
<p>如下图，用户3打开了这个文档，这时候会请求服务器发送完整的文档信息。</p>
<p><img src="shared-online-editor-new-user.png" /></p>
<center>
图2 新增用户
</center>
<h3 id="文档销毁">3. 文档销毁</h3>
<p>小喵这里的文档的内容是直接在内存中保存的。这样的好处是很方便，不需要额外的控制数据库啥的。但是弊端也很明显，虽然每个文档可能比较小，但如果文档创建的比较多，就会一直消耗内存。所以当没有用户使用文档的时候，需要删除文档，这样服务器端就需要保存一个引用计数。计数为0，就删除文档。</p>
<h3 id="冲突解决">4. 冲突解决</h3>
<p>考虑到网络可能会出现故障，用户在编辑文档之后，其他的用户可能并没有即使同步，这样就出现文档落后的情况。一个简单的策略就是，每次文档修改之后都返回一个时间戳，下一次修改文档的时候要将这个时间戳作为参数发送到服务器，如果时间戳不是最新的，那么就刷新整个文档。当然这个策略也有很多的不足之处，如果大家能有什么改进，烦请告诉小喵一下~</p>
<p>上面就是设计部分，具体实现的话，需要用到WebSocket技术，这是浏览器和服务器实时通信的一个很好的工具。WebSocket有很多语言的实现，小喵这里选择的是比较容易上手的 <a href="https://socket.io">socket.io</a>。</p>
<p>socket.io 不仅支持用户和服务器的点对点通信，还支持组播、广播的操作。简单的学习一下，就可以完成上面的设计。</p>
<p>这里，小喵也不在代码层面上解释实现了。感兴趣的同学可以看看小喵的github: <a href="https://github.com/miaoerduo/shared-editor">https://github.com/miaoerduo/shared-editor</a></p>
<p>能够给小喵提交一些PR的话就更好了。</p>
<h2 id="四写在后面">四、写在后面</h2>
<p>终于写完这篇博客了，拖了快两个月了。之前迟迟没有动手的一个原因是比较忙，更多的可能因为自己有点懒，一直不想画解释原理的示意图。现在终于写完了，还是挺开心的。</p>
<p>这次的博客相比之前的，更多的是介绍设计的思路。反正代码都在github上了，大家可以随意食用~ 希望能和大家一起进步！</p>
<p><strong>转载</strong> 请注明出处，谢谢~</p>
]]></content>
      <categories>
        <category>Miscellanea</category>
        <category>Nodejs</category>
      </categories>
  </entry>
  <entry>
    <title>新浪微博爬虫实现</title>
    <url>/2015/12/18/sina-crawler/</url>
    <content><![CDATA[<blockquote>
<p>小喵的唠叨话：由于项目需要（其实是个小兼职），需要抓取新浪微博的用户的微博数据。小喵在努力研究了一晚上之后，初步掌握的抓取的方法。所谓聪明的喵不吃独食，特来与大家分享。作为小喵的第一篇博客，小喵努力写了很久，如果写作上有什么不清晰的地方，也欢迎大家指正。</p>
</blockquote>
<span id="more"></span>
<h2 id="一分析新浪微博的网页">一、分析新浪微博的网页</h2>
<p>这里选择手机版的新浪微博，即：<a href="http://m.weibo.cn">http://m.weibo.cn</a>。原因如下：手机版的微博内容和电脑版的一样，但是信息比较直接，并且手机网页的验证等操作也要较电脑版简单。故为了便于分析，选择手机微博是一个明智的选择。</p>
<p>登录进微博，随便打开一个关注的微博，查看其主页网址（例如：<a href="http://m.weibo.cn/u/1630461754">http://m.weibo.cn/u/1630461754</a>）。</p>
<p>对比可以分析出：</p>
<ol type="1">
<li>每个用户应该有唯一的网址（当然有的用户有自己的个性域名），而这个网址的最后面的数字很可能是用户的唯一标示。（在后面，我们也验证了该数字确实是用户的uid）</li>
<li>所有的微博主页都是以<code>http://m.weibo.cn/u/&#123;uid&#125;</code>的形式（这不绝对，因为实验中确实发现的别的类型的网址，但大多数都是这个样子）。</li>
</ol>
<p>之后，主页中只会显示用户的最新微博信息，这并不是我们期望的。我们点击"查看更多微博"，这样跳转到一个只有微博的页面。</p>
<p><img src="2016-04-18_113632.png" alt="2016-04-18_113632" /></p>
<center>
图1 手机微博页面
</center>
<p>在我这里，出现的网址是: <a href="http://m.weibo.cn/page/tpl?containerid=1005051630461754_-_WEIBO_SECOND_PROFILE_WEIBO&amp;itemid=&amp;title=%E5%85%A8%E9%83%A8%E5%BE%AE%E5%8D%9A">http://m.weibo.cn/page/tpl?containerid=1005051630461754_-_WEIBO_SECOND_PROFILE_WEIBO&amp;itemid=&amp;title=%E5%85%A8%E9%83%A8%E5%BE%AE%E5%8D%9A</a></p>
<p>具体含义我们暂时不需要理解。</p>
<p>别走开，真正的黑科技要出现了。通过滚动页面，可以发现，页面在动态加载。看来为了用户体验，微博做了很多功夫。学习过一段时间的网页开发的同学都应该知道，网页不刷新，内容却发生改变，这很可能是使用Ajax技术。通过Ajax，对额外的微博数据进行加载，之后通过Dom操作，追加到页面的微博数据的最下面。</p>
<p>从上面的分析可知，如果我们能够查询到追加的数据的获取方式，就很可能实现微博内容的获取。</p>
<p>这里介绍一个常用的分析方法。打开chrome的控制台（事实上，firefox，IE都支持这个功能），在network下，查看数据加载情况。这里建议清空所有数据，然后滚动屏幕，这样很容易就能获得最新加载的数据了。</p>
<p>这里是我的截图：</p>
<p><img src="2016-04-18_113843.png" alt="2016-04-18_113843" /></p>
<center>
图2 浏览器抓包
</center>
<p>很容易注意到名为json的这个数据包。复制并打开他的连接。这时候在浏览器中，出现了许多乱七八糟的东西 （这里的网址是：<code>http://m.weibo.cn/page/json?containerid=1005051630461754_-\_WEIBO\_SECOND\_PROFILE\_WEIBO&amp;page=3）</code>。这时候需要我们仔细辨认，你会发现，除了文字很奇怪之外，其他的东西，很明显包含了我们需要的东西。</p>
<p><img src="2016-04-18_113958.png" alt="2016-04-18_113958" /></p>
<center>
图3 JSON包
</center>
<p>对！这就是我们所期望的！Ajax动态加载的数据！</p>
<p>对这个url做简单的实验和分析。可以知道：</p>
<ol type="1">
<li><code>http://m.weibo.cn/page/json</code>，这是数据的请求源，是固定的。用来区分资源的是后面的参数。</li>
<li><code>containerid=1005051630461754_-\_WEIBO\_SECOND\_PROFILE\_WEIBO</code>，这个形式也是几乎不变的。<code>1005051630461754</code>这个用来标志用户，试验了几次之后，我才发现了其中的规律：<code>1005051630461754 = 100505 + uid</code>！也就是说，只要知道用户的uid，很容易构造这个字段。</li>
<li><code>page=3</code>，明显用来表示请求的微博的页面。试了一下，如果把参数设为1，就是最新的微博的数据。聪明的你一定想到了通过改变page的数值，就可以轻松地抓取用户的所有微博！</li>
</ol>
<p>总结，我们知道，通过访问<code>http://m.weibo.cn/page/json?containerid=100505&#123;uid&#125;_-\_WEIBO\_SECOND\_PROFILE\_WEIBO&amp;page=&#123;page_num&#125;</code>，就可以得到指定用户的指定页面的微博。</p>
<p>到此，我们简单的分析的微博的页面，并知道了数据的来源。之后便可以较为顺利的爬取用户的数据了。</p>
<p><strong><em>但是，难道到这里就结束了吗？</em></strong></p>
<p>不会这么简单。程序员的本质就是将一切做到极致。</p>
<h2 id="二获得用户的uid">二、获得用户的uid</h2>
<p>为了更机械化的抓取用户数据，我们可以将获取uid的任务，也编程实现。这里主要用三种方法：</p>
<ol type="1">
<li>知道用户的主页地址，比如：<a href="http://m.weibo.cn/u/1630461754">http://m.weibo.cn/u/1630461754</a>，可以直接得到<code>uid</code>。</li>
<li>知道用户的昵称，通过新浪的api，<a href="http://open.weibo.com/wiki/2/users/show">http://open.weibo.com/wiki/2/users/show</a>，可以获取用户的数据，包括<code>uid</code>。</li>
<li>知道用户的个性域名，通过新浪的api，<a href="http://open.weibo.com/wiki/2/users/domain_show">http://open.weibo.com/wiki/2/users/domain_show</a>，即可获取。</li>
</ol>
<p>新浪的api需要，自己创建应用，然后授权等等。可以参考新浪微博官网的文档<a href="http://open.weibo.com/wiki/微博API">http://open.weibo.com/wiki/微博API</a>，这里不再累述。</p>
<h2 id="三数据抓取解析">三、数据抓取解析</h2>
<blockquote>
<p>数据的抓取可以使用任意的支持HTTP通信的语言，注意抓取的频率就好，太快了可能会被系统认识到是爬虫 <em>虽然我们确实是</em> ，建议至少间隔1~2s。前面两步得到的数据都是JSON格式的，<strong>JSON</strong>（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation）是一种由轻量级的数据交换语言。基本上每种语言都对JSON有很好的支持。因此只要对JSON稍作了解，都可以快速解析。可以查看wiki的相关介绍：<a href="https://zh.wikipedia.org/wiki/JSON">https://zh.wikipedia.org/wiki/JSON</a>。</p>
</blockquote>
<p>以上，便是微博的数据的抓取思路。这里仅供参考。有许多东西理解的可能还不够透彻。比如：100505是怎么来的，获取uid的没考虑到的情况（这个确实碰到了一个，但是暂时还没有研究）等等，如果以后有新的发现，一定会再次补充。</p>
<p><strong>最后，转载请注明出处。</strong></p>
<p>欢迎转载和分享~</p>
]]></content>
      <categories>
        <category>Miscellanea</category>
      </categories>
  </entry>
  <entry>
    <title>C++ Boost JSON解析库的使用</title>
    <url>/2018/06/22/the-usage-of-cpp-boost-json/</url>
    <content><![CDATA[<blockquote>
<p>最近在写一个C++项目的时候，有大量的配置信息，于是将这些配置信息整合进一个文本文件中，选择了JSON这种数据格式。C++在处理JSON数据的库有很多，比如Jsoncpp，Boost等，这个项目中由于本身就已经用到了Boost这个库，因此，也就选用Boost来进行JSON的解析了。</p>
</blockquote>
<p>Boost的JSON解析，使用的是property_tree这个数据类型，它可以方便的解析XML和JSON。</p>
<span id="more"></span>
<h2 id="一boost-json解析库的几个注意事项">一、Boost JSON解析库的几个注意事项</h2>
<p>在具体介绍之前，必须要强调一下，这个库默认不是线程安全的！不是线程安全的！不是线程安全的！不做任何处理的情况下，如果直接在多线程的程序中使用Boost解析JSON，可能会在奇怪的时候报段错误。这是由于Boost的JSON解析是基于SPIRIT语法解析的，而SPIRIT本身就不是线程安全的，我们如果需要它支持线程安全，就必须加入一个宏<code>#define BOOST_SPIRIT_THREADSAFE</code>，把它放在引用boost的头文件的最开始就行。理论上，在编译的时候加入宏也是可以的。另一个需要注意的是，一般网上找的教程中，property_tree都是不支持unicode编码的，如果想要支持unicode，需要一些额外的操作。这个从网上可以查到，我尝试了一下，最终还是放弃了。取而代之的一个方案就是把中文的各种路径啥的，用软链接替换成英文和数字。之后世界就美好了。</p>
<h2 id="二boostproperty_treeptree-类型">二、boost::property_tree::ptree 类型</h2>
<p>对于JSON或者XML，boost将他们解析之后都会生成一个ptree的数据结构。类似于下面的结构。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">ptree</span>
<span class="token punctuation">&#123;</span>
    data_type data<span class="token punctuation">;</span>                         <span class="token comment">// data associated with the node</span>
    list<span class="token operator">&lt;</span> pair<span class="token operator">&lt;</span>key_type<span class="token punctuation">,</span> ptree<span class="token operator">></span> <span class="token operator">></span> children<span class="token punctuation">;</span> <span class="token comment">// ordered list of named children</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出，这是一个很标准的树的结构。对于树中的每一个节点，都有自己的数值和子节点，每个子节点都有一个唯一的名字。<code>data_type</code>和<code>key_type</code>通常是<code>std::string</code>或<code>std::wstring</code>。如果希望处理unicode的字符串的话，就需要用到<code>std::wstring</code>了。下面的例子中，使用的全部都是<code>std::string</code>。</p>
<h2 id="三json文件的解析">三、JSON文件的解析</h2>
<p>首先，我们用一个小栗子，来介绍一下Boost是如何读取JSON数据的。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;boost/property_tree/ptree.hpp></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;boost/property_tree/json_parser.hpp></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"&#123; \"a\": 100, \"b\": [1, 2, 3, 4] &#125;"</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span>ptree ptree<span class="token punctuation">;</span>
    <span class="token comment">// 读取JSON数据</span>
    boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span><span class="token function">read_json</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> ptree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ptree<span class="token punctuation">.</span><span class="token function">get_child</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token comment">// 写回JSON数据</span>
    boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span><span class="token function">write_json</span><span class="token punctuation">(</span><span class="token string">"./tmp.json"</span><span class="token punctuation">,</span> ptree<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里首先我们需要定义一个<code>boost::property_tree::ptree</code>类型的对象，之后通过<code>boost::property_tree::read_json</code>函数进行数据的读取，之后就可以使用各种ptree的接口进行数据的操作了。在<code>boost/property_tree/json_parser.hpp</code>文件中我们可以看到读写JSON的一些接口。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> boost <span class="token punctuation">&#123;</span>
    <span class="token keyword">namespace</span> property_tree <span class="token punctuation">&#123;</span>
        <span class="token keyword">namespace</span> json_parser <span class="token punctuation">&#123;</span>
            <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Ptree</span><span class="token operator">></span> 
            <span class="token keyword">void</span> <span class="token function">read_json</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>basic_istream<span class="token operator">&lt;</span> <span class="token keyword">typename</span> <span class="token class-name">Ptree</span><span class="token double-colon punctuation">::</span>key_type<span class="token double-colon punctuation">::</span>value_type <span class="token operator">></span> <span class="token operator">&amp;</span><span class="token punctuation">,</span> 
                           Ptree <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Ptree</span><span class="token operator">></span> 
            <span class="token keyword">void</span> <span class="token function">read_json</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span><span class="token punctuation">,</span> Ptree <span class="token operator">&amp;</span><span class="token punctuation">,</span> 
                            <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>locale <span class="token operator">&amp;</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">locale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Ptree</span><span class="token operator">></span> 
            <span class="token keyword">void</span> <span class="token function">write_json</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>basic_ostream<span class="token operator">&lt;</span> <span class="token keyword">typename</span> <span class="token class-name">Ptree</span><span class="token double-colon punctuation">::</span>key_type<span class="token double-colon punctuation">::</span>value_type <span class="token operator">></span> <span class="token operator">&amp;</span><span class="token punctuation">,</span> 
                            <span class="token keyword">const</span> Ptree <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Ptree</span><span class="token operator">></span> 
            <span class="token keyword">void</span> <span class="token function">write_json</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Ptree <span class="token operator">&amp;</span><span class="token punctuation">,</span> 
                            <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>locale <span class="token operator">&amp;</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">locale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>它支持读写JSON，对于读取操作，它支持直接根据文件名称来加载JSON或者通过输入流来加载。输出也是相同。所以我们上面的Demo中，需要将字符串<code>s</code>转换成字符串流对象<code>ss</code>，之后才能进行加载。写文件支持写入到文件或者输出流中，最后一个bool值表示是否格式化输出json。</p>
<h2 id="四json对象的读取">四、JSON对象的读取</h2>
<p>我们知道JSON对象主要有两种格式：键值对和数组。JSON灵活就在于键值对的值还可以键值对或者数组，数组的每个元素也是。那么我们分别介绍键值对和数组的数据获取方式。</p>
<h3 id="键值对的解析">1）键值对的解析</h3>
<p>ptree支持一个操作叫做<code>get_child</code>，可以根据键的名字，来获取子节点。而且这个名字还可以是累加的。什么叫可以累加呢？我们看一下下面的代码：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;boost/property_tree/ptree.hpp></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;boost/property_tree/json_parser.hpp></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"&#123; \"a\": &#123; \"b\":1, \"c\":2 &#125;, \"d\":3 &#125;"</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span>ptree ptree<span class="token punctuation">;</span>
    boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span><span class="token function">read_json</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> ptree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"input text:"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span><span class="token function">write_json</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> ptree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-------------------------"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"parse result: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a->b: "</span> <span class="token operator">&lt;&lt;</span> ptree<span class="token punctuation">.</span><span class="token function">get_child</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get_child</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get_value</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a->b: "</span> <span class="token operator">&lt;&lt;</span> ptree<span class="token punctuation">.</span><span class="token function">get_child</span><span class="token punctuation">(</span><span class="token string">"a.b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get_value</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a->c: "</span> <span class="token operator">&lt;&lt;</span> ptree<span class="token punctuation">.</span><span class="token function">get_child</span><span class="token punctuation">(</span><span class="token string">"a.c"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get_value</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"d: "</span> <span class="token operator">&lt;&lt;</span> ptree<span class="token punctuation">.</span><span class="token function">get_child</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get_value</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出的结果为：</p>
<pre class="line-numbers language-none"><code class="language-none">input text:
&#123;
    &quot;a&quot;: &#123;
        &quot;b&quot;: &quot;1&quot;,
        &quot;c&quot;: &quot;2&quot;
    &#125;,
    &quot;d&quot;: &quot;3&quot;
&#125;
-------------------------
parse result:
a-&gt;b: 1
a-&gt;b: 1
a-&gt;c: 2
d: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>get_child</code>这个函数，可以根据节点的名字，获取到子节点的ptree对象。这个节点的名字可以使用<code>.</code>连接各个层级的名称。<code>get_value&lt;Type&gt;</code>方法，可以获取节点的值，并且转换成期望的数据类型。如果我们就是想获取节点的值。不期望有任何转换，可以使用<code>data</code>这个函数。 <code>get_child</code>要求输入的名称路径必须是存在的，否则会抛异常。如果我们不知道某个名称路径是否存在的话，可以使用<code>get_child_optional</code>这个函数，如果路径不存在，该函数会返回<code>boost::null</code>。<code>get_child_optional</code>返回的类似于指针的结构，如果需要获取值，可以用这样的写法：<code>pt.get_child_optional("some_key")-&gt;get_value&lt;int&gt;()</code>。 我们可以向现在这样通过各种树的操作，选择到我们的需要的节点，再通过<code>get_value&lt;Type&gt;</code>函数获取到数据值。但这样的操作有时候会有点繁琐。boost支持更简化的一些操作。下面是同样功能的一个例子：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;boost/property_tree/ptree.hpp></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;boost/property_tree/json_parser.hpp></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"&#123; \"a\": &#123; \"b\":1, \"c\":2 &#125;, \"d\":3 &#125;"</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span>ptree ptree<span class="token punctuation">;</span>
    boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span><span class="token function">read_json</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> ptree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"input text:"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span><span class="token function">write_json</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> ptree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-------------------------"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"parse result: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a->b: "</span> <span class="token operator">&lt;&lt;</span> ptree<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"a.b"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a->c: "</span> <span class="token operator">&lt;&lt;</span> ptree<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"a.c"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"d: "</span> <span class="token operator">&lt;&lt;</span> ptree<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>get</code>这个函数相当于先<code>get_child</code>得到要找的节点，之后再调用<code>get_value&lt;Type&gt;</code>这个函数。<code>get_value&lt;Type&gt;</code>这个函数可以获取节点的值，同时把它转换成<code>Type</code>格式。即<code>ptree.get&lt;int&gt;("a.b")</code>等价于<code>ptree.get_child("a.b").get_value&lt;int&gt;()</code>。 通过<code>get</code>函数，我们可以很方便的获取某个节点的数据，而且还能顺便完成类型的转换，真的不能更方便了！</p>
<h3 id="数组的解析">2）数组的解析</h3>
<p>为什么数组的解析要单独来说呢？因为，数组格式中，没有键，所以我们不能根据名字来获取节点了，所以读取的方式有了些许的不同。 Boost针对数组，给我们提供了遍历子节点的迭代器接口。可以十分方便的遍历某节点的所有的子节点（当然在键值对的解析中也可以使用）。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;boost/property_tree/ptree.hpp></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;boost/property_tree/json_parser.hpp></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"[1, 2, 3, 4]"</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span>ptree ptree<span class="token punctuation">;</span>
    boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span><span class="token function">read_json</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> ptree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span><span class="token function">write_json</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> ptree<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// visit array data</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span>ptree<span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> ptree<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> ptree<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span> it<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get_value</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    
    <span class="token comment">// simpler in c++11</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">:</span> ptree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token punctuation">.</span>second<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get_value</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>打印的结果：</p>
<pre class="line-numbers language-none"><code class="language-none">&#123;
    &quot;&quot;: &quot;1&quot;,
    &quot;&quot;: &quot;2&quot;,
    &quot;&quot;: &quot;3&quot;,
    &quot;&quot;: &quot;4&quot;
&#125;
1 2 3 4
1 2 3 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出，Boost中将JSON数组也是按照键值对的方式去存储，只是键的内容是一个空的字符串。迭代器的<code>first</code>是键的结果，数组中就是空字符串。<code>second</code>就是我们的值。</p>
<h3 id="其他的实用接口">3）其他的实用接口</h3>
<ul>
<li><code>bool empty()</code>: 返回该节点是否含有子节点。比如当一个节点已经是叶子节点的时候，可以用这个函数来判断。</li>
<li><code>assoc_iterator find(const key_type &amp;key)</code>: 给定一个名字路径，返回指向该节点的迭代器或者<code>boost::property_tree::ptree::not_found</code>。</li>
<li><code>size_type count(const key_type &amp;key)</code>: 返回指定名称路径的节点的子节点的数目。</li>
</ul>
<h2 id="五json对象的编辑">五、JSON对象的编辑</h2>
<p>Boost支持很多的对JSON对象的写的操作，但是我在项目中没有用到，所以在这里暂时就没有动力整理下去了~~ 这里附上Boost ptree的文档，方便大家查阅：<a href="https://www.boost.org/doc/libs/1_65_1/boost/property_tree/ptree.hpp">https://www.boost.org/doc/libs/1_65_1/boost/property_tree/ptree.hpp</a></p>
<h2 id="六疑难杂症">六、疑难杂症</h2>
<h3 id="怎么判断某个键是否存在">1.怎么判断某个键是否存在？</h3>
<p>使用<code>get_child_optional</code>，再判断返回是否为<code>boost::null</code>，这个对象直接相当于<code>false</code>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> node <span class="token operator">=</span> ptree<span class="token punctuation">.</span><span class="token function">get_child_optional</span><span class="token punctuation">(</span><span class="token string">"somekey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// node not exists</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="怎么方便的遍历数组">2.怎么方便的遍历数组？</h3>
<p>这个功能，我还专门查过。其实懂了之前的迭代器的使用，就能方便的遍历了。下面是我用的一个代码。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">as_vector</span><span class="token punctuation">(</span>boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span>ptree <span class="token keyword">const</span> <span class="token operator">&amp;</span>pt<span class="token punctuation">,</span> boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span>ptree<span class="token double-colon punctuation">::</span>key_type <span class="token keyword">const</span><span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> r<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>item<span class="token operator">:</span> pt<span class="token punctuation">.</span><span class="token function">get_child</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        r<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>second<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get_value</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用的话就这样：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;boost/property_tree/ptree.hpp></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;boost/property_tree/json_parser.hpp></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">as_vector</span><span class="token punctuation">(</span>boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span>ptree <span class="token keyword">const</span> <span class="token operator">&amp;</span>pt<span class="token punctuation">,</span> boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span>ptree<span class="token double-colon punctuation">::</span>key_type <span class="token keyword">const</span><span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> r<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>item<span class="token operator">:</span> pt<span class="token punctuation">.</span><span class="token function">get_child</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        r<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>second<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get_value</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"&#123;\"arr\": [1, 2, 3, 4]&#125;"</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>stringstream <span class="token function">ss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span>ptree ptree<span class="token punctuation">;</span>
    boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span><span class="token function">read_json</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> ptree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    boost<span class="token double-colon punctuation">::</span>property_tree<span class="token double-colon punctuation">::</span><span class="token function">write_json</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> ptree<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">auto</span> result <span class="token operator">=</span> <span class="token generic-function"><span class="token function">as_vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ptree<span class="token punctuation">,</span> <span class="token string">"arr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span>d<span class="token operator">:</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不过这个解决方案有个问题，就是如果根节点就是数组的话，似乎就不能很好的work了。</p>
<h3 id="怎么解析中文">3.怎么解析中文</h3>
<p>/(ㄒoㄒ)/~~</p>
<p><strong>转载请注明出处，谢谢！</strong></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>TICTOC: Header Only C++ Timer</title>
    <url>/2019/03/29/tictoc-header-only-c-timer/</url>
    <content><![CDATA[<p>感觉最近的更新频率略高啊～哈哈～</p>
<p>这次的带来的是一个十分简单便利的C++计时库。</p>
<p>项目地址：<a href="https://github.com/miaoerduo/tictoc">https://github.com/miaoerduo/tictoc</a></p>
<p>欢迎<strong>Start</strong>和提<strong>MR</strong>。</p>
<span id="more"></span>
<p>项目中有详细的说明和Demo，可以很直观的体验到这个库的易用性。</p>
<p>先看一下效果，如果我们正确使用的话，大致会出现类似下面的信息：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">demo.cpp @ main [    8,   13]   elapsed:      0.025 s      24.786 ms       24786 us
demo.cpp @ main [    8,   18]   elapsed:      0.049 s      48.709 ms       48709 us
demo.cpp @ main [    8,   23]   elapsed:      0.072 s      72.211 ms       72211 us
demo.cpp @ main [    8,   24]   elapsed:      0.072 s      72.225 ms       72225 us
demo.cpp @ main [   30,   36]   elapsed:      0.022 s      21.747 ms       21747 us
demo.cpp @ main [   36,   41]   elapsed:      0.021 s      21.463 ms       21463 us<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以显示，我们的每个区域的代码（包括行号）的消耗时间。精确到微秒。</p>
<p>起因是这样的，之前有很长时间的工作内容是优化一些特定的函数，保证新旧的SDK的速度的对齐。然后C++虽然有一些工具可以分析运行状态，但通常还是简单的打印时间来的方便 <span style="color: green">/* Print大法好 */</span>。</p>
<p>之后，和工程的小伙伴一起Debug的时候，就发现他写了一个头文件，然后用绝对路径的方式去include，而头文件里面就是各种常用的小工具，而最常用到的就是时间的打印。</p>
<p>之后，我专门要到了他的百宝箱，仔细分析了一下，发现计时器模块仍然存在一些问题：</p>
<ol type="1">
<li>在Debug的时候，如果加上工具代码，在Release的时候，还得一点点删掉，很麻烦。</li>
<li>修改时间精度的话，需要修改源码，略麻烦。</li>
<li>打印的时间戳的信息不完整，看不出来该段时间具体的代码的范围。</li>
<li>计时器如果在多个文件中都用到，会有各种奇怪的错误，重复定义变量啊，或者找不到变量啥的。</li>
<li>对更复杂的程序，比如各种库的编译，多个库的链接调用不支持。</li>
</ol>
<p>上面说的问题，说大不大，说小不小。如果能有个工具能解决上面5个问题，那也是一件十分惬意的事情。所以，也就有了本文和 <code>TICTOC</code> 这个库。接下来，我们会从上面的5个问题开始，一点一点介绍C++的小技巧。</p>
<h3 id="设计思路">〇、设计思路</h3>
<p>其实计时器的思路很简单，就是定义两个宏 <code>TIC</code> 和 <code>TOC</code>，如果插入 <code>TIC</code>，则记录为起始时间，当插入 <code>TOC</code> 的时候，则计算与上一次 <code>TIC</code> 之间的时间，并打印出来。</p>
<p>比较麻烦的是，如果我在使用 <code>TIC</code> 的时候，生成一个变量，那连续使用两次 <code>TIC</code> 的话，就会出现变量的重复定义。另一个方案就是在全局定义一个时间的变量，但这样会带来另一个问题，就是所有函数都共享这个变量，如果函数内部再运行一次 <code>TIC</code>，会覆盖掉这个时间戳，但是其他的 <code>TOC</code> 的结果不直观。</p>
<p>所以，这里就使用了一个字典，来存放 <code>TIC</code> 的时间戳。这个字典本身是使用单例模式去生成和维护的。每次 <code>TIC</code> 的时候都会初始化一次它，但是由于是单例，所以只有第一次会耗时。而字典的键是个字符串，由文件名+函数名联合构成。这样针对每个函数，都会有自己的一个计时器，就不用担心冲突了。之后运行 <code>TOC</code> 的时候，也会检查当前的文件名和函数名，从而与对应的 <code>TIC</code> 时间戳相减。是不是听起来很简单！</p>
<p>当然还会碰到很多奇怪的问题，其中最无语的是，当动态库使用这个库，而主程序也使用这个库的时候，所谓的单例模式就失效了，两段程序里面都会有这个字典，然后就冲突了，出现 <code>double free</code> 的情况。查了半天，才发现是动态库只在静态表导出这个单例，动态连接器默认查询动态表，没找到，从而主程序自己又重复构建了这个实例，导致了存在两个实例。最终用 <code>-rdynamic</code> 的方式编译就可以解决。但是用这种方式的话，又会显得很麻烦。我采用的解决方法是匿名命名空间，在每个文件中生成自己的单例。细节我们在后面会谈到。</p>
<h3 id="一debug-or-release">一、Debug or Release</h3>
<p>因为我们不希望在Deliver的时候，再修改代码，所以有没有办法，使用不同的宏来控制我们的程序呢？当然是可以的。<code>C/C++</code> 最常用到的预处理语句：<code>#define</code>, <code>#ifdef</code>, <code>#ifndef</code>，<code>#else</code>, <code>#endif</code>。采用下面的方式来进行就可以。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">TICTOC_HPP</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TICTOC_HPP</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">WITH_TICTOC</span></span>
<span class="token comment">// 一些计时器的逻辑单元</span>
<span class="token comment">// 函数啥的</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token comment">// 一些假的信息</span>
<span class="token comment">// 比如宏函数，内容空的，免得编译不过</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先，这个 <code>TICTOC_HPP</code> 的宏定义，是为了防止头文件的多次包含。不然在多处include这个头文件的时候，会出现函数重复定义的问题。是一个良好的编程习惯。</p>
<p><code>WITH_TICTOC</code> 这个宏才是用来控制我们的Debug/Release的关键。在Debug的时候，编译加入一个宏定义，用g++直接编译的话，就是编译的时候加上 <code>-DWITH_TICTOC</code>。用CMakeLists的话，就是另一套了，自己查一下吧。在Release的时候，去掉这个宏定义就行，这样编译走的就是 <code>#else</code> 的分之，里面可以不写代码（我这里还是写了几行，定义了一些宏，但是宏的操作是空的）。</p>
<p>总之，灵活的使用宏定义，就可以让我们的编译器按照我们的想法去工作！</p>
<h3 id="二多种精度">二、多种精度</h3>
<p>问题二就比较简单了，既然每设置一种精度，都要修改一下代码，不如一次性的将所有的精度都打印出来了！这部分似乎没有什么好说的，就简单的说一下，我这里用到的计时的函数吧。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/time.h></span></span>
<span class="token comment">/*
struct timeval &#123;
    time_t       tv_sec;     // seconds
    suseconds_t  tv_usec;    // microseconds
&#125;;
*/</span>
<span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token function">get_tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">timeval</span> time<span class="token punctuation">;</span>
    <span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>time<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> time<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>timeval</code> 是一个表示时间的结构体，可以精确到微秒级别，完全够我们使用了。</p>
<h3 id="三打印完整的信息">三、打印完整的信息</h3>
<p>首先，对于一个计时器，为了方便调试，我们希望知道什么信息呢？这里列出来我比较关心的：</p>
<ol type="1">
<li>这个时间戳所在的位置，包括：文件名，函数名</li>
<li>时间戳是哪一段代码产生的，即：起始和结束的代码行号</li>
<li>具体的时间（按不同精度显示）</li>
</ol>
<p>对于3，上文已经介绍了。那么如何获取文件名、函数名以及行号呢？</p>
<p>其实C++中（C语言中也有的）早就给我们定义好了一些宏。这里就简单的列一下常用的几个，大家感兴趣也可以自己去查询：</p>
<ol type="1">
<li><code>__FILE__</code> : 宏所在的文件名</li>
<li><code>__FUNCTION__</code> : 宏所在的函数名</li>
<li><code>__LINE__</code> : 当前行号</li>
<li><code>__DATE__</code>, <code>__TIME__</code> : 最后一次编译的时间</li>
<li><code>__TIMESTAMP__</code> : 文件最后的修改时间</li>
</ol>
<p>所以，我们这里主要用到三个：<code>__FILE__</code>, <code>__FUNCTION__</code>, <code>__LINE__</code> 。</p>
<h3 id="四working-everywhere">四、Working Everywhere</h3>
<p>上面的问题4和5，放在一起介绍。</p>
<p>针对问题4，是我们在多个文件同时使用了计时器，如果通过全局变量的方式去存储时间戳，那么每个文件都会有自己的时间戳，从而导致冲突（当然，把时间戳改成 <code>static</code> 的可能可以解决）。而且，同一个文件中，如果出现函数调用，也有修改这个全局的时间戳，导致打印时间很不友好。</p>
<p>这里使用字典来存放时间戳，给每个文件都创建自己的时间戳，从而解决了这个问题。在〇章中，也有介绍。</p>
<p>那么问题5就很复杂了，多个动态库同时使用时，会崩溃。首先，为了让字典在程序中，只存在一份，我这里使用了单例模式。如果把所有的文件都编译在一起，是完全OK的。问题就出在，如果动态库使用了这个工具，而主程序也使用该工具，且又链接了动态库，那么程序中就会出现多个字典，在程序退出析构的时候，就会出现多次 <code>free</code> 的情况（很奇怪吧，明明是两个实例，居然两次析构函数都调用同一个实例）。之前也说了，用 <code>-rdynamic</code> 的方式编译会很麻烦，而且我们不可能给整个大项目的每个部分都加这个编译选项吧。我们的工具库要足够的独立！</p>
<p>按照之前的分析，我们其实只需要给每个函数都分配自己的一个键就可以了，其实完全没必要只有一个Global的字典，只需要给每个文件都生成自己的字典不就OK了吗。但是，怎么去实现呢？</p>
<p>常见的方法有两个：</p>
<ol type="1">
<li><code>static 变量</code>，<code>static</code> 关键字有一个功能，是保证这个变量只在该文件中使用。不会导出。</li>
<li>匿名命名空间，也叫匿名名字空间，这里采用的就是这个方案。</li>
</ol>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"hello world"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面就是最简单的匿名命名空间，如果我们在代码中这么定义，其等价于：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> thisisaspecificnamespace <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"hello world"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> thisisaspecificnamespace<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>里面的这个大长串是啥意思？</p>
<p>其实thisisaspecificnamespace这个名字是我瞎写的，对于编译器，他会给这个匿名命名空间生成一个独一无二的名字，保证一定不重复，然后在改文件中，using它。所以自然就只有这个文件本身能够调用里面的函数了。</p>
<p>我们的工具是一个纯头文件，所有的库想依赖该文件，都会直接include它，而include操作其实就是简单的copy文件的内容，所以这段代码就会进入每个文件自身中，成为其源码的一部分。如此，只要我们把单例维护的代码放在匿名命名空间中，就可以保证其在每个文件中有且只有一个。就不用担心不同的库之间的冲突了。</p>
<h3 id="五补充">五、补充</h3>
<p>最后，我编写的这个库，并没有花费太多的时间，不过编程的过程中，确实还是感受到一点快乐的。不知不觉，现在写代码的时候，更喜欢以一种工具或是框架的角度去审核自己的作品。相比于追求编程的速度，慢慢蜕变成追求更优雅的设计，更简洁和实用的功能以及尽可能好的兼容性。</p>
<p>这里，小喵与你共同进步！</p>
]]></content>
      <categories>
        <category>C++</category>
        <category>Miscellanea</category>
      </categories>
  </entry>
  <entry>
    <title>博客服务器维护中的小技巧</title>
    <url>/2018/02/02/tricks-for-maintaining-blog-server/</url>
    <content><![CDATA[<p>这里记录了小喵的博客的服务器的一些小的技巧，包括安装和各种参数的配置，便于以后查看。不定期更新。</p>
<span id="more"></span>
<h3 id="lnmp环境的配置oneinstack">1. LNMP环境的配置——oneinstack</h3>
<p><code>LNMP</code> 环境就是 <code>Linux</code>、<code>Nginx</code>、<code>Mysql</code> 和 <code>Php</code> 这四个的组合，由于这四个都是免费的，因此在网站搭建的时候最常使用到，另一个名词是 <code>LAMP</code> ，其中 <code>A</code> 表示的是 <code>Apache</code>。但 <code>Apache</code> 比较占资源，所以我用的还是 <code>Nginx</code>。</p>
<p>这里，网上应该有超多的教程，我当时配置的时候也是参考了各种教程，但最终还是放弃了，自己去配置这些东西真的好难。于是，我就把目标转向了各种集成好的环境了。</p>
<p>如果使用的是阿里云或者腾讯云的服务器，那么直接在应用市场上中就有配置好环境的 <code>LNMP</code>。如果是自己的服务器，就可以使用 <a href="https://oneinstack.com/">https://oneinstack.com/</a>。这里提供的一键安装的脚本。同时 <strong>oneinstack</strong> 中，还提供了新建虚拟主机，新建FTP服务器，一键升级软件等各种超实用的功能，十分建议使用。</p>
<h3 id="优化php-fpm的内存占用问题">2. 优化php-fpm的内存占用问题</h3>
<p>这里，我们如果使用htop命令查看各种资源占用，会发现，<code>php-fpm</code> 这个程序居然占用了10%的内存！明明网站是空闲的，但是内存还是被占用着。</p>
<p>参考 <a href="https://segmentfault.com/a/1190000010413463">https://segmentfault.com/a/1190000010413463</a> 中的解决方案。</p>
<p>打开 <code>/usr/local/php/etc/php-fpm.conf</code> 这个文件，该文件是 <code>php-fpm</code> 的配置文件。不同的版本可能安装的地方不太一样。打开之后，有这么一段配置：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">pm = dynamic
pm.max_children = 16
pm.start_servers = 10
pm.min_spare_servers = 8
pm.max_spare_servers = 16
pm.max_requests = 2048
pm.process_idle_timeout = 10s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中 <code>pm = dynamic</code> 会使得内存中永远都有 <code>php-fpm</code> 的进程存在，这样会很大长度的浪费内存，所以把这句改成 <code>pm = ondemand</code>。变成：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">pm = ondemand
pm.max_children = 16
pm.start_servers = 10
pm.min_spare_servers = 8
pm.max_spare_servers = 16
pm.max_requests = 2048
pm.process_idle_timeout = 10s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样，只有在系统需要的时候，才回产生 <code>php-fpm</code> 的子进程。子进程会在内存中保留 <code>pm.process_idle_timeout</code> 这么久的时间之后退出，这里就是10s的时间。</p>
<p>之后重启我们的 <code>php-fpm</code>，就会发现内存占用变少了很多。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 重启php-fpm</span>
<span class="token function">service</span> php-fpm restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Miscellanea</category>
      </categories>
  </entry>
  <entry>
    <title>从0到1，手把手教你配置Caffe环境</title>
    <url>/2016/01/26/tutorial-to-build-caffe/</url>
    <content><![CDATA[<blockquote>
<p>小喵的唠叨话：之前小喵也说过，自己主要是学习图像方面的深度学习算法的，深度学习可以理解为神经网络的拓展，是近年来最火的一项技术。小喵学得不好，就不在这里卖弄了。图像中，最常用到的是CNN模型，也就是卷积神经网络（Convolutional Neural Networks）。实现CNN有许多框架，Caffe，MXNet，Tensor Flow，ConvNet等。这次主要教给大家怎么从0开始，配置自己的Caffe环境。</p>
</blockquote>
<span id="more"></span>
<p>由于是从0开始安装，如果有什么软件是大家已经装好的，就可以自行跳过。小喵的电脑是CentOS7,64位。主要按照下列的软件顺序进行安装：</p>
<ol type="1">
<li>GMP</li>
<li>MPFR</li>
<li>MPC</li>
<li>GCC 4.7.4</li>
<li>CMAKE</li>
<li>Python</li>
<li>Boost</li>
<li>Opencv：Python-Opencv</li>
<li>Glog</li>
<li>Gflags：Python-gflags</li>
<li>Google-apputils</li>
<li>Protobuf</li>
<li>Snappy</li>
<li>LevelDB：Pyhton-leveldb</li>
<li>Lmdb</li>
<li>OpenBlas</li>
<li>CUDA</li>
<li>cuDNN</li>
<li>Caffe</li>
</ol>
<p>第一步，更新系统的 <code>GCC</code> 如果是在个人的PC上进行更新，可能只需要使用 <code>yum</code> 或者 <code>apt-get</code> 等工具。小喵的实验环境是服务器，因此自己并没有root权限，还是需要按部就班的安装。</p>
<p><code>GCC</code> 依赖 <code>GMP</code>，<code>MPFR</code> 和 <code>MPC</code> 这三个库，它们主要是提供了一些数值计算等的函数。</p>
<p><strong>Tips: 编译的时候使用make命令的时候，可以加入参数-jn，可以多核一起编译，速度会快很多。</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token parameter variable">-j4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>则表示4个核一起编译。</p>
<h3 id="gmp">1，GMP</h3>
<p><code>GMP</code>，<a href="https://gmplib.org/">https://gmplib.org/</a>，一个高精度计算的库。从官网上下载得到安装文件，小喵下载的是6.1.0的版本。解压之后，使用命令:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /download/path/to/gmp/
./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/path/to/install/
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>完成安装(/path/to/install/表示你希望安装的位置)。注意prefix前面是两个<code>'-'</code>。</p>
<p>安装完成之后，修改根目录中的 <code>.bash_profile</code>。将 <code>gmp</code> 安装后的文件夹中的lib的路径加入到 <code>LD_LIBRARY_PATH</code> 中。</p>
<p><strong>注意：之后每步操作都检查安装后的文件夹中，是否有lib目录或lib64目录，如果有，则加入 <code>LD_LIBRARY_PATH</code> 中。（lib64是64位的系统的库，如果两个目录都存在，将lib64加入到 <code>LD_LIBRARY_PATH</code> 就可以）。如果发现有bin目录，则将它加入PATH中，bin目录放置的都是可执行程序，只有加进PATH里面，系统才能够找到（大家都不会希望用ls命令的时候，都写成/bin/ls吧）。配置完后，可以source一下自己的 <code>.bash_profile</code> 文件，确保当前的环境是最新的。</strong></p>
<h3 id="mpfr">2，MPFR</h3>
<p><code>MPFR</code>，<a href="http://www.mpfr.org/">http://www.mpfr.org/</a>，一个浮点数计算的库，该库对 <code>GMP</code> 有依赖，所以要在 <code>GMP</code> 之后安装。下载安装文件，小喵的是3.1.3版本。解压，使用命令。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /download/path/to/mpfr/
./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/path/to/install --with-gmp<span class="token operator">=</span>/path/to/gmp/
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的/path/to/gmp/表示上一步的gmp安装的位置。</p>
<h3 id="mpc">3，MPC</h3>
<p><code>MPC</code>，<a href="http://www.multiprecision.org/">http://www.multiprecision.org/</a>，一个复数的代数库，依赖 <code>GMP</code> 和 <code>MPFR</code>。下载安装包，版本1.0.3。解压。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /download/path/to/mpc/
./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/path/to/install/ --with-gmp<span class="token operator">=</span>/path/to/gmp/ --with-mpfr<span class="token operator">=</span>/path/to/mpfr/
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>/path/to/gmp/，/path/to/mpfr/分别表示gmp和mpfr的安装路径，以下的说明都是这种形式，不再特意强调。</p>
<h3 id="gcc">4，GCC</h3>
<p>完成上述的三个代数运算库的安装之后，则可以开始GCC的升级工作。小喵的电脑上是CentOS 7，GCC默认版本是4.4。4.4版本的GCC只能编译到4.7版本或以下的GCC，所以如果需要编译更高版本的GCC，则需要先编译较低版本的GCC，再使用新安装的GCC编译更高版本的。另外GCC编译时间较旧，可以考虑多核一起编译（还记得make -j4这个命令了吗？:-D）。</p>
<p><code>GCC</code>，<a href="https://gcc.gnu.org/">https://gcc.gnu.org/</a>，一个Linux上的强大的编译环境，提供对各种语言：<code>C/C++</code>，<code>Fortran</code>，<code>Java</code>等的编译支持。下载安装程序，这里选择4.7.4版本（不要选择更高的版本，低版本的GCC不一定能编译）。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /download/path/to/gcc/
./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/path/to/install/ --enable-threads<span class="token operator">=</span>posix --disable-checking --disable-multilib --enable-languages<span class="token operator">=</span>c,c++,fortran --with-gmp<span class="token operator">=</span>/path/to/gmp/ --with-mpfr<span class="token operator">=</span>/path/to/mpfr/ --with-mpc<span class="token operator">=</span>/path/to/mpc/
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>安装完成，不要忘记把bin目录和lib64目录分别加入 <code>PATH</code> 和 <code>LD_LIBRARY_PATH</code>。source一下后，使用 <code>gcc --version</code>，你会发现gcc的版本已经变成4.7.4了。</p>
<h3 id="cmake">5，CMAKE</h3>
<p><code>CMAKE</code>，<a href="https://cmake.org/">https://cmake.org/</a>，是一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平台的安装(编译过程)。版本3.4.1。解压。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /download/path/to/cmake/
./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/path/to/install/
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="python">6，Python</h3>
<p><code>Python</code>，<a href="https://www.python.org/">https://www.python.org/</a>，一种超好用的编程语言，有着胶水语言的美称。不仅语言简洁，相关的工具库也异常丰富。用 <code>Python</code> 可以很快的编写出测试原型，而且 <code>Caffe</code> 本身也提供了 <code>Python</code> 的接口。这里选择2.7.*版本。注意Python2.7.<em>和3.5.</em>并不完全兼容，目前主流的 <code>Python</code> 还是2.7，而且相关库的支持也比较成熟。由于还需要安装许多依赖的计算方面的库，不建议直接从官网下载。推荐下载 <code>Anaconda</code> 这个集成好的 <code>Python</code>环境。<a href="https://www.continuum.io/">https://www.continuum.io/</a>，记住，2.7.*版本。小喵这里安装好的是2.7.10。</p>
<p>下载好之后，直接运行，然后跟个提示就刻轻松安装。</p>
<p>安装完成后，需要在 <code>.bash_profile</code> 中进行基础修改。</p>
<p>假定 <code>ANACONDA_ROOT</code> 表示安装的目录。将 <code>$ANACONDA/bin/</code> 加入 <code>PATH</code>，将 <code>$ANACONDA/lib/</code> 加入 <code>LD_LIBRARY_PATH</code> 加入新变量 <code>PYTHONPATH</code>，并 <code>export</code> 出来。<code>export PYTHONPATH=$ANACONDA/lib/python2.7/site-packages</code>，source一下则配置完成。</p>
<p>如果是安装官网的 <code>Python</code>，之后可能需要再安装 <code>Numpy</code> 这个库，否则不能正确调用 <code>OpenCV</code>。<code>Anaconda</code> 已经集成了，所以我们这里不用再次安装。</p>
<h3 id="boost">7，Boost</h3>
<p><code>Boost</code>，<a href="http://www.boost.org/">http://www.boost.org/</a>，又称 <code>C++准标准库</code>。传言，如果希望自己的库可以进入C++标准库，那么可以让它成为Boost的一部分，久而久之，Boost中的精华就会融进C++标准库。如果比较关注C++标准库的发展，重看每次更新的部分，应该大多都能看到Boost的身影。Boost中提供了很多强大又稳定的库，包括智能指针，各种算法库等等。这些在Caffe中都有用到。</p>
<p>这里下载1.58.0版本，Caffe对最新的1.60.0并不完全兼容。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /download/path/to/boost/
./bootstrap.sh <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/path/to/install/
./b2 <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>加入环境后，则完成安装。</p>
<h3 id="opencv">8，OpenCV</h3>
<p><code>OpenCV</code>，<a href="http://opencv.org/">http://opencv.org/</a>，一个开源的图像处理相关的库，不仅能够进行图像的各种处理（缩放，翻转，模糊等等），还内置了许多的机器学习的算法（比如 <code>AdaBoost</code> 的人脸检测）。图像处理必备库。这里下载版本2.4.11（小喵试了2.4.9和2.4.11两个版本，都可以正确安装）。3.0或以上的版本安装可能会有问题。</p>
<p><code>OpenCV</code> 的安装需要使用 <code>cmake</code> 工具来完成 <code>configure</code> 工作。请确保之前的 <code>cmake</code> 已经安装，并加入到 <code>PATH</code>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /download/path/to/opencv/
<span class="token function">mkdir</span> build                    <span class="token comment"># 创建一个临时目录</span>
<span class="token builtin class-name">cd</span> build
ccmake <span class="token punctuation">..</span>                      <span class="token comment"># 这里使用ccmake，比cmake界面更友好</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>刚进入的时候，显示 <code>EMPTY CACHE</code>，根据提示，按 <code>c</code>，进行 <code>configure</code> 之后便可以看到配置界面，有许多的变量和其对应的值。我们主要检查以下几项 <code>PYTHON_NUMPY_INCLUDE_DIR</code>， <code>PYTHON_PACKAGES_PATH</code>， <code>SPHINX_BUILD</code> 如果之前的步骤都完成的话，这几项参数应该可以从系统中直接读取，如果发现没有读取，可能是没有加入环境变量或者安装错误。检查结束后，修改 <code>CMAKE_INSTALL_PREFIX</code> 的值，改成自己期望安装的位置。</p>
<p>在界面中，可以看到几个类似 <code>BUILD_PNG</code>， <code>BUILD_JPEG</code> 的参数，它们是图像处理的相关的库。如果系统中之前没有安装过这些库，而你需要 <code>OpenCV</code> 能够处理这些类型的文件，就把这些变量设成 <code>ON</code>，这样就会把这些库一起编译。</p>
<p>界面中有类似 <code>WITH_PNG</code>，<code>WITH_JPEG</code> 的变量，如果选成 <code>ON</code>，则 <code>OpenCV</code> 会安装对这些类型图片的支持。 <strong>Warning: 小喵在安装的时候就犯了一个错误，把 <code>WITH_PNG</code> 设成了 <code>ON</code>，但是把 <code>BUILD_PNG</code> 设成了 <code>OFF</code>，导致编译的时候找不到 <code>libpng</code> 的一些.so文件。所以如果大家需要对特殊类型图片的支持，要记得把前后都设成 <code>ON</code>。</strong></p>
<p>最后根据提示进行操作，就会生成对于的 <code>Makefile</code> 文件，则可进行下面的步骤：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>记得把bin和lib分别加入到环境变量。至此，<code>OpenCV</code> 也就装完了。</p>
<p>接下来，要让 <code>Python</code> 能够调用 <code>OpenCV</code>。 方法很简单，将 <code>%OPENCV_INSTALL_PATH%/lib/python2.7/site-packages</code> 下的文件（应该只有两个），拷贝到 <code>%ANACONDA_INSTALL_PATH%/lib/python2.7/site-packages</code> 中，即可。</p>
<p>为了保险起见，你可以打开 <code>python</code>，输入 <code>import cv2</code>，看看有没有异常，没有的话，应该就是配置成功。</p>
<h3 id="glog">9，glog</h3>
<p><code>glog</code>，<code>google-log</code>，<a href="https://github.com/google/glog">https://github.com/google/glog</a>，是google做的一项开源的项目，是一个C++的记录日志的工具。<code>Caffe</code>中有用到。可以下载源码，然后自己编译（貌似必须再装三个google的软件才可以），小喵安装的时候直接下载了release版本的程序 <a href="https://github.com/google/glog/releases">https://github.com/google/glog/releases</a>。解压，执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /download/path/to/glog/
./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/path/to/install/
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>加入lib目录。安装完成。</p>
<h3 id="gflags">10，gflags</h3>
<p><code>gflags</code>，<a href="https://github.com/gflags/gflags">https://github.com/gflags/gflags</a>，貌似是一个处理命令行的C++工具，Caffe需要用到。该工具的安装也需要cmake。解压后执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /download/path/to/gflags/
<span class="token function">mkdir</span> build
<span class="token builtin class-name">cd</span> build
ccmake <span class="token punctuation">..</span>
<span class="token comment"># 设置安装路径CMAKE_INSTALL_PREFIX</span>
<span class="token comment"># 把BUILD_SHARED_LIBS设成ON</span>
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>把lib目录加入 <code>LD_LIBRARY_PATH</code>，则完成安装。使用 <code>Python</code> 调 <code>Caffe</code> 的时候，也会用到这个库，所以需要给 <code>Python</code> 也安装对于的库。这里可以用源码安装，也可以使用 <code>pip</code> 这个工具。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> python-gflags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="google-apputils">11，google-apputils</h3>
<p>下载源码安装，或者使用 <code>pip</code> 安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> google-apputils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="protobuf">12，Protobuf</h3>
<p><code>Protobuf</code>，<a href="https://github.com/google/protobuf">https://github.com/google/protobuf</a>，又是一个google出品的软件。可以通过简单的方式定义各种语言下数据结构。Caffe中有用到。</p>
<p>下载realse版本的程序来安装，<a href="https://developers.google.com/protocol-buffers/docs/downloads">https://developers.google.com/protocol-buffers/docs/downloads</a>。解压，执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /download/path/to/protobuf/
./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/path/to/install/
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>增加python的支持：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> protobuf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="snappy">13，Snappy</h3>
<p><code>Snappy</code>，<a href="https://github.com/google/snappy">https://github.com/google/snappy</a>。可以通过源码安装，也可以下载release版本，<a href="https://github.com/google/snappy/releases/">https://github.com/google/snappy/releases/</a>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /download/path/to/snappy/
./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/path/to/install/
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="leveldb">14，leveldb</h3>
<p><code>leveldb</code>，<a href="https://github.com/google/leveldb">https://github.com/google/leveldb</a>，一个轻量级的数据库。直接下载源码，解压。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /download/path/to/leveldb/
<span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>之后直接生成了库文件。建议把生成的库文件和include文件夹都放置到合适的目录，并将库所在的目录加入 <code>LD_LIBRARY_PATH</code>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> leveldb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>增加python的支持。</p>
<h3 id="lmdb">15，LMDB</h3>
<p><code>LMDB</code>，<a href="https://github.com/glycerine/liblmdb">https://github.com/glycerine/liblmdb</a>，也是一个轻量级的数据库。解压之后，修改里面的 <code>Makefile</code> 文件的 <code>prefix</code> 为需要安装的位置。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="openblas">16，OpenBlas</h3>
<p><code>OpenBlas</code>，<a href="http://www.openblas.net/">http://www.openblas.net/</a>，一个代数库，同为代数库的还有 <code>MKL</code>，<code>ATLAS</code>。解压，执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span>/path/to/install/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>完成安装。</p>
<h3 id="cuda">17，CUDA</h3>
<p><code>CUDA</code>，<a href="https://developer.nvidia.com/cuda-downloads">https://developer.nvidia.com/cuda-downloads</a>，GPU支持。小喵下载的是 <code>cuda_7.0.28_linux.run</code> 这个版本的安装程序。官网说明的安装过程需要用root执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">sh</span> cuda_7.0.28_linux.run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>但事实上，不需要 <code>sudo</code> 也可以执行安装。非root的话，可能不能进行显卡驱动的安装，我这里已经有了驱动，所以不需要root安装。</p>
<p>另外驱动和cuda的版本必须一致，不然后出现cuda不能启动的错误。直接:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> cuda_7.0.28_linux.run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>之后根据提示安装即可。</p>
<h3 id="cudnn">18，CUDNN</h3>
<p><code>cuDNN</code>，<a href="https://developer.nvidia.com/cudnn">https://developer.nvidia.com/cudnn</a>，是CUDA的加速程序。解压之后貌似就算成功。CUDA7.0建议使用CuDNN v3。</p>
<h3 id="caffe">19，CAFFE</h3>
<p><code>Caffe</code>，<a href="http://caffe.berkeleyvision.org/">http://caffe.berkeleyvision.org/</a>，卷积神经网络的训练框架。在 <code>github</code> 上下载源码，<a href="https://github.com/BVLC/caffe">https://github.com/BVLC/caffe</a>。修改 <code>Makefile.json</code> 文件, 这里需要修改很多地方，需要自对照着修改。最后需要执行:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span>
<span class="token function">make</span> pycaffe
<span class="token comment"># 如果需要验证是否安装成功，使用下面的命令</span>
<span class="token comment"># make test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>则完成安装！</p>
<p>以上便是整套Caffe环境的安装教程。如果有任何错误，请大家指正。</p>
<p><strong>转载请注明出处。</strong></p>
]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
  </entry>
  <entry>
    <title>vim配置</title>
    <url>/2018/11/13/vim/</url>
    <content><![CDATA[<p>下面是我的VIM的主要配置。应该就是网上找到的一个，加了点功能。权当在这里备份一下了。 将下面的内容写入自己的<code>~/.vimrc</code>文件即可。</p>
<span id="more"></span>
<p>针对自动跳转到上次关闭位置的这个功能，我在Ubuntu 14这个系统上失败了一次。是由于viminfo文件的权限不对。使用<code>ls -l ~/.viminfo</code>。如果发现其创建用户不是当前用户的话，那么可以将其删除。下次打开vim的时候会自动新建。这样就搞定了！</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">"自动跳到上次的行
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 &amp;&amp; line("'\"") &lt;= line("$") | exe "normal! g'\"" | endif
endif

set backspace=indent,eol,start

"去掉vi一致性
filetype plugin indent on

" 定义F9为粘贴模式
set pastetoggle=&lt;F9>

"设置编码
set encoding=utf-8
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
set fileencodings=utf-8,ucs-bom,chinese

"语言设置
set langmenu=zh_CN.UTF-8

"设置语法高亮
syntax enable
syntax on

"设置配色方案
"colorscheme evening

"高亮显示匹配的括号
set showmatch

"设置缩进
set tabstop=4
set expandtab
retab!
set softtabstop=4
set shiftwidth=4
set autoindent
set cindent
if &amp;term=="xterm"
    set t_Co=8
    set t_Sb=^[[4%dm
    set t_Sf=^[[3%dm
endif

"打开文件类型自动检测功能
filetype on


"设置taglist
let Tlist_Show_One_File=0   "显示多个文件的tags
let Tlist_File_Fold_Auto_Close=1 "非当前文件，函数列表折叠隐藏
let Tlist_Exit_OnlyWindow=1 "在taglist是最后一个窗口时退出vim
let Tlist_Use_SingleClick=1 "单击时跳转
let Tlist_GainFocus_On_ToggleOpen=1 "打开taglist时获得输入焦点
let Tlist_Process_File_Always=1 "不管taglist窗口是否打开，始终解析文件中的tag

"设置WinManager插件
let g:winManagerWindowLayout='FileExplorer|TagList'
nmap wm :WMToggle&lt;cr>
map &lt;silent> &lt;F9> :WMToggle&lt;cr> "将F9绑定至WinManager,即打开WimManager

"设置CSCOPE
set cscopequickfix=s-,c-,d-,i-,t-,e- "设定是否使用quickfix窗口显示cscope结果

"设置一键编译
map &lt;F6> :make&lt;CR>

"设置自动补全
filetype plugin indent on   "打开文件类型检测
set completeopt=longest,menu "关掉智能补全时的预览窗口

"启动vim时如果存在tags则自动加载
if exists("tags")
    set tags=./tags
endif

"设置按F12就更新tags的方法
map &lt;F12> :call Do_CsTag()&lt;CR>
nmap &lt;C-@>s :cs find s &lt;C-R>=expand("&lt;cword>")&lt;CR>&lt;CR>:copen&lt;CR>
nmap &lt;C-@>g :cs find g &lt;C-R>=expand("&lt;cword>")&lt;CR>&lt;CR>
nmap &lt;C-@>c :cs find c &lt;C-R>=expand("&lt;cword>")&lt;CR>&lt;CR>:copen&lt;CR>
nmap &lt;C-@>t :cs find t &lt;C-R>=expand("&lt;cword>")&lt;CR>&lt;CR>:copen&lt;CR>
nmap &lt;C-@>e :cs find e &lt;C-R>=expand("&lt;cword>")&lt;CR>&lt;CR>:copen&lt;CR>
nmap &lt;C-@>f :cs find f &lt;C-R>=expand("&lt;cfile>")&lt;CR>&lt;CR>:copen&lt;CR>
nmap &lt;C-@>i :cs find i ^&lt;C-R>=expand("&lt;cfile>")&lt;CR>$&lt;CR>:copen&lt;CR>
nmap &lt;C-@>d :cs find d &lt;C-R>=expand("&lt;cword>")&lt;CR>&lt;CR>:copen&lt;CR>
function Do_CsTag()
        let dir = getcwd()
        if filereadable("tags")
            if(g:iswindows==1)
                let tagsdeleted=delete(dir."\\"."tags")
            else
                let tagsdeleted=delete("./"."tags")
            endif
            if(tagsdeleted!=0)
                echohl WarningMsg | echo "Fail to do tags! I cannot delete the tags" | echohl None
                return
            endif
        endif
       if has("cscope")
            silent! execute "cs kill -1"
        endif

        if filereadable("cscope.files")
            if(g:iswindows==1)
                let csfilesdeleted=delete(dir."\\"."cscope.files")
            else
                let csfilesdeleted=delete("./"."cscope.files")
            endif
            if(csfilesdeleted!=0)
                echohl WarningMsg | echo "Fail to do cscope! I cannot delete the cscope.files" | echohl None
                return
            endif
        endif
        if filereadable("cscope.out")
            if(g:iswindows==1)
                let csoutdeleted=delete(dir."\\"."cscope.out")
            else
                let csoutdeleted=delete("./"."cscope.out")
            endif
            if(csoutdeleted!=0)
                echohl WarningMsg | echo "Fail to do cscope! I cannot delete the cscope.out" | echohl None
                return
            endif
        endif
       if(executable('ctags'))
            "silent! execute "!ctags -R --c-types=+p --fields=+S *"
            silent! execute "!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q ."
        endif

        if(executable('cscope') &amp;&amp; has("cscope") )
            if(g:iswindows!=1)
                silent! execute "!find . -name '*.h' -o -name '*.c' -o -name '*.cpp' -o -name '*.java' -o -name '*.cs' > cscope.files"
            else
                silent! execute "!dir /s/b *.c,*.cpp,*.h,*.java,*.cs >> cscope.files"
            endif
            silent! execute "!cscope -b"
            execute "normal :"

            if filereadable("cscope.out")
                execute "cs add cscope.out"
            endif
        endif
endfunction
"设置默认shell
set shell=bash

"设置VIM记录的历史数
set history=1000

"设置当文件被外部改变的时侯自动读入文件
if exists("&amp;autoread")
    set autoread
endif

"设置ambiwidth
set ambiwidth=double

"设置文件类型
set ffs=unix,dos,mac

"设置增量搜索模式
set incsearch

"设置静音模式
set noerrorbells
set novisualbell
set t_vb=

"不要备份文件
set nobackup
set nowb

"显示行号
set nu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另外，附上Ubuntu下，VIM 8升级的命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository ppa:jonathonf/vim
<span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">vim</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Miscellanea</category>
      </categories>
  </entry>
  <entry>
    <title>《来自新世界》</title>
    <url>/2020/04/08/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%9D%A5%E8%87%AA%E6%96%B0%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<p>看完之前的《如何有效阅读一本书》之后，我就很想把这本《来自新世界》再看一遍。现在每天上下班通勤时间接近3h，正好用来看看书。</p>
<p>第一次看这本书也是在Kindle上。忘记是什么原因了，似乎是豆瓣上看到了这本书的评分还挺高，内容什么的并没有看。等到翻开的时候，发觉这是本偏古风的书，主人翁和一群小伙伴一起快乐的成长。随后又提到咒术，发现这居然是本带有法术的书。等到后来看到拟蓑白之后，咦，这个剧情真不简单。居然是本描写未来的科幻书。</p>
<p>后来没花几天就读完了。强大而又备受限制的咒术，各怀鬼胎的化鼠，变态发育的气球狗……各式各样的生物被平淡无奇的点出，早已习以为常的存在，他们才是故事的原住民，我们才是访客。</p>
<p>最后人类面临浩劫，而敌人却恰恰是对人类唯唯诺诺的化鼠一行。主人公等人最终在另一波化鼠的协助下在遗迹寻找最后的救赎。当然最终是人类战胜了化鼠。</p>
<p>在整个故事里面，最令我感觉意外的就是心里暗示的存在。不能伤害同类，这既是一种保护，同时也是最可怕的枷锁。</p>
<p>现在是我第二遍读这本书，着实发现了很多不一样的东西。</p>
<p>本书的真实性。在第二遍阅读的时候，我其实已经知道了大人会通过各种手段抹杀存在和记忆。那么本书中所有的重要决定似乎都是女主做出的。而这，究竟是不是他自己做出的呢。</p>
<p>在小学毕业进入全人班的时候，长老会试探孩子们的同理心。第一次看的时候感觉这个场景稍微有点奇怪，第二遍的时候才恍然大悟，这原来是在进行筛选。同时，不断的有人消失但是大家却毫无知觉，这个虽然在第一遍的时候就觉得有问题，第二遍的时候才能真切的感受到小孩子被不当做人类看待的现实。</p>
<p><del>过了几天</del></p>
<p>终于看到了抓拟蓑白的地方了。小女主通过虎蛱蟹的帮助（这种螃蟹体型堪比人了，蓑白的大小也有小孩那么大），终于抓到了拟蓑白，然后从中问到了这个世界的真相。世界在千年前就基本上毁灭了。由于部分人得到的超能力，其中有个小男孩利用超能力作了很多恶，激起了全世界普通人对能力者的反击，导致能力者数目锐减。后来能力者中拥有了堪比核弹的超能力，将普通人上击垮。社会演变成多种能力者的部落。</p>
<p>掠夺者因暴躁而消亡，独裁者因残酷额湮灭。幸存者将人类自降为动物，然后使用动物的基因和行为学来约束人类本身。这时候最可怕的是任何一个能力者都拥有威力巨大的咒力，只要有一个人心术不正，或者一瞬间的暴戾，都会给社会带来巨大的无法挽回的损失。这也是小说一直暗示的对学生们进行严苛选择的原因——抹杀一切破坏的种子。</p>
]]></content>
      <categories>
        <category>Reading</category>
      </categories>
  </entry>
  <entry>
    <title>架构小试之IDL</title>
    <url>/2021/11/16/arch-idl/</url>
    <content><![CDATA[<p>为什么IDL的介绍也放在这里呢？一方面是我想不到放哪里，另一方面是之前说到，“架构”即“设计”，那么IDL、RPC框架也算是设计的一部分。不合理的选型在后续维护上会带来不小的麻烦。</p>
<p>本文主要介绍我用过的一些IDL，并结合真实案例，分析他们的优劣。</p>
<span id="more"></span>
<h2 id="idl的作用">IDL的作用</h2>
<p>在我接手第一个项目的时候，就问了一个问题：这个idl文件夹是做什么的？</p>
<p>一年之后，当对新人介绍我们项目结构的时候，我都会忍不住试探的问句，你知道idl是什么意思吗？发现大家和我一样不了解，我才心满意足的解释一番。</p>
<p>IDL其实有很多的含义，在这里一般可以理解为接口描述语言（Interface description language），即描述服务的接口，类似我们C程序的接口声明，包含：<strong>接口名</strong>和输入输出的<strong>数据结构</strong>。</p>
<p>一般每个服务均有自己的IDL文件（也可以是多个服务依赖相同的IDL文件，因为懒，或者其他巧妙的目的），比如我现在公司常用的服务是基于C++和Go的，使用Thrift作为IDL。</p>
<p>Thrift提供了工具，可以根据IDL编译生成服务端和客户端的代码：</p>
<ul>
<li>对于服务端而言，我们只需要继承生成的Server类，然后实现具体的接口的内容即可。</li>
<li>客户端（即调用方），IDL可以生成Client类，方便的进行调用。</li>
</ul>
<p>因此，一个接口的声明，不仅指导当前服务的实现，同时也是对上游服务的约定。因此一般公司会将所有服务的IDL文件统一维护。这样只需要知道服务名和接口声明，即可完成RPC服务的接入。</p>
<p>像Thrift这种IDL可以定义数据结构和接口，而有些IDL只可以定义数据结构。IDL生成的数据结构一般均支持序列化和反序列化，并且跨端、跨语言。这种本身不定义接口的IDL，也可以以string的方式搭配其他的RPC框架来使用（Thrift，gRPC等）。</p>
<p>这里我们主要介绍几种典型的IDL：JSON、ProtoBuf、Thrift。当然IDL还有XML、FlatBuffer、BSON等，感兴趣可以自行查阅。</p>
<h2 id="几类常见的idl">几类常见的IDL</h2>
<h3 id="json">JSON</h3>
<p><strong>JSON</strong>，JavaScript Object Notation，这个大家应该都了解，结构简单，可读性好，一般在Web开发中最常用到，是RESTFul API的首选。</p>
<p>JSON只支持Object，Array和数值三种结构，Object和Array支持相互嵌套，标准的JSON的数值仅有：double/boolean/string这三种。以下是个例子：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
	<span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"miao"</span><span class="token punctuation">,</span>
	<span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
	<span class="token property">"skill"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token punctuation">&#123;</span>
			<span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"paint"</span><span class="token punctuation">,</span>
			<span class="token property">"level"</span><span class="token operator">:</span> <span class="token number">1</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        	<span class="token punctuation">&#123;</span>
			<span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"coding"</span><span class="token punctuation">,</span>
			<span class="token property">"level"</span><span class="token operator">:</span> <span class="token number">2</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>像C++的项目，一般直接使用RapidJSON这个库，他的性能是十分优秀的，并且支持拓展的数据类型。如果是纯C的项目，可以考虑cJSON，我曾经还提过MR😁。</p>
<blockquote>
<p>这里有个有意思的事情是，我之前编写过一个工具，可以将程序的中间结果Dump成JSON格式用于Debug。但是有同事通过JSON的在线格式化工具查看的时候，数值看起来都被截断了，数值的后几位都是0。 最后发现是因为网页版的工具只支持double，而RapidJSON可以准确的序列化出int64的数据，int64到double的转换导致了精度的丢失。闹了个乌龙。</p>
</blockquote>
<p>那么公司内部服务间的通信使用JSON是一个好的选择吗？</p>
<p>我的观点是，这<strong>不是</strong>一个好的选择。（虽然现实是，我所在的公司经常在服务间传JSON）</p>
<p>有以下几个原因：</p>
<ol type="1">
<li>没有Schema</li>
<li>带宽占用大</li>
<li>序列化和反序列化的时间开销</li>
<li>解析复杂</li>
</ol>
<p>首先，JSON没有标准的Schema（RapidJSON提供了定义Schema的机制，但是校验JSON的开销也很大），比如我们在拿到数据之前，是不知道这个string中存在哪些数据，也不能假定任意数据是存在的。这会造成我们在获取任意的数据时，必须做各种判断，设置兜底值。</p>
<p>JSON序列化的string一般也会很长，尤其数字的序列化，3.14159265359，这需要13个字节来存放。而实际上它是一个double，至多8个字节即可。</p>
<p>JSON的序列化和反序列化也相比其他IDL要慢了一些，比如上面的数字，理论上仅对二进制进行操作即可，而JSON必须转成string。其次JSON序列化需要填充key和一些<code>,[]&#123;&#125;</code>的字符。如果需要传输二进制数据的话，JSON一般会需要转成Base64编码，整体的编码和体积又会进一步增大。</p>
<p>最后是解析很复杂，由于没有Schema，导致每个字段都需要做解析和判断。另外很多JSON的解析库，对于Object和Array，底层使用链表来实现的，查询效率是线性的。</p>
<h3 id="protobuf">Protobuf</h3>
<p>Protocol Buffers，简称PB，是一种数据描述的工具，它可以定义丰富的数据结构，支持基础数据类型(int, float, string等)、常用容器list和map，以及自定义的组合数据类型(Message)。</p>
<p>PB有2和3两个版本，二者并不兼容，以下是PB2的Schema的定义：</p>
<pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf"><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">"proto2"</span><span class="token punctuation">;</span>

<span class="token keyword">package</span> med<span class="token punctuation">;</span>                  <span class="token comment">// 包名,相对于C++的namespace</span>

<span class="token keyword">message</span> <span class="token class-name">Skill</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">required</span> <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">required</span> <span class="token builtin">int32</span> level <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">message</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">required</span> <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// required表示该字段必须要有</span>
  <span class="token keyword">optional</span> <span class="token builtin">int32</span> age <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment">// optional表示该字段可选</span>
  <span class="token keyword">repeated</span> <span class="token positional-class-name class-name">Skill</span> skill <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment">// 多个Skill结构</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过<code>protoc user.proto —python_out=.</code> 编译生成了<code>user_pb2.py</code>文件。</p>
<p>我们简单使用一下这个IDL，这里使用的Proto2生成的：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""
pip3 install -i https://pypi.douban.com/simple/ protobuf
"""</span>

<span class="token keyword">import</span> user_pb2
<span class="token keyword">import</span> json

<span class="token comment"># raw data</span>
user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'miao'</span><span class="token punctuation">,</span>
    <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token string">'skill'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
            <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'paint'</span><span class="token punctuation">,</span>
            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token number">1</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
            <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'coding'</span><span class="token punctuation">,</span>
            <span class="token string">'level'</span><span class="token punctuation">:</span> <span class="token number">2</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># convert to pb</span>
pb_user <span class="token operator">=</span> user_pb2<span class="token punctuation">.</span>User<span class="token punctuation">(</span><span class="token punctuation">)</span>
pb_user<span class="token punctuation">.</span>name <span class="token operator">=</span> user<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>
pb_user<span class="token punctuation">.</span>age <span class="token operator">=</span> user<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> skill <span class="token keyword">in</span> user<span class="token punctuation">[</span><span class="token string">'skill'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    pb_skill <span class="token operator">=</span> user_pb2<span class="token punctuation">.</span>Skill<span class="token punctuation">(</span><span class="token punctuation">)</span>
    pb_skill<span class="token punctuation">.</span>name <span class="token operator">=</span> skill<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>
    pb_skill<span class="token punctuation">.</span>level <span class="token operator">=</span> skill<span class="token punctuation">[</span><span class="token string">'level'</span><span class="token punctuation">]</span>
    pb_user<span class="token punctuation">.</span>skill<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pb_skill<span class="token punctuation">)</span>

<span class="token comment"># convert to JSON</span>
<span class="token comment">#  the given separators will make it compact</span>
json_user <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>user<span class="token punctuation">,</span> separators<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"============ JSON ============"</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Size: &#123;&#125;\nContent:\n\t&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>json_user<span class="token punctuation">)</span><span class="token punctuation">,</span> json_user<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"============  PB  ============"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Size: &#123;&#125;\nContext:\n\t&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>pb_user<span class="token punctuation">.</span>ByteSize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pb_user<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token triple-quoted-string string">'''
OUTPUT:
============ JSON ============
Size: 89
Content:
&#123;"name":"miao","age":18,"skill":[&#123;"name":"paint","level":1&#125;,&#123;"name":"coding","level":2&#125;]&#125;
============  PB  ============
Size: 31
Context:
b'\n\x04miao\x10\x12\x1a\t\n\x05paint\x10\x01\x1a\n\n\x06coding\x10\x02'
'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出，首先PB是有Schema的，任何人只要拿到Schema，就可以容易的解析PB数据。</p>
<p>PB序列化出的数据比JSON小了很多。只有大约1/3的大小。（这里主要是节省了JSON的Key的部分）。同时一般情况下，PB的序列化和反序列化的速度比JSON更快（有没有PB更慢的情况呢？后续案例会提到）。</p>
<p>在读取值的情况下，JSON需要根据key去查找具体的数据，而PB的每个成员定义最终都是一个函数（C++中是函数，Python更像是成员变量），可以用调用函数的方式去取值，节省了一次查找的开销，因此读取的速度极高。</p>
<p>另外PB支持反射，既可以输入一个string，可以通过反射的方式获取到他的值，但是PB反射的用法比较复杂，这个可以单独写篇博客来介绍。</p>
<p>关于PB，其实也有许多坑的地方。比如PB2和PB3不兼容，PB3没有optional字段，PB的库版本不匹配容易出错等。所以我们尽量把PB2和3看成两个工具，一开始就决定好使用哪个。</p>
<p>与PB十分相似的有个IDL是FlatBuffer，他和PB支持的数据类型基本一致，但在构建对象的时候，保证了数据是原始数据且内存分布和IDL定义一致。带来的好处是，FlatBuffer序列化的字符串，可以直接读取，而不需要反序列的操作，因此解码时间可以理解为0，在游戏行业应用较多。</p>
<h3 id="thrift">Thrift</h3>
<p>Thrift和上面两个存在本质的不同。</p>
<p>Thrift不仅可以定义数据结构，这一点和PB相同，同时还可以定义RPC的接口。使用相关的工具，可以方便的生成RPC的Server和Client的代码。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Skill</span> <span class="token punctuation">&#123;</span>
    <span class="token number">1</span><span class="token operator">:</span> string name<span class="token punctuation">,</span>
    <span class="token number">2</span><span class="token operator">:</span> i32 level<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">struct</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
    <span class="token number">1</span><span class="token operator">:</span> string name<span class="token punctuation">,</span>
    <span class="token number">2</span><span class="token operator">:</span> i32 age<span class="token punctuation">,</span>
    <span class="token number">3</span><span class="token operator">:</span> list<span class="token operator">&lt;</span>Skill<span class="token operator">></span> skill<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">struct</span> <span class="token class-name">Req</span> <span class="token punctuation">&#123;</span>
    <span class="token number">1</span><span class="token operator">:</span> string log_id<span class="token punctuation">,</span>
    <span class="token number">2</span><span class="token operator">:</span> User user<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">struct</span> <span class="token class-name">Rsp</span> <span class="token punctuation">&#123;</span>
    <span class="token number">1</span><span class="token operator">:</span> string log_id<span class="token punctuation">,</span>
    <span class="token number">2</span><span class="token operator">:</span> string data<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

service EstimateServer <span class="token punctuation">&#123;</span>
    Rsp <span class="token function">estimate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span> Req<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>thrift --gen py demo.thrift</code> 命令可以生成对应的python代码，这里默认在<code>gen-py</code>文件夹。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> thrift<span class="token punctuation">.</span>transport <span class="token keyword">import</span> TSocket
<span class="token keyword">from</span> thrift<span class="token punctuation">.</span>transport <span class="token keyword">import</span> TTransport
<span class="token keyword">from</span> thrift<span class="token punctuation">.</span>protocol <span class="token keyword">import</span> TBinaryProtocol
<span class="token keyword">from</span> thrift<span class="token punctuation">.</span>server <span class="token keyword">import</span> TServer
<span class="token keyword">import</span> sys

sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"./gen-py/"</span><span class="token punctuation">)</span>
<span class="token keyword">from</span> demo <span class="token keyword">import</span> EstimateServer

<span class="token keyword">class</span> <span class="token class-name">EstimateHandler</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token keyword">def</span> <span class="token function">estimate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">:</span>
        user <span class="token operator">=</span> req<span class="token punctuation">.</span>user
        rsp <span class="token operator">=</span> EstimateServer<span class="token punctuation">.</span>Rsp<span class="token punctuation">(</span>log_id<span class="token operator">=</span>req<span class="token punctuation">.</span>log_id<span class="token punctuation">)</span>
        msg <span class="token operator">=</span> <span class="token string">'hi~ &#123;&#125;, Your Ability: \r\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token keyword">for</span> skill <span class="token keyword">in</span> user<span class="token punctuation">.</span>skill<span class="token punctuation">:</span>
            msg <span class="token operator">+=</span> <span class="token string">'    skill: &#123;&#125; level: &#123;&#125;\r\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>skill<span class="token punctuation">.</span>name<span class="token punctuation">,</span> skill<span class="token punctuation">.</span>level<span class="token punctuation">)</span>
        rsp<span class="token punctuation">.</span>data <span class="token operator">=</span> msg
        <span class="token keyword">return</span> rsp

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token comment"># 创建处理器</span>
    handler <span class="token operator">=</span> EstimateHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>
    processor <span class="token operator">=</span> EstimateServer<span class="token punctuation">.</span>Processor<span class="token punctuation">(</span>handler<span class="token punctuation">)</span>

    <span class="token comment"># 监听端口</span>
    transport <span class="token operator">=</span> TSocket<span class="token punctuation">.</span>TServerSocket<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">)</span>

    <span class="token comment"># 选择传输层</span>
    tfactory <span class="token operator">=</span> TTransport<span class="token punctuation">.</span>TBufferedTransportFactory<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># 选择传输协议</span>
    pfactory <span class="token operator">=</span> TBinaryProtocol<span class="token punctuation">.</span>TBinaryProtocolFactory<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># 创建服务端</span>
    server <span class="token operator">=</span> TServer<span class="token punctuation">.</span>TThreadPoolServer<span class="token punctuation">(</span>processor<span class="token punctuation">,</span> transport<span class="token punctuation">,</span> tfactory<span class="token punctuation">,</span> pfactory<span class="token punctuation">)</span>

    <span class="token comment"># 设置连接线程池数量</span>
    server<span class="token punctuation">.</span>setNumThreads<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

    <span class="token comment"># 启动服务</span>
    server<span class="token punctuation">.</span>serve<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> thrift <span class="token keyword">import</span> Thrift
<span class="token keyword">from</span> thrift<span class="token punctuation">.</span>transport <span class="token keyword">import</span> TSocket
<span class="token keyword">from</span> thrift<span class="token punctuation">.</span>transport <span class="token keyword">import</span> TTransport
<span class="token keyword">from</span> thrift<span class="token punctuation">.</span>protocol <span class="token keyword">import</span> TBinaryProtocol
<span class="token keyword">import</span> sys
sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"./gen-py/"</span><span class="token punctuation">)</span>

<span class="token keyword">from</span> demo <span class="token keyword">import</span> EstimateServer

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    transport <span class="token operator">=</span> TSocket<span class="token punctuation">.</span>TSocket<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span>
    transport <span class="token operator">=</span> TTransport<span class="token punctuation">.</span>TBufferedTransport<span class="token punctuation">(</span>transport<span class="token punctuation">)</span>
    protocol <span class="token operator">=</span> TBinaryProtocol<span class="token punctuation">.</span>TBinaryProtocol<span class="token punctuation">(</span>transport<span class="token punctuation">)</span>
    client <span class="token operator">=</span> EstimateServer<span class="token punctuation">.</span>Client<span class="token punctuation">(</span>protocol<span class="token punctuation">)</span>

    user <span class="token operator">=</span> EstimateServer<span class="token punctuation">.</span>User<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'miao'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span>
    user<span class="token punctuation">.</span>skill <span class="token operator">=</span> <span class="token punctuation">[</span>
        EstimateServer<span class="token punctuation">.</span>Skill<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'paint'</span><span class="token punctuation">,</span> level<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        EstimateServer<span class="token punctuation">.</span>Skill<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'coding'</span><span class="token punctuation">,</span> level<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>

    <span class="token comment"># 连接服务端</span>
    transport<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    rsp <span class="token operator">=</span> client<span class="token punctuation">.</span>estimate<span class="token punctuation">(</span>EstimateServer<span class="token punctuation">.</span>Req<span class="token punctuation">(</span>log_id<span class="token operator">=</span><span class="token string">"10086"</span><span class="token punctuation">,</span> user<span class="token operator">=</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'log_id: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>rsp<span class="token punctuation">.</span>log_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>rsp<span class="token punctuation">.</span>data<span class="token punctuation">)</span>

    <span class="token comment"># 断连服务端</span>
    transport<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token triple-quoted-string string">"""
log_id: 10086
hi~ miao, Your Ability: 
    skill: paint level: 1
    skill: coding level: 2
"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Thrift的序列化有点复杂，感兴趣的可以查看<code>client.estimate</code>的源代码，我们大致可以知道，Thrift的序列化的体积和PB应该类似。</p>
<p>Thrift和PB支持的数据类型基本上一致，但是同时支持了RPC接口的定义。但是比较遗憾的是Thrift不支持反射。当字段太多的时候，想支持参数解析的配置化，就比较麻烦。</p>
<h2 id="idl之间的对比和选择">IDL之间的对比和选择</h2>
<p>首先给出上面三种IDL的各类情况：</p>
<table>
<thead>
<tr class="header">
<th>IDL</th>
<th style="text-align: center;">编解码</th>
<th style="text-align: center;">体积</th>
<th style="text-align: center;">反射</th>
<th style="text-align: center;">RPC接口</th>
<th style="text-align: center;">Schema</th>
<th style="text-align: center;">可读性</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>PB</td>
<td style="text-align: center;">快</td>
<td style="text-align: center;">小</td>
<td style="text-align: center;">支持</td>
<td style="text-align: center;">不支持</td>
<td style="text-align: center;">支持</td>
<td style="text-align: center;">需解码</td>
</tr>
<tr class="even">
<td>Thrift</td>
<td style="text-align: center;">快</td>
<td style="text-align: center;">小</td>
<td style="text-align: center;">不支持</td>
<td style="text-align: center;">支持</td>
<td style="text-align: center;">支持</td>
<td style="text-align: center;">需解码</td>
</tr>
<tr class="odd">
<td>JSON</td>
<td style="text-align: center;">慢</td>
<td style="text-align: center;">大</td>
<td style="text-align: center;">支持</td>
<td style="text-align: center;">不支持</td>
<td style="text-align: center;">-</td>
<td style="text-align: center;">好</td>
</tr>
</tbody>
</table>
<p>由于这里Thrift是用来定义服务的，因此一定会被用到，这里主要讨论的是一次RPC调用时，内部的具体数据的选择。</p>
<p>以下我们分场景讨论。</p>
<h3 id="ab参">AB参</h3>
<p>AB参指是我们通过实验平台下发实验的参数。一般我们在开发完一个功能之后，并不一定会立刻上线推全，而是在线上保留新旧两套逻辑，再通过平台下发参数来控制分别启用新旧逻辑。用于做对比实验。</p>
<p>一般AB参会随着请求下发到每个服务。如果AB实验得到了具体的结论，就可以固化AB参（删掉旧代码，或者全量新的AB参）。</p>
<p>那么一个合格的AB参选型需要满足：</p>
<ol type="1">
<li>易于构造</li>
<li>体积小</li>
<li>组织灵活</li>
<li>解析速度快</li>
<li>Schema简单</li>
</ol>
<p>先说结论，这里优先考虑JSON和PB，PB依赖一些额外的工作。单纯使用Thrift不可行。</p>
<p>这里排除直接使用PB和Thrift的Map结构的情况，因为这样和JSON几乎等价，表达能力却不如JSON。</p>
<p>首先，JSON是很适合的选择。它的构造很简单，组织灵活，如果数据量不大的话，解析速度也还可以。同时由于支持反射，一些逻辑的配置化也比较方便的实现。并且基本上所有的语言都可以很好的支持。原生支持数据透传，不依赖上下游的服务升级。</p>
<p>缺点是当数据量比较大的时候，JSON会占用很大一部分服务的CPU和带宽。</p>
<p>那么PB和Thrift有什么问题呢？核心是数据传递的完整性。另外Thrift不支持反射也是个硬伤。</p>
<p>假设服务调用是A-&gt;B-&gt;C，C是最下游的服务，我们的代码写在C中。新增AB参时，我们在IDL中增加一个字段。在开发上线完C后，A、B可能也需要同步升级以支持透传参数。不然在开实验时，A、B无法将数据透传到下游，影响实验的发布。Thrift的参数直接体现在RPC接口中，更新字段必须重新上线，因此这里Thrift就不太适合。</p>
<p>而PB本身可以序列化成String放在请求里面，因此如果是透传全量的AB参，这是可以保证的。</p>
<p>另一种情况是，B这个服务对AB参做了拆分，然后仅透传其中的一部分给C。那么如果B的IDL是旧版的，那么还能完成透传吗？这里其实PB是有相关的支持的。</p>
<p>PB2直接支持低版本透传高版本的字段。</p>
<blockquote>
<p><a href="https://developers.google.cn/protocol-buffers/docs/proto?hl=zh-cn#updating">PB2</a></p>
<p>Any new fields that you add should be optional or repeated. This means that any messages serialized by code using your "old" message format can be parsed by your new generated code, as they won't be missing any required elements. You should set up sensible default values for these elements so that new code can properly interact with messages generated by old code. Similarly, messages created by your new code can be parsed by your old code: old binaries simply ignore the new field when parsing. However, the unknown fields are not discarded, and if the message is later serialized, the unknown fields are serialized along with it – so if the message is passed on to new code, the new fields are still available.</p>
</blockquote>
<p>PB3，在3.5之前会丢弃新字段，3.5及以后会透传。</p>
<blockquote>
<p><a href="https://developers.google.cn/protocol-buffers/docs/proto3?hl=zh-cn#unknowns">PB3</a></p>
<p>Originally, proto3 messages always discarded unknown fields during parsing, but in version 3.5 we reintroduced the preservation of unknown fields to match the proto2 behavior. In versions 3.5 and later, unknown fields are retained during parsing and included in the serialized output.</p>
</blockquote>
<p>当然这个特性是PB所支持的，如果使用其他的IDL，也需要提前调研一下。</p>
<p>其实还有个问题是实验平台的支持。</p>
<p>一般公司会都有个实验平台，在上面我们通过可视化的方式即可进行实验的配置。使用PB的话，意味着新增AB参时，都需要在平台进行注册，否则平台不认识，无法正确写入字段。当然对AB参的更严格的监管，其实也是好事，可以为整个服务链路做更好的监控，这取决于公司是否愿意投入人力去解决。</p>
<h3 id="正排">正排</h3>
<p>我们经常听到倒排索引这个概念，其实正排更常见。比如存放用户的信息，一般就是一个map，key是user_id，val是用户的具体信息。</p>
<p>提到KV存储，我们很容易想到Redis，Memcached，LMDB等工具，具体的选择以后再讨论。一般正排是独立的一个服务，对于正排的查询就会是一次RPC请求。因此，正排中的val一般是序列化好的字符串，以减少再次序列化的开销。</p>
<p>这里就是PB的极好的应用场景。</p>
<p>对于一个正排服务，一般会将数据分shard然后放进内存，RPC是直接读取了内存的数据。这种服务一般瓶颈容易出现在内存和带宽上，压缩率越高，就意味着更少的资源。PB拥有极高的压缩率，序列化和反序列化均很快，又支持反射。</p>
<p>另外，如果一个val存放了过多的字段，而我们只想获取少部分字段时，由于服务端不方便做解码，我们必须一次请求所有的数据，这样就会带来带宽上的浪费。一般的解决方案是将正排的val做拆分。大val时，数据库的选型也是个问题，比如Redis对大的val支持并不好。这个我们后续会再介绍。</p>
<h3 id="稀疏字段的数据">稀疏字段的数据</h3>
<p>这是指一个数据的定义有1000个字段，但是一条记录可能只会填充其中的几十个字段的情况。</p>
<p>常见于埋点数据，还有上面AB参（随着时间推移，很多无用的AB参未及时清理）。</p>
<p>这种情况下，PB和JSON哪个更好的？我们没有一个比较明确的答案。</p>
<p>这里碰到了一个案例，有同事将埋点数据从JSON改成了PB，然后重构了整条链路之后，发现优化前后CPU和内存均持平。</p>
<p>推测原因是，一条JSON只保存了几十个字段的KV，而PB保存了所有字段的状态和数据（PB2会记录每个字段是否被set），因此存储上PB有浪费。解析也同理。</p>
<h2 id="写在最后">写在最后</h2>
<p>上述的案例的答案可能并不适用于其他场景，仅供大家了解。这里的目的是，希望在大家选择IDL时，多一种思考的角度。</p>
<p>本文写了真的好久，总算是写完啦~</p>
]]></content>
      <categories>
        <category>Architecture</category>
      </categories>
  </entry>
  <entry>
    <title>C++ Lambda表达式</title>
    <url>/2017/02/03/c-lambda-tutorial/</url>
    <content><![CDATA[<blockquote>
<p>小喵的唠叨话: 寒假之后，小喵在家里无所事事，最近用C++写代码的时候，用到了std::sort这个函数，每次用这个函数，小喵似乎都得查一下lambda表达式的写法。正好最近很闲，不如总结一下。 在Bing上搜索_C++ lambda_，第一条记录就是MSDN上的C++ lambda的介绍。本文也是基于这篇文章来写的。 那么接下来，我们分几个部分来介绍。</p>
</blockquote>
<span id="more"></span>
<h2 id="一什么是lambda表达式">一、什么是Lambda表达式</h2>
<p>MSDN上对lambda表达式的解释：</p>
<blockquote>
<p>在 C++ 11 中，lambda 表达式（通常称为 "lambda"）是一种在被调用的位置或作为参数传递给函数的位置定义匿名函数对象的简便方法。 Lambda 通常用于封装传递给算法或异步方法的少量代码行。<a href="https://msdn.microsoft.com/zh-cn/library/dd293608.aspx">[1]</a></p>
</blockquote>
<p>看了这个解释，相信大家已经理解lambda表达式是什么。简而言之，lambda表达式就是一种定义函数的简单的方法。</p>
<p>举一个简单的例子：求一个数的阶乘。这是一般的函数的写法：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 这里要求n>=0，同时n的取值不能太大，会溢出</span>
<span class="token comment">// 为了方便，这里并没有处理上面说到的问题</span>
<span class="token keyword">int</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> fact <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> fact <span class="token operator">*=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">return</span> fact<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Lambda表达式的写法：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> factorial <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> fact <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> fact <span class="token operator">*=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">return</span> fact<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>乍一看，这两种定义方式十分的相似。但其实这是两种完全不同的方式，前一种是函数定义式，而后一种是一个表达式。<code>factorial</code>是变量名，等于号后面的是值，也就是一个<code>lambda表达式</code>，本质上是一个匿名的函数。最终<code>factorial</code>就是一个函数。</p>
<p>很多时候，我们只是直接书写<code>lambda表达式</code>，而不需要给他一个名字。比如排序的时候，sort可以接受一个自定义的比较函数，这时候直接书写lambda表达式即可。</p>
<h2 id="二lambda表达式的作用">二、Lambda表达式的作用</h2>
<p>由于lambda本身其实也就是一种函数的定义方式。因此它的主要作用还是和一般函数一样。但是lambda表达式相对于一般函数，又有一些功能之外的作用。参考了知乎上的一些回答<a href="https://www.zhihu.com/question/20125256">[2]</a>，小喵也进行了总结。 1) 可以用表达式来定义函数，这样使得函数的定义和调用在一起，语意和逻辑上更为紧凑。同时，对于只是用一次的短小的函数，直接调用匿名的lambda表达式是最好的选择，这样就不需要给每个函数起名字了。<span style="color: green">/* 起名字一直是一个很令人头疼的问题 */</span> 2) 闭包(Closure)。这个小喵的写javascript的时候时常会用到。闭包本质上就是能够访问上下文环境中变量的代码块。</p>
<p>这里我们简单的举个例子，还是之前的求阶乘的问题，现在我们有些提高需求。 现在需要完成下面的三种阶乘的运算：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">n! = n * (n - 1) * (n - 2) * ...
n!! = n * (n - 2) * (n - 4) * ...
n!!! = n * (n - 3) * (n - 6) * ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>要求编写3个函数，分别完成上述3种计算。 使用一般的方式写很容易实现，我们这里直接使用lambda表达式来实现：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span>

std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token function">getFactorialFunc</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> fact <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> x <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">-=</span> n<span class="token punctuation">)</span> fact <span class="token operator">*=</span> x<span class="token punctuation">;</span>
        <span class="token keyword">return</span> fact<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 构造要求的三个函数</span>
    <span class="token keyword">auto</span> factorial1 <span class="token operator">=</span> <span class="token function">getFactorialFunc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> factorial2 <span class="token operator">=</span> <span class="token function">getFactorialFunc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> factorial3 <span class="token operator">=</span> <span class="token function">getFactorialFunc</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">factorial1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">factorial2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">factorial3</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译的时候要注意，lambda表达式是C++11开始支持的，所以需要指定一下C++的版本。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ factorial_lambda.cpp <span class="token parameter variable">-o</span> factorial_lambda.out <span class="token parameter variable">--std</span><span class="token operator">=</span>c++11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>运行之后的结果为：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">./factorial_lambda.out
3628800
3840
280<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里作为返回值的lambda表达式，可以访问先前传入的参数，这也就是闭包。具体的语法，我们后面会讲到。</p>
<ol start="3" type="1">
<li>柯里化(Currying)。这部分小喵也是第一次接触，维基百科有如下解释：</li>
</ol>
<blockquote>
<p>在计算机科学中，柯里化（英语：Currying），又译为卡瑞化或加里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。<a href="https://zh.wikipedia.org/wiki/柯里化">[3]</a></p>
</blockquote>
<p>下面给出一个例子（也是实现之前的阶乘）：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span>

<span class="token comment">// 两个参数的阶乘</span>
<span class="token keyword">int</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> step<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> n <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">-=</span> step<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        r <span class="token operator">*=</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// curring化的阶乘</span>
std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token function">currying_factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> step<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 调用普通函数</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    <span class="token comment">// 调用currying函数</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">currying_factorial</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">currying_factorial</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">currying_factorial</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="4" type="1">
<li>lambda表达式整体可以被当做函数的参数或者返回值。 闭包和currying的例子就是将整个lambda表达式作为返回值。现在再举一个作为参数的例子：</li>
</ol>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span>

<span class="token keyword">int</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token operator">&amp;</span>op<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">auto</span> add <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> mul <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> add<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> mul<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行的结果：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">15
5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其实函数也可以当参数传入的（函数指针），但是lambda表达式要更为直观和灵活一些。谁能一眼看出<code>int (*func(int))(int)</code>究竟是什么意思呢（这是一个函数的定义，输入的参数是int，返回值是一个函数指针，函数指针对应的函数的输入和输出类型都是int）。</p>
<h2 id="三lambda表达式的语法">三、Lambda表达式的语法</h2>
<p>看到前面的lambda表达式的各种有趣的功能，现在是不是非常迫切的想尝试一把？</p>
<p>ISO C++ 标准展示了作为第三个参数传递给 <code>std::sort()</code> 函数的简单 lambda：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span>  </span>
  
<span class="token keyword">void</span> <span class="token function">abssort</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
    std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> n<span class="token punctuation">,</span>  
        <span class="token comment">// Lambda expression begins  </span>
        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">&#125;</span> <span class="token comment">// end of lambda expression  </span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>lambda表达式的组成部分见下图：</p>
<p><img src="lambdaexpsyntax.png" alt="lambda expression syntax" /></p>
<ol type="1">
<li>Capture 子句（在 C++ 规范中也称为 lambda 引导。）</li>
<li>参数列表（可选）。 （也称为 lambda 声明符)</li>
<li>可变规范（可选）。</li>
<li>异常规范（可选）。</li>
<li>尾随返回类型（可选）。</li>
<li>“lambda 体”</li>
</ol>
<p>接下来我们需要学习这6个部分。</p>
<h3 id="capture-子句">1、Capture 子句</h3>
<p>我们知道，一般情况下，函数只能访问自己的参数和外部的全局变量。而lambda表达式却可以访问上下文的变量（参见闭包的例子）。那么如何指定要访问的变量，以及访问的方式（值或者引用）呢？这就是Capture 子句要解决的问题。</p>
<p><code>Lambda</code> 可在其主体中引入新的变量（用 C++14），它还可以访问（或“捕获”）周边范围内的变量。<code>Lambda</code> 以 <code>Capture</code> 子句（标准语法中的 <code>lambda</code> 引导）开头，它指定要捕获的变量以及是通过值还是引用进行捕获:</p>
<ul>
<li>有与号 (<code>&amp;</code>) 前缀的变量通过引用访问，没有该前缀的变量通过值访问。</li>
<li>空 <code>capture</code> 子句 <code>[ ]</code> 指示 lambda 表达式的主体不访问封闭范围中的变量。可以使用默认捕获模式（标准语法中的 <code>capture-default</code>）来指示如何捕获 <code>lambda</code> 中引用的任何外部变量：
<ul>
<li><code>[&amp;]</code> 表示通过引用捕获引用的所有变量</li>
<li><code>[=]</code> 表示通过值捕获它们。</li>
</ul></li>
<li>可以使用默认捕获模式，然后为特定变量显式指定相反的模式。</li>
</ul>
<p>例如，如果 <code>lambda</code> 体通过引用访问外部变量 <code>total</code> 并通过值访问外部变量 <code>factor</code>，则以下 <code>capture</code> 子句等效：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token operator">&amp;</span>total<span class="token punctuation">,</span> factor<span class="token punctuation">]</span>
<span class="token punctuation">[</span>factor<span class="token punctuation">,</span> <span class="token operator">&amp;</span>total<span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">,</span> factor<span class="token punctuation">]</span>
<span class="token punctuation">[</span>factor<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>total<span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token operator">&amp;</span>total<span class="token punctuation">,</span> <span class="token operator">=</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们之前的闭包中使用的就是通过值访问。</p>
<ul>
<li>使用 <code>capture-default</code> 时，只有 <code>lambda</code> 中提及的变量才会被捕获。</li>
<li>如果 capture 子句包含 <code>capture-default</code> <code>&amp;</code>，则该 capture 子句的 <code>identifier</code> 中没有任何 <code>capture</code> 可采用 <code>&amp; identifier</code> 形式。</li>
<li>同样，如果 capture 子句包含 <code>capture-default</code> <code>=</code>，则该 capture 子句的 <code>capture</code> 不能采用 <code>= identifier</code> 形式。</li>
<li>identifier 或 <code>this</code> 在 capture 子句中出现的次数不能超过一次。</li>
</ul>
<p>以下代码片段给出了一些示例。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">S</span> <span class="token punctuation">&#123;</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  
  
<span class="token keyword">void</span> <span class="token class-name">S</span><span class="token double-colon punctuation">::</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
    <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// OK  </span>
    <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment">// OK</span>
    <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment">// ERROR: i preceded by &amp; when &amp; is the default  </span>
    <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// ERROR: this when = is the default  </span>
    <span class="token punctuation">[</span>i<span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// ERROR: i repeated  </span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>capture</code> 后跟省略号是包扩展，如以下可变参数模板<a href="https://msdn.microsoft.com/zh-cn/library/dn439779.aspx">[4]</a>示例中所示：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>  
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
    <span class="token keyword">auto</span> x <span class="token operator">=</span> <span class="token punctuation">[</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  
    <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>要在类方法的正文中使用 <code>lambda</code> 表达式，需要将 <code>this</code> 指针传递给 <code>Capture</code> 子句，以提供对封闭类的方法和数据成员的访问权限。</p>
<p>这里大家可能觉得有点奇怪，将this指针传给Capture子句？</p>
<p>其实我们常使用的成员函数也是用类似的方法实现的。我们知道，使用成员函数需要有一个类实例，但是调用类函数就不需要。这是因为成员函数的第一个参数是this，当然这个参数我们编写代码的时候不需要自己手动写出，而是默认的。使用像python这样的语言的时候就是需要显示的写出的。在使用类实例调用成员函数的时候，会默认将this指针传入。成员函数有这么一个参数，就可以访问类实例的各种变量和方法。而类函数是没有这个参数的，也就是没有this这个指针，因此它的调用并不需要类实例，当然也就不能访问类实例的变量。</p>
<p>在使用 capture 子句时，要记住以下几点（尤其是使用采取多线程的 lambda 时）：</p>
<ol type="1">
<li>引用捕获可用于修改外部变量，而值捕获却不能实现此操作。（mutable允许修改副本，而不能修改原始项。）</li>
<li>引用捕获会反映外部变量的更新，而值捕获却不会反映。</li>
<li>引用捕获引入生存期依赖项，而值捕获却没有生存期依赖项。当 lambda 以异步方式运行时，这一点尤其重要。 如果在异步 lambda 中通过引用捕获本地变量，该本地变量将很可能在 lambda 运行时消失，从而导致运行时访问冲突。</li>
</ol>
<p>通用捕获 (C++14) 在 C++14 中，可在 <code>Capture</code> 子句中引入并初始化新的变量，而无需使这些变量存在于 lambda 函数的封闭范围内。</p>
<p>初始化可以任何任意表达式表示；且将从该表达式生成的类型推导新变量的类型。此功能的一个好处是，在 C++14 中，可从周边范围捕获只移动的变量（例如 <code>std::unique_ptr</code>）并在 <code>lambda</code> 中使用它们。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pNums <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span></span></span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment">//...  </span>
<span class="token keyword">auto</span> a <span class="token operator">=</span> <span class="token punctuation">[</span>ptr <span class="token operator">=</span> <span class="token function">move</span><span class="token punctuation">(</span>pNums<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>  
    <span class="token comment">// use ptr  </span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参数列表">2、参数列表</h3>
<p>除了捕获变量，lambda 还可接受输入参数。 参数列表（在标准语法中称为 <em>lambda 声明符</em>）是可选的，它在大多数方面类似于函数的参数列表。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> add <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> first<span class="token punctuation">,</span> <span class="token keyword">int</span> second<span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>  
    <span class="token keyword">return</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 C++14 中，如果参数类型是泛型，则可以使用 <code>auto</code> 关键字作为类型说明符。 这将告知编译器将函数调用运算符创建为模板。参数列表中的每个 <code>auto</code> 实例等效于一个不同的类型参数。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> add <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> first<span class="token punctuation">,</span> <span class="token keyword">auto</span> second<span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>  
    <span class="token keyword">return</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>lambda 表达式</code>可以将另一个 <code>lambda 表达式</code>作为其参数。</p>
<p>由于参数列表是可选的，因此在不将参数传递到 lambda 表达式，并且其 <code>lambda-declarator:</code> 不包含 <code>exception-specification</code>、<code>trailing-return-type</code> 或 <code>mutable</code> 的情况下，可以省略空括号。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 这就是最简单的lambda表达式</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="可变规范">3、可变规范</h3>
<p>通常，<code>lambda</code> 的函数调用运算符为 <code>const-by-value</code>，但对 <code>mutable</code> 关键字的使用可将其取消。它不会生成可变的数据成员。利用可变规范，<code>lambda 表达式</code>的主体可以修改通过值捕获的变量。本文后面的一些示例将显示如何使用 <code>mutable</code>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> lambda1 <span class="token operator">=</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/* ++ n; */</span> <span class="token comment">// 这句编译会出错，错误信息如下：</span>
                    <span class="token comment">// error: cannot assign to a variable captured</span>
                    <span class="token comment">// by copy in a non-mutable lambda</span>
        <span class="token keyword">return</span> x <span class="token operator">+</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> lambda2 <span class="token operator">=</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token keyword">mutable</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">++</span> n<span class="token punctuation">;</span>
        <span class="token keyword">return</span> x <span class="token operator">+</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">lambda1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">lambda2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出的结果是：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">15 10
16 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可以看出n确实是通过值来访问，在<code>lambda1</code>中，我们运行<code>++ n</code>，在编译的时候会报错。使用<code>mutable</code>修饰之后，就可以修改参数（副本）的值。</p>
<h3 id="异常规范">4、异常规范</h3>
<p>你可以使用 <code>throw()</code> 异常规范来指示 <code>lambda 表达式</code>不会引发任何异常。与普通函数一样，如果 <code>lambda 表达式</code>声明 <a href="https://msdn.microsoft.com/zh-cn/library/84e2zwhh.aspx">C4297</a> 异常规范且 <code>lambda 体</code>引发异常，Visual C++ 编译器将生成警告 <code>throw()</code>，如下所示：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// throw\_lambda\_expression.cpp  </span>
<span class="token comment">// compile with: /W4 /EHsc</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// C4297 expected  </span>
<span class="token punctuation">&#123;</span>  
   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">throw</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在MSDN的异常规范<a href="https://msdn.microsoft.com/zh-cn/library/wfa0edys.aspx">[5]</a>中，明确指出异常规范是在 C++11 中弃用的 C++ 语言功能。因此这里不建议大家使用。</p>
<h3 id="返回类型">5、返回类型</h3>
<p>将自动推导 <code>lambda 表达式</code>的返回类型。无需使用 <code>auto</code> 关键字，除非指定<code>尾随返回类型</code>。<code>trailing-return-type</code> 类似于普通方法或函数的返回类型部分。但是，返回类型必须跟在参数列表的后面，你必须在返回类型前面包含 <code>trailing-return-type</code> 关键字 <code>-&gt;</code>。 如果 <code>lambda 体</code>仅包含一个返回语句或其表达式不返回值，则可以省略 <code>lambda 表达式</code>的<code>返回类型部分</code>。如果 <code>lambda 体</code>包含单个返回语句，编译器将从返回表达式的类型推导返回类型。否则，编译器会将返回类型推导为 <code>void</code>。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;typeinfo></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">auto</span> lambda1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> lambda2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> lambda3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">float</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token comment">/* auto lambda4 = []&#123; return &#123;1, 2&#125;; &#125;;*/</span> <span class="token comment">// ERROR: return type is void</span>
                                              <span class="token comment">// cannot deduce lambda return type</span>

    <span class="token keyword">auto</span> x1 <span class="token operator">=</span> <span class="token function">lambda1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> x2 <span class="token operator">=</span> <span class="token function">lambda2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> x3 <span class="token operator">=</span> <span class="token function">lambda3</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x2 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x3 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>x3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>typeinfo的功能是获取一个变量的类型，由于它的实现依赖于编译器，所以在不同平台下的输出可能不完全一样。小喵这边的输出是：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">10 i
1 b
10 f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可以看出，三个lambda的输出是不相同的。默认情况下，会返回一个最直接的类型。</p>
<h3 id="lambda体">6、lambda体</h3>
<p>lambda体其实和函数体几乎完全相同。 <code>lambda 表达式</code>的 <code>lambda 体</code>（标准语法中的 <code>compound-statement</code>）可包含普通方法或函数的主体可包含的任何内容。普通函数和 <code>lambda 表达式</code>的主体均可访问以下变量类型：</p>
<ul>
<li>从封闭范围捕获变量，如前所述（Capture）。</li>
<li>参数</li>
<li>本地声明变量</li>
<li>类数据成员（在类内部声明并且捕获 <code>this</code> 时）</li>
<li>具有静态存储持续时间的任何变量（例如，全局变量）</li>
</ul>
<p>这里要注意我们在<code>Capture 规范</code>中说到的值访问和引用访问的特点。</p>
<p>下面的例子都是MSDN上给出的。以下示例包含显式捕获变量 <code>n</code> 和引用隐式捕获变量 <code>m</code> 的 lambda 表达式：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// captures_lambda_expression.cpp  </span>
<span class="token comment">// compile with: /W4 /EHsc</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>  </span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  
  
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>  
   <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
   <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
   <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">,</span> n<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token keyword">mutable</span> <span class="token punctuation">&#123;</span> m <span class="token operator">=</span> <span class="token operator">++</span>n <span class="token operator">+</span> a<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
   cout <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">5
0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>由于变量 <code>n</code> 是通过值捕获的，因此在调用 <code>lambda 表达式</code>后，变量的值仍保持 <code>0</code> 不变。  <code>mutable</code> 规范允许在 lambda 中修改 <code>n</code>。</p>
<p>尽管 <code>lambda 表达式</code>只能捕获具有自动存储持续时间的变量，但你可以在 <code>lambda 表达式</code>的主体中使用具有静态存储持续时间的变量。</p>
<p>以下示例使用 <code>generate</code> 函数和 <code>lambda 表达式</code>为 <code>vector</code> 对象中的每个元素赋值。 <code>lambda 表达式</code>将修改静态变量以生成下一个元素的值。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">fillVector</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span>  
<span class="token punctuation">&#123;</span>  
    <span class="token comment">// A local static variable.  </span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> nextValue <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  
  
    <span class="token comment">// The lambda expression that appears in the following call to  </span>
    <span class="token comment">// the generate function modifies and uses the local static</span>
    <span class="token comment">// variable nextValue.  </span>
    <span class="token function">generate</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> nextValue<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//WARNING: this is not thread-safe and is shown for illustration only  </span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="四应用lambda的比较函数的编写">四、应用Lambda的比较函数的编写</h2>
<p>为什么要补充这一部分呢？因为我们在写程序的时候，往往最常用到lambda的地方就是数组的sort。 首先，我们知道std::sort默认是接受2个参数的，表示需要排序的序列的开始和结尾。对于一些复杂的数据类型，我们可以给它添加一个用来比较的函数 <code>operator &lt;</code>。但更多的是通过给sort添加第三个参数来实现。而这个参数就是一个比较器。</p>
<p>sort默认使用 <code>&lt;</code> 比较符来进行比较，排序的结果是升序。我们写的比较函数的功能就是代替 <code>&lt;</code>。记住这个特点，就不会在编写比较函数的时候理不清思路。</p>
<p>这里举一个小例子，给一组点坐标，按欧氏距离排序：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    vector<span class="token operator">&lt;</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> arr<span class="token punctuation">;</span>
    arr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> left<span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> d1 <span class="token operator">=</span> left<span class="token punctuation">.</span>first <span class="token operator">*</span> left<span class="token punctuation">.</span>first <span class="token operator">+</span> left<span class="token punctuation">.</span>second <span class="token operator">*</span> left<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
            <span class="token keyword">int</span> d2 <span class="token operator">=</span> right<span class="token punctuation">.</span>first <span class="token operator">*</span> right<span class="token punctuation">.</span>first <span class="token operator">+</span> right<span class="token punctuation">.</span>second <span class="token operator">*</span> right<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
            <span class="token keyword">return</span> d1 <span class="token operator">&lt;</span> d2<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>p<span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"("</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">(2, 3)
(1, 4)
(6, 2)
(5, 7)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>唯一需要注意的是，我们的比较函数取代的是 <code>&lt;</code>。</p>
<p>至此，关于<code>Lambda 表达式</code>的介绍也就结束了。说得不够详细的地方，请大家参考MSDN的官方文档，写的真心不错。小喵这里有一些地方都是直接照搬过来的。<a href="https://msdn.microsoft.com/zh-cn/library/dd293608.aspx">https://msdn.microsoft.com/zh-cn/library/dd293608.aspx</a></p>
<h2 id="五补充">五、补充</h2>
<p>最近在类中使用了<code>lambda表达式</code>，结果出现奇怪的问题，故记录下来。<code>lambda表达式</code>可以允许捕获局部变量，但是类成员变量并不是局部变量，因此不能被lambda捕获。我们想要在lambda中使用类成员变量的话，只需要捕获<code>this</code>指针就可以。之后在lambda函数体中就可以随时使用成员变量了。对于this的捕获，永远是值传递的方式，即使指定了默认捕获的方式为引用，另外<code>[&amp;this]</code>这样的捕获方式是不允许的。</p>
<p><strong>转载请注明出处~</strong></p>
<ul>
<li>[1] <a href="https://msdn.microsoft.com/zh-cn/library/dd293608.aspx">https://msdn.microsoft.com/zh-cn/library/dd293608.aspx</a></li>
<li>[2] <a href="https://www.zhihu.com/question/20125256">https://www.zhihu.com/question/20125256</a></li>
<li>[3] <a href="https://zh.wikipedia.org/wiki/柯里化">https://zh.wikipedia.org/wiki/柯里化</a></li>
<li>[4] <a href="https://msdn.microsoft.com/zh-cn/library/dn439779.aspx">https://msdn.microsoft.com/zh-cn/library/dn439779.aspx</a></li>
<li>[5] <a href="https://msdn.microsoft.com/zh-cn/library/wfa0edys.aspx">https://msdn.microsoft.com/zh-cn/library/wfa0edys.aspx</a></li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>CGO函数调用与数据转换</title>
    <url>/2023/01/29/cgo/</url>
    <content><![CDATA[<p>CGO是Go程序调用C库的一套机制，可以使Go语言能够站在C/C++的肩膀上。比如Go调用Tensorflow，也就是使用了CGO来实现的。很多语言都支持对C库的调用，一般称为FFI（Foreign Function Interface）。这里需要注意一下，一般的Python、Lua等语言调用C函数的时候，是通过函数签名找到函数的地址，然后直接调用对应的函数。而CGO会先生成中间文件，然后再一起编译调用。这里不具体展开了，总之只需要知道CGO比一般的FFI多了一层中间的步骤。在程序出错的时候，能理解调用栈的关系即可。参考 <a href="https://cloud.tencent.com/developer/article/1650525">CGO 和 CGO 性能之谜</a>。</p>
<h2 id="函数调用">函数调用</h2>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token comment">/*
CGO的标准写法：
1. 先用注释的方式写入，单行注释和多行注释都支持
  1.1 编译器环境变量
	1.1.1 CFLAGS: C编译选项
	1.1.2 CXXFLAGS: C++编译选项
	1.1.3 CPPFLAGS: C和C++共有的编译选项
	1.1.4 FFLAGS: Fortran编译选项
	1.1.4 LDFLAGS: 链接选项（不区分C和C++）
  1.2 C代码
2. import "C"，相当于将所有的C函数放入虚拟的package C。之后通过`C.xxx`的方式来调用。需要紧跟注释之后。
*/</span>

<span class="token comment">/*
#cgo LDFLAGS: -lm

#include &lt;math.h>
double my_sqrt(double x) &#123;
	return sqrt(x);
&#125;
*/</span>
<span class="token keyword">import</span> <span class="token string">"C"</span> <span class="token comment">// CGO的标准写法，相当于将C函数放入包`C`中</span>
<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	a <span class="token operator">:=</span> <span class="token number">100</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"sqrt(%v) = %v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> C<span class="token punctuation">.</span><span class="token function">my_sqrt</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 调用上面自定义的函数</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"sqrt(%v) = %v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> C<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 调用系统库函数（上述的m）</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Output:</span>
<span class="token comment">//  sqrt(100) = 10</span>
<span class="token comment">//  sqrt(100) = 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过上述的例子，我们可以看出，CGO可以调用C的库函数，也可以执行注释中的C代码的函数。一般注释中的C代码都是比较简短的。</p>
<p>接下来要介绍C和Go之间的数据是如何传递的。</p>
<span id="more"></span>
<h2 id="数据类型">数据类型</h2>
<p>我们可以将数据类型分为以下几类： 1. 数值：两种语言均有自己的定义关键字 1. 整型: 8/16/32/64位有符号和无符号整数 2. 浮点型：32/64位浮点数 2. 字符串：C中的字符串是以<code>\0</code>结尾的字符数组，而Go中使用<code>string</code> 3. 结构体：包含0到多个字段的自定义结构。在两种语言中均可以用<code>struct</code>关键字来定义，二者十分相似。 4. 指针：本质上其实是一个32或64位的整数。用来指向内存的数据或函数的地址。 5. 数组：连续存放相同类型数据的一种结构。在C中一般理解为一块连续内存，在Go中，有Array和Slice两种形式，后续会介绍到。</p>
<p>接下来我们分别介绍不同的数据类型是如何在两种语言间传递和转换的。</p>
<h3 id="基础数据类型">基础数据类型</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: left;"></th>
<th style="text-align: left;">C</th>
<th style="text-align: left;">stdint</th>
<th style="text-align: left;">GO</th>
<th style="text-align: left;">C/stdint -&gt; GO</th>
<th style="text-align: left;">Go -&gt; C</th>
<th style="text-align: left;">Go -&gt; stdint</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">int8</td>
<td style="text-align: left;">signed char</td>
<td style="text-align: left;">int8_t</td>
<td style="text-align: left;">int8</td>
<td style="text-align: left;">int8</td>
<td style="text-align: left;">C.schar</td>
<td style="text-align: left;">C.int8_t</td>
</tr>
<tr class="even">
<td style="text-align: left;">int16</td>
<td style="text-align: left;">short</td>
<td style="text-align: left;">int16_t</td>
<td style="text-align: left;">int16</td>
<td style="text-align: left;">int16</td>
<td style="text-align: left;">C.short</td>
<td style="text-align: left;">C.int16_t</td>
</tr>
<tr class="odd">
<td style="text-align: left;">int32</td>
<td style="text-align: left;">int</td>
<td style="text-align: left;">int32_t</td>
<td style="text-align: left;">int32</td>
<td style="text-align: left;">int32</td>
<td style="text-align: left;">C.int</td>
<td style="text-align: left;">C.int32_t</td>
</tr>
<tr class="even">
<td style="text-align: left;">int64</td>
<td style="text-align: left;">long long</td>
<td style="text-align: left;">int64_t</td>
<td style="text-align: left;">int64</td>
<td style="text-align: left;">int64</td>
<td style="text-align: left;">C.longlong</td>
<td style="text-align: left;">C.int64_t</td>
</tr>
<tr class="odd">
<td style="text-align: left;">uint8</td>
<td style="text-align: left;">unsigned char</td>
<td style="text-align: left;">uint8_t</td>
<td style="text-align: left;">uint8</td>
<td style="text-align: left;">uint8</td>
<td style="text-align: left;">C.uchar</td>
<td style="text-align: left;">C.uint8_t</td>
</tr>
<tr class="even">
<td style="text-align: left;">uint16</td>
<td style="text-align: left;">unsigned short</td>
<td style="text-align: left;">uint16_t</td>
<td style="text-align: left;">uint16</td>
<td style="text-align: left;">uint16</td>
<td style="text-align: left;">C.ushort</td>
<td style="text-align: left;">C.uint16_t</td>
</tr>
<tr class="odd">
<td style="text-align: left;">uint32</td>
<td style="text-align: left;">unsigned int</td>
<td style="text-align: left;">uint32_t</td>
<td style="text-align: left;">uint32</td>
<td style="text-align: left;">uint32</td>
<td style="text-align: left;">C.uint</td>
<td style="text-align: left;">C.uint32_t</td>
</tr>
<tr class="even">
<td style="text-align: left;">uint64</td>
<td style="text-align: left;">unsigned long long</td>
<td style="text-align: left;">uint64_t</td>
<td style="text-align: left;">uint64</td>
<td style="text-align: left;">uint64</td>
<td style="text-align: left;">C.ulonglong</td>
<td style="text-align: left;">C.uint64_t</td>
</tr>
<tr class="odd">
<td style="text-align: left;">float32</td>
<td style="text-align: left;">float</td>
<td style="text-align: left;"></td>
<td style="text-align: left;">float32</td>
<td style="text-align: left;">float32</td>
<td style="text-align: left;">C.float</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;">float64</td>
<td style="text-align: left;">double</td>
<td style="text-align: left;"></td>
<td style="text-align: left;">float64</td>
<td style="text-align: left;">float64</td>
<td style="text-align: left;">C.double</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">pointer</td>
<td style="text-align: left;">DType *</td>
<td style="text-align: left;"></td>
<td style="text-align: left;">unsafe.Pointer</td>
<td style="text-align: left;">unsafe.Pointer</td>
<td style="text-align: left;">* C.DType</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;">char</td>
<td style="text-align: left;">char</td>
<td style="text-align: left;"></td>
<td style="text-align: left;">byte</td>
<td style="text-align: left;">byte</td>
<td style="text-align: left;">C.char</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;">string</td>
<td style="text-align: left;">char *</td>
<td style="text-align: left;"></td>
<td style="text-align: left;">string</td>
<td style="text-align: left;">C.GoString</td>
<td style="text-align: left;">C.CString</td>
<td style="text-align: left;"></td>
</tr>
</tbody>
</table>
<h4 id="数值">数值</h4>
<p>按照字节的数目，整型一般占用1/2/4/8字节，另外包含有无符号，整型就有8种类型。对应的就是int8/int16/int32/int64四种有符号整型和uint8/uint16/uint32/uint64无符号整型。</p>
<p>在C中，通过<code>char/short/int/long long</code>等表示不同长度的有符号整型。如果<code>include &lt;stdint.h&gt;</code>，则可以用<code>int8/int16/int32/int64</code>等来表示。</p>
<p>浮点数则按照4/8字节，定义为float32/float64。</p>
<p>以下是一个例子，比较简单，就不具体介绍了。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token comment">/*
#include &lt;stdint.h>
*/</span>
<span class="token keyword">import</span> <span class="token string">"C"</span>
<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> d <span class="token operator">:=</span> <span class="token keyword">range</span> data <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"test number %v\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span>

		<span class="token comment">// go</span>
		int8_v <span class="token operator">:=</span> <span class="token function">int8</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
		int16_v <span class="token operator">:=</span> <span class="token function">int16</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
		int32_v <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
		int64_v <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
		uint8_v <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
		uint16_v <span class="token operator">:=</span> <span class="token function">uint16</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
		uint32_v <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
		uint64_v <span class="token operator">:=</span> <span class="token function">uint64</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
		float32_v <span class="token operator">:=</span> <span class="token function">float32</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
		float64_v <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>

		<span class="token comment">// go -> c</span>
		c_int8_v <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">schar</span><span class="token punctuation">(</span>int8_v<span class="token punctuation">)</span>
		c_int16_v <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">short</span><span class="token punctuation">(</span>int16_v<span class="token punctuation">)</span>
		c_int32_v <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span>int32_v<span class="token punctuation">)</span>
		c_int64_v <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">longlong</span><span class="token punctuation">(</span>int64_v<span class="token punctuation">)</span>
		c_uint8_v <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">uchar</span><span class="token punctuation">(</span>uint8_v<span class="token punctuation">)</span>
		c_uint16_v <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">ushort</span><span class="token punctuation">(</span>uint16_v<span class="token punctuation">)</span>
		c_uint32_v <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">uint</span><span class="token punctuation">(</span>uint32_v<span class="token punctuation">)</span>
		c_uint64_v <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">ulonglong</span><span class="token punctuation">(</span>uint64_v<span class="token punctuation">)</span>
		c_float32_v <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">float</span><span class="token punctuation">(</span>float32_v<span class="token punctuation">)</span>
		c_float64_v <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span>float64_v<span class="token punctuation">)</span>

		<span class="token comment">// go -> c stdint</span>
		stdint_int8_v <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">int8_t</span><span class="token punctuation">(</span>int8_v<span class="token punctuation">)</span>
		stdint_int16_v <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">int16_t</span><span class="token punctuation">(</span>int16_v<span class="token punctuation">)</span>
		stdint_int32_v <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">int32_t</span><span class="token punctuation">(</span>int32_v<span class="token punctuation">)</span>
		stdint_int64_v <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">int64_t</span><span class="token punctuation">(</span>int64_v<span class="token punctuation">)</span>
		stdint_uint8_v <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">uint8_t</span><span class="token punctuation">(</span>uint8_v<span class="token punctuation">)</span>
		stdint_uint16_v <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">uint16_t</span><span class="token punctuation">(</span>uint16_v<span class="token punctuation">)</span>
		stdint_uint32_v <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">uint32_t</span><span class="token punctuation">(</span>uint32_v<span class="token punctuation">)</span>
		stdint_uint64_v <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">uint64_t</span><span class="token punctuation">(</span>uint64_v<span class="token punctuation">)</span>

		<span class="token comment">// c -> go</span>
		go_int8_v <span class="token operator">:=</span> <span class="token function">int8</span><span class="token punctuation">(</span>c_int8_v<span class="token punctuation">)</span>
		go_int16_v <span class="token operator">:=</span> <span class="token function">int16</span><span class="token punctuation">(</span>c_int16_v<span class="token punctuation">)</span>
		go_int32_v <span class="token operator">:=</span> <span class="token function">int32</span><span class="token punctuation">(</span>c_int32_v<span class="token punctuation">)</span>
		go_int64_v <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span>c_int64_v<span class="token punctuation">)</span>
		go_uint8_v <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span>c_uint8_v<span class="token punctuation">)</span>
		go_uint16_v <span class="token operator">:=</span> <span class="token function">uint16</span><span class="token punctuation">(</span>c_uint16_v<span class="token punctuation">)</span>
		go_uint32_v <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>c_uint32_v<span class="token punctuation">)</span>
		go_uint64_v <span class="token operator">:=</span> <span class="token function">uint64</span><span class="token punctuation">(</span>c_uint64_v<span class="token punctuation">)</span>
		go_float32_v <span class="token operator">:=</span> <span class="token function">float32</span><span class="token punctuation">(</span>c_float32_v<span class="token punctuation">)</span>
		go_float64_v <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>c_float64_v<span class="token punctuation">)</span>

		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"int8    | raw %-10v | c %-10v | stdint %-10v | c->go %-10v\n"</span><span class="token punctuation">,</span> int8_v<span class="token punctuation">,</span> c_int8_v<span class="token punctuation">,</span> stdint_int8_v<span class="token punctuation">,</span> go_int8_v<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"int16   | raw %-10v | c %-10v | stdint %-10v | c->go %-10v\n"</span><span class="token punctuation">,</span> int16_v<span class="token punctuation">,</span> c_int16_v<span class="token punctuation">,</span> stdint_int16_v<span class="token punctuation">,</span> go_int16_v<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"int32   | raw %-10v | c %-10v | stdint %-10v | c->go %-10v\n"</span><span class="token punctuation">,</span> int32_v<span class="token punctuation">,</span> c_int32_v<span class="token punctuation">,</span> stdint_int32_v<span class="token punctuation">,</span> go_int32_v<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"int64   | raw %-10v | c %-10v | stdint %-10v | c->go %-10v\n"</span><span class="token punctuation">,</span> int64_v<span class="token punctuation">,</span> c_int64_v<span class="token punctuation">,</span> stdint_int64_v<span class="token punctuation">,</span> go_int64_v<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"uint8   | raw %-10v | c %-10v | stdint %-10v | c->go %-10v\n"</span><span class="token punctuation">,</span> uint8_v<span class="token punctuation">,</span> c_uint8_v<span class="token punctuation">,</span> stdint_uint8_v<span class="token punctuation">,</span> go_uint8_v<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"uint16  | raw %-10v | c %-10v | stdint %-10v | c->go %-10v\n"</span><span class="token punctuation">,</span> uint16_v<span class="token punctuation">,</span> c_uint16_v<span class="token punctuation">,</span> stdint_uint16_v<span class="token punctuation">,</span> go_uint16_v<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"uint32  | raw %-10v | c %-10v | stdint %-10v | c->go %-10v\n"</span><span class="token punctuation">,</span> uint32_v<span class="token punctuation">,</span> c_uint32_v<span class="token punctuation">,</span> stdint_uint32_v<span class="token punctuation">,</span> go_uint32_v<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"uint64  | raw %-10v | c %-10v | stdint %-10v | c->go %-10v\n"</span><span class="token punctuation">,</span> uint64_v<span class="token punctuation">,</span> c_uint64_v<span class="token punctuation">,</span> stdint_uint64_v<span class="token punctuation">,</span> go_uint64_v<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"float32 | raw %-10v | c %-10v | c->go %-10v\n"</span><span class="token punctuation">,</span> float32_v<span class="token punctuation">,</span> c_float32_v<span class="token punctuation">,</span> go_float32_v<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"float64 | raw %-10v | c %-10v | c->go %-10v\n"</span><span class="token punctuation">,</span> float64_v<span class="token punctuation">,</span> c_float64_v<span class="token punctuation">,</span> go_float64_v<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="字符串">字符串</h4>
<p>在C中，<code>char</code>表示单个字符（不考虑宽字符），而以<code>\0</code>结尾的字符数组就表示字符串。而Go中，单个字节用<code>byte</code>来表示，字符串用<code>string</code>来表示。因此Go中的<code>byte</code>/<code>[]byte</code>/<code>string</code>是三个不同的概念(<code>string</code>其实是包含<code>len</code>和<code>data</code>的一个结构体)。</p>
<p>CGO中，使用<code>C.CString</code>可以将Go string转换为C string，这里的C string是深拷贝的，因此需要使用完之后调用<code>free</code>来释放内存。使用<code>C.GoString</code>可以将C string转换为Go String，这里也是深拷贝的，之后的内存由Go自己管理。</p>
<p>深拷贝通常意味着需要内存的申请和复制，在极度在意性能的场景，我们需要用一些技巧来避免它。这部分后续会介绍到。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token comment">/*
#include &lt;stdio.h>
#include &lt;stdlib.h>
void print_string(const char *s) &#123;
	printf("%s\n", s);
&#125;
*/</span>
<span class="token keyword">import</span> <span class="token string">"C"</span>
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"unsafe"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	str <span class="token operator">:=</span> <span class="token string">"Hello World!"</span>
	<span class="token comment">// byte</span>
	<span class="token punctuation">&#123;</span>
		b <span class="token operator">:=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		c_char <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">char</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
		go_byte <span class="token operator">:=</span> <span class="token function">byte</span><span class="token punctuation">(</span>c_char<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v %v %v\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> c_char<span class="token punctuation">,</span> go_byte<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// string</span>
	<span class="token punctuation">&#123;</span>
		c_str <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">CString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>     <span class="token comment">// Go -> C</span>
		go_str <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">GoString</span><span class="token punctuation">(</span>c_str<span class="token punctuation">)</span> <span class="token comment">// C -> Go</span>

		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v %v %v\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> c_str<span class="token punctuation">,</span> go_str<span class="token punctuation">)</span>
		C<span class="token punctuation">.</span><span class="token function">print_string</span><span class="token punctuation">(</span>c_str<span class="token punctuation">)</span>

		C<span class="token punctuation">.</span><span class="token function">free</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>c_str<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="指针">指针</h4>
<p>在C和Go中都有指针的概念，使用上也是相同的。</p>
<p>在两种指针做转换的时候，一般需要先转到中间的状态 <code>unsafe.Pointer</code>，以绕开编译检查。</p>
<p>下面的例子是分别用C和Go编写<code>add</code>函数，完成两个<code>int</code>的求和。由于C的int和和Go的int32类型的内存布局一致，都是4字节(Go的int是随机器位数变化的)，因此C的<code>add</code>可以将结果直接写入Go的变量，反之亦可。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token comment">/*
void add(int a, int b, int *c) &#123;
        *c = a + b;
&#125;
*/</span>
<span class="token keyword">import</span> <span class="token string">"C"</span>
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"unsafe"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int32</span><span class="token punctuation">,</span> c <span class="token operator">*</span><span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token operator">*</span>c <span class="token operator">=</span> a <span class="token operator">+</span> b
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> a<span class="token punctuation">,</span> b <span class="token builtin">int32</span>
	<span class="token keyword">var</span> go_sum <span class="token builtin">int32</span>
	<span class="token keyword">var</span> c_sum C<span class="token punctuation">.</span><span class="token builtin">int</span>

	<span class="token comment">// C add</span>
	<span class="token punctuation">&#123;</span>
		a <span class="token operator">=</span> <span class="token number">100</span>
		b <span class="token operator">=</span> <span class="token number">200</span>
		C<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> C<span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c_sum<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v + %v = %v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c_sum<span class="token punctuation">)</span>

		C<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> C<span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>C<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>go_sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v + %v = %v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> go_sum<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// Go add</span>
	<span class="token punctuation">&#123;</span>
		a <span class="token operator">=</span> <span class="token number">300</span>
		b <span class="token operator">=</span> <span class="token number">400</span>
		<span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>go_sum<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v + %v = %v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> go_sum<span class="token punctuation">)</span>

		<span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int32</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c_sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v + %v = %v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c_sum<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面是两种调用下的数据转换的流程：</p>
<table>
<colgroup>
<col style="width: 13%" />
<col style="width: 8%" />
<col style="width: 9%" />
<col style="width: 27%" />
<col style="width: 40%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"></th>
<th style="text-align: left;">数据</th>
<th style="text-align: left;">地址</th>
<th style="text-align: left;">unsafe.Pointer</th>
<th style="text-align: left;">强转</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">C Add 变量</td>
<td style="text-align: left;">go_sum</td>
<td style="text-align: left;">&amp;go_sum</td>
<td style="text-align: left;">unsafe.Pointer(&amp;go_sum)</td>
<td style="text-align: left;">(*C.int)(unsafe.Pointer(&amp;go_sum))</td>
</tr>
<tr class="even">
<td style="text-align: left;">C Add 类型</td>
<td style="text-align: left;">int</td>
<td style="text-align: left;">*int</td>
<td style="text-align: left;">unsafe.Pointer</td>
<td style="text-align: left;">*C.int</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Go Add 变量</td>
<td style="text-align: left;">c_sum</td>
<td style="text-align: left;">&amp;c_sum</td>
<td style="text-align: left;">unsafe.Pointer(&amp;c_sum)</td>
<td style="text-align: left;">(*int)(unsafe.Pointer(&amp;c_sum))</td>
</tr>
<tr class="even">
<td style="text-align: left;">Go Add 类型</td>
<td style="text-align: left;">C.int</td>
<td style="text-align: left;">*C.int</td>
<td style="text-align: left;">unsafe.Pointer</td>
<td style="text-align: left;">*int</td>
</tr>
</tbody>
</table>
<h3 id="结构体">结构体</h3>
<p>C和Go中的结构体基本一致。CGO会将C中声明的结构体加上<code>struct_</code>前缀，用于区分。在使用上和Go struct的基本相同。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token comment">/*
#include &lt;stdio.h>
#include &lt;string.h>
#include &lt;stdlib.h>
typedef struct CStruct &#123;
	int int_val;
	float float_val;
	char *str_val;
&#125; CStruct;

CStruct *new_struct() &#123;
	CStruct *c = (CStruct *)malloc(sizeof(CStruct));
	memset(c, 0, sizeof(CStruct));
	return c;
&#125;

void print_struct(CStruct* c) &#123;
	printf("int: %d float: %f, str: %s\n", c->int_val, c->float_val, c->str_val);
&#125;

void free_struct(CStruct* c) &#123;
	if (!c) return;
	if (c->str_val) &#123;
		free(c->str_val);
	&#125;
	free(c);
&#125;
*/</span>
<span class="token keyword">import</span> <span class="token string">"C"</span>
<span class="token keyword">import</span> <span class="token string">"unsafe"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token punctuation">&#123;</span>
		c <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">new_struct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		C<span class="token punctuation">.</span><span class="token function">print_struct</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
		C<span class="token punctuation">.</span><span class="token function">free_struct</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#123;</span>
		c <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">new_struct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>int_val <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>float_val <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">float</span><span class="token punctuation">(</span><span class="token number">0.618</span><span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>str_val <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">CString</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>
		C<span class="token punctuation">.</span><span class="token function">print_struct</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
		C<span class="token punctuation">.</span><span class="token function">free_struct</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#123;</span>
		c <span class="token operator">:=</span> C<span class="token punctuation">.</span>struct_CStruct<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// or c := &amp;C.struct_CStruct&#123;&#125;</span>
		c<span class="token punctuation">.</span>int_val <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>float_val <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">float</span><span class="token punctuation">(</span><span class="token number">0.618</span><span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>str_val <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">CString</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span>
		C<span class="token punctuation">.</span><span class="token function">print_struct</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span>
		C<span class="token punctuation">.</span><span class="token function">free</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>str_val<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token comment">// C.free_struct(&amp;c) // crash</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Output:</span>
<span class="token comment">// int: 0 float: 0.000000, str: (null)</span>
<span class="token comment">// int: 100 float: 0.618000, str: hello</span>
<span class="token comment">// int: 100 float: 0.618000, str: world</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里有两个地方需要注意：</p>
<ol type="1">
<li>Go中结构体取值和指针取值都是使用 <code>.</code> 操作符。</li>
<li>第三个例子，<code>CStruct</code>对象是在Go中创建的，因此不能调用C的<code>free_struct</code>接口。</li>
</ol>
<h3 id="数组">数组</h3>
<p>我们知道，在C语言中，数组和指针大多数情况下是等价的，一般接口返回的也是指针类型。我们可以用 <code>arr[i]</code> 或者 <code>*(arr + i)</code>的方式访问数据中的某一项。</p>
<p>在Go中，有Array和Slice两种类型。其中Array的长度是固定的，而Slice可变。一般使用上更多的会使用Slice。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token comment">/*
#include &lt;stdio.h>
#include &lt;stdlib.h>
#include &lt;string.h>
int* create_array(int size) &#123;
	if (size &lt;= 0) return NULL;
	int *arr = (int *)malloc(size * sizeof(int));
	memset(arr, 0, size * sizeof(int));
	return arr;
&#125;
void fill_array(int *arr, int size) &#123;
	for (int idx = 0; idx &lt; size; ++ idx) &#123;
		arr[idx] = idx;
	&#125;
&#125;
void print_array(int *arr, int size) &#123;
	for (int idx = 0; idx &lt; size; ++ idx) &#123;
		printf("%d ", arr[idx]);
	&#125;
	printf("\n");
&#125;
void del_array(int *arr) &#123;
	if (arr) &#123;
		free(arr);
	&#125;
&#125;
*/</span>
<span class="token keyword">import</span> <span class="token string">"C"</span>
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"unsafe"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Read C array"</span><span class="token punctuation">)</span>
		size <span class="token operator">:=</span> <span class="token number">5</span>
		cSize <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
		arr <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">create_array</span><span class="token punctuation">(</span>cSize<span class="token punctuation">)</span> <span class="token comment">// [0 0 0 0 0]</span>
		C<span class="token punctuation">.</span><span class="token function">print_array</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> cSize<span class="token punctuation">)</span>
		C<span class="token punctuation">.</span><span class="token function">fill_array</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> cSize<span class="token punctuation">)</span> <span class="token comment">// [0 1 2 3 4]</span>
		C<span class="token punctuation">.</span><span class="token function">print_array</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> cSize<span class="token punctuation">)</span>

		<span class="token punctuation">&#123;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Pointer + Offset"</span><span class="token punctuation">)</span>
			p <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">for</span> idx <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> idx<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
				fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"idx %v val %v\n"</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>C<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				p <span class="token operator">+=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>sizeof_int<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token punctuation">&#123;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Map C Array to Go Slice"</span><span class="token punctuation">)</span>
			int_slice <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">]</span>C<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
			<span class="token keyword">for</span> idx<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> int_slice <span class="token punctuation">&#123;</span>
				fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"idx %v val %v\n"</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		C<span class="token punctuation">.</span><span class="token function">del_array</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Passthrough Go Array/Slice"</span><span class="token punctuation">)</span>
		int_arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>C<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>
		C<span class="token punctuation">.</span><span class="token function">print_array</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>int_arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>

		int_slice <span class="token operator">:=</span> int_arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
		C<span class="token punctuation">.</span><span class="token function">print_array</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>int_slice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Output</span>
<span class="token comment">// Read C array</span>
<span class="token comment">// 0 0 0 0 0</span>
<span class="token comment">// 0 1 2 3 4</span>
<span class="token comment">// Pointer + Offset</span>
<span class="token comment">// idx 0 val 0</span>
<span class="token comment">// idx 1 val 1</span>
<span class="token comment">// idx 2 val 2</span>
<span class="token comment">// idx 3 val 3</span>
<span class="token comment">// idx 4 val 4</span>
<span class="token comment">// Map C Array to Go Slice</span>
<span class="token comment">// idx 0 val 0</span>
<span class="token comment">// idx 1 val 1</span>
<span class="token comment">// idx 2 val 2</span>
<span class="token comment">// idx 3 val 3</span>
<span class="token comment">// idx 4 val 4</span>
<span class="token comment">// Passthrough Go Array/Slice</span>
<span class="token comment">// 5 4 3 2 1</span>
<span class="token comment">// 5 4 3 2 1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例子中的第一部分是，Go读取C的数组。第二部分是C读取Go的数组。</p>
<p>Go读取C Array有两个方式：1. 裸操作指针, 2. 映射成Go Slice再操作。这里推荐第二种。</p>
<h4 id="pointer-offset">Pointer + Offset</h4>
<p>C的数组本质上只是一个指针。我们只需要计算好每个元素的地址，就可以读写对应的元素。</p>
<p>Go有两个指针类型<code>unsafe.Pointer</code>和<code>uintptr</code>。二者可以互相转换，但是只有<code>uintptr</code>才支持指针的计算。因此，我们先将数组的首地址转成<code>uintptr</code>，再加上偏移量，最后强转回C指针。</p>
<ol type="1">
<li>首地址： <code>p := uintptr(unsafe.Pointer(arr))</code>。</li>
<li>强转回C指针并取值：<code>*(*C.int)(unsafe.Pointer(p))</code></li>
<li>移动到下一个元素的位置：<code>p += uintptr(C.sizeof_int)</code>，其中<code>C.sizeof_XXX</code> 可以获取 <code>XXX</code> 的sizeof的大小。</li>
<li>重复 2-3，直到数组结束</li>
</ol>
<h4 id="map-c-array-to-go-slice">Map C Array to Go Slice</h4>
<p>上述方法其实用起来还是有点麻烦的，需要自己控制指针，也容易出错。</p>
<p>实际上，Go Array本质上也是连续的一块内存，其内存视图和C中完全一致（Go Slice不一样，Slice是个包含Len, Cap, Data的结构体，其中Data的部分和C一致）。我们只需要欺骗Go，让他认为这是一个Go Array即可。</p>
<ol type="1">
<li>转成中间指针：<code>unsafe.Pointer(arr)</code></li>
<li>强转成Go Array的指针：<code>(*[1 &lt;&lt; 31]C.int)(unsafe.Pointer(arr))</code>。这里的<code>*[1 &lt;&lt; 31]C.int</code>的含义是指向 <code>[1 &lt;&lt; 31]C.int</code>的指针，其中<code>1 &lt;&lt; 31</code> 只是用位运算表达一个很大的数而已，避免下一步的切面操作越界。</li>
<li>对数组做切片得到Go Slice：<code>(*[1 &lt;&lt; 31]C.int)(unsafe.Pointer(arr))[0:5:5]</code>，切面的参数<code>[0:5:5]</code>表示取<code>[0, 5)</code>对应的数据，且<code>capacity</code>为5。</li>
</ol>
<p>这里的内存是C程序来维护的，Go Array/Slice只是C Array的View，并不维护C的内存。因此需要开发者自己维护好C数据的生命周期。如果不在乎性能的话，最简单的方法就是Deep Copy整个Slice。或者将析构的函数返回给接口的调用方，让其自行处理。</p>
<p>有聪明的小伙伴可能会想到通过 <code>runtime.SetFinalizer</code> 在Go Slice对象析构时，调用C的析构函数。这是有问题的，看下面的例子：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"runtime"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	<span class="token punctuation">&#123;</span>
		a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>
		runtime<span class="token punctuation">.</span><span class="token function">SetFinalizer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"free a"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
		b <span class="token operator">=</span> a
	<span class="token punctuation">&#125;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span>
	runtime<span class="token punctuation">.</span><span class="token function">GC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"222"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Output</span>
<span class="token comment">// 111</span>
<span class="token comment">// free a</span>
<span class="token comment">// [1 2 3]</span>
<span class="token comment">// 222</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在第一次调用 <code>runtime.GC()</code> 的时候，<code>a</code> 就已经被释放了，此时如果 <code>SetFinalizer</code> 中调用了C的析构函数，会导致 <code>b</code> 访问异常的数据。原因是在Go中，Map和Slice都只是很小的Header结构体，<code>b = a</code> 语句其实是Copy了这个Header（并不是引用），后续析构的是 <code>a</code> 这个Header。</p>
<h4 id="passthrough-go-slice-to-c">Passthrough Go Slice to C</h4>
<p>将Go的Array/Slice透传给C就十分简单了。由于Go Array/Slice底层的数据都是连续的，获取第0个元素的地址即可。</p>
<ul>
<li>easy: <code>&amp;arr[0]</code></li>
</ul>
<h3 id="union-enum">Union / Enum</h3>
<p>CGO通过 <code>C.union_XXX</code> 来使用<code>union</code> 类型，通过 <code>C.enum_XXX</code> 使用 <code>enum</code> 的类型，这点和<code>struct</code>相同。</p>
<p>对于定义好的<code>enum</code>类型，可以直接 <code>C.XXX</code>的方式直接访问枚举值。</p>
<p>由于Go中没有C Union的结构，Go会将C Union的数据转换为对应大小的字节数组。我们在使用的时候需要自行转换成对应的类型来读写。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token comment">/*
#include &lt;stdio.h>
enum Type &#123;CHAR, INT, DOUBLE&#125;;
typedef union Value &#123;
	char char_v;
	int int_v;
	double double_v;
&#125; Value;

typedef struct Number &#123;
	enum Type type;
	Value v;
&#125; Number;

void print_number(struct Number *n) &#123;
	switch (n->type) &#123;
	case CHAR:
		printf("char %c\n", n->v.char_v);
		break;
	case INT:
		printf("int %d\n", n->v.int_v);
		break;
	case DOUBLE:
		printf("double %f\n", n->v.double_v);
		break;
	&#125;
&#125;
*/</span>
<span class="token keyword">import</span> <span class="token string">"C"</span>
<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"reflect"</span>
	<span class="token string">"unsafe"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	n <span class="token operator">:=</span> <span class="token operator">&amp;</span>C<span class="token punctuation">.</span>struct_Number<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token comment">// n.v.int_v = 100 // unsupported</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v %v %v %v\n"</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>

	n<span class="token punctuation">.</span>_type <span class="token operator">=</span> C<span class="token punctuation">.</span>CHAR
	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>C<span class="token punctuation">.</span>char<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">'Z'</span>
	C<span class="token punctuation">.</span><span class="token function">print_number</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>

	n<span class="token punctuation">.</span>_type <span class="token operator">=</span> C<span class="token punctuation">.</span>INT
	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>C<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">100</span>
	C<span class="token punctuation">.</span><span class="token function">print_number</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>

	n<span class="token punctuation">.</span>_type <span class="token operator">=</span> C<span class="token punctuation">.</span>DOUBLE
	<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>C<span class="token punctuation">.</span>double<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3.14</span>
	C<span class="token punctuation">.</span><span class="token function">print_number</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Output</span>
<span class="token comment">//  *main._Ctype_struct_Number main._Ctype_Value uint8 8</span>
<span class="token comment">//  char Z</span>
<span class="token comment">//  int 100</span>
<span class="token comment">//  double 3.140000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里需要注意：</p>
<ol type="1">
<li>名字为<code>type</code>的成员变量，需要用<code>_type</code>来访问。</li>
<li><code>union Value</code>类型，根据 <code>reflect.TypeOf</code> 的结果可以看出，它本质上是<code>[8]uint8</code>。这里的<code>8</code>是<code>C.sizeof_double</code>的大小。</li>
<li>将<code>[8]uint8</code> 取地址之后，得到内存的首地址，再强转为我们期望的类型的指针，才可以使用。</li>
</ol>
<h3 id="zero-copy">Zero Copy</h3>
<p>前面的数组的章节。我们访问C Array的时候，其实并没有做拷贝，而是直接访问的内存。但是对于string的操作，调用<code>C.GoString</code>和<code>C.CString</code>都做了深拷贝。</p>
<p>在Go中，<code>string</code>和<code>[]byte</code>的转换，其实存在拷贝。如果我们可以让这两者之间的转换不存在拷贝的话。那么Go <code>[]byte</code>和C <code>char *</code>也可以无拷贝的转换了。</p>
<p>这里需要注意的是，这里的<code>[]byte</code>对象的最后一个 <code>byte</code> 并没有规定必须是<code>\0</code>。因此如果直接将指针传给C程序的话，建议再传一个长度，否则很容易出现越界的错误（下面的例子CGO的部分可能会crash）。</p>
<p>例子：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"reflect"</span>
	<span class="token string">"unsafe"</span>
<span class="token punctuation">)</span>

<span class="token comment">/*
#include &lt;stdio.h>
void print(char *s) &#123;
	printf("%s\n", s);
&#125;
*/</span>
<span class="token keyword">import</span> <span class="token string">"C"</span>

<span class="token keyword">func</span> <span class="token function">String2BytesUnsafe</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">0x7fff0000</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>
		<span class="token punctuation">(</span><span class="token operator">*</span>reflect<span class="token punctuation">.</span>StringHeader<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">Bytes2StringUnsafe</span><span class="token punctuation">(</span>bytes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>out <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	sliceHeader <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>reflect<span class="token punctuation">.</span>SliceHeader<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span>
	header <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>reflect<span class="token punctuation">.</span>StringHeader<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span>
	header<span class="token punctuation">.</span>Data <span class="token operator">=</span> sliceHeader<span class="token punctuation">.</span>Data
	header<span class="token punctuation">.</span>Len <span class="token operator">=</span> sliceHeader<span class="token punctuation">.</span>Len
	<span class="token keyword">return</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">testString2BytesUnsafe</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	bytes <span class="token operator">:=</span> <span class="token function">String2BytesUnsafe</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"String2Bytes Before: %v\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
	bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'Q'</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"String2Bytes After: %v\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">testBytes2StringUnsafe</span><span class="token punctuation">(</span>bytes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	s <span class="token operator">:=</span> <span class="token function">Bytes2StringUnsafe</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Bytes2String Before: %v\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
	bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'Q'</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Bytes2String After: %v\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	raw <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span>
	<span class="token function">testString2BytesUnsafe</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">testBytes2StringUnsafe</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span>
	s1 <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span>
	C<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>C<span class="token punctuation">.</span>char<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>reflect<span class="token punctuation">.</span>StringHeader<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// may crash</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Output</span>
<span class="token comment">// String2Bytes Before: Hello World!</span>
<span class="token comment">// String2Bytes After: Qello World!</span>
<span class="token comment">// Bytes2String Before: Hello World!</span>
<span class="token comment">// Bytes2String After: Qello World!</span>
<span class="token comment">// Qello World!</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="string---bytes">String -&gt; Bytes</h4>
<p>Go中的string其实是一个小对象。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> StringHeader <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Data <span class="token builtin">uintptr</span>
	Len  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>将<code>string</code>强转为<code>reflect.StringHeader</code>的结构，即可拿到<code>Data</code>的数据，再构造为<code>[]byte</code>即可（当然如果在CGO的话，直接用这个<code>Data</code>数据也行）。</p>
<h4 id="bytes---string">Bytes -&gt; String</h4>
<p>和前面类似，构造<code>reflect.StringHeader</code>结构，再强转为<code>string</code>类型。</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title>一个简单粗暴的人脸认证标注工具的实现</title>
    <url>/2017/01/01/face-verify-annotate-tool/</url>
    <content><![CDATA[<blockquote>
<p>小喵的唠叨话：话说最近小喵也要开始写论文了，想了两周还是没有头绪，不知道该写些什么。恰好又被分配了一点标注数据的工作，于是乎想写点代码，休闲一下。结果也就是这篇博客。对了，小喵对GUI编程一窍不通，只知道Windows有MFC，Mac上的不知道。。。恰好听说过QT，而且知道这个界面库是跨平台的，也就选用了这个工具了。</p>
</blockquote>
<span id="more"></span>
<p>那么现在开始和小喵一起瞎猫似的捯饬QT吧~ 先看一眼效果图： <img src="annotate-pro.png" alt="annotate pro" /></p>
<p>是不是乍一看还挺炫酷。功能上也还好，至少简单的标注工作都能完成了。那么让我们来一步一步的完成这个工具吧。</p>
<h2 id="一功能需求">一、功能需求</h2>
<p>这个程序主要的功能是完成一个人脸认证的标注工具。 具体来说，就是给定很多对人脸的图片，要标注一下这一对是不是同一个人。同时，每一对的图片的人脸一张是生活照，一张是证件照，需要同时标注出哪张是证件照，那张是生活照。照片都是经过检测和对齐的，这个工具只需要完成简单的显示、标注、保存记录的工作就可以。 当然考虑到有时候需要标注的list可能很大，可以加入跳转的功能。标注结果都保存在内存，用户可以随时更改，点击保存，则写入硬盘。</p>
<h2 id="二数据结构">二、数据结构</h2>
<p>那么是不是现在就可以动手写代码了呢？当然不是！ 小喵写这个软件一共用了3天的时间，第一天完成了一个超简单demo程序，熟悉了一下QT的事件添加，路径选择和显示图片的几个功能。之后又仔细的思考了一下各种数据的结构，才动手做了这一版工具。没有一个清晰的数据的概念，会造成许多的无用功。所以，大家在写程序的时候，要在准备阶段多花一点时间来思考，毕竟写代码才是最简单的事情不是吗？</p>
<ol type="1">
<li>输入数据格式：因为小喵的工作环境下，大家都对linux有一些了解，所以可以自行生成好图片的路径的list，这里统一要求，list必须是偶数行（2n行），代表n对，相邻的图片为一对。</li>
<li>标注数据存储：考虑到我们不仅需要标注是不是一对，还得标注哪张是证件照，所以不妨直接在读数据的时候就分成两份，这样就用两个 <code>std::vector&lt;std::string&gt;</code> 来存储就行了。</li>
<li>标注过程的状态：我们需要知道标注过程中的那些信息呢？主要应该有：总数据量，当前已标注的对数。</li>
<li>标注结果：每一对都有一组对应地 结果，考虑到有4中情况：未标注，不确定，不匹配，匹配这四种，我们定义一个枚举的状态表 <code>enum AnnoState</code> 就好。之后用一个 <code>std::vector&lt;enum AnnoState&gt;</code> 来存储标注结果。</li>
</ol>
<h2 id="三界面制作">三、界面制作</h2>
<p>GUI程序的界面一直是个很让人头疼的问题，记得在本科学习Java的时候，需要自己手写一个控件，使用new JButton()类似的方式创建按钮，然后添加到主界面上，位置什么的都得调用这个对象来设置，十分的繁琐。那么QT能不能简化这个过程呢？答案是肯定的。</p>
<p>创建项目-&gt;选择Application-&gt;Qt Widgets Application。然后项目名改成Anno Pro，其他全部默认设置，就创建好了一个项目了。这个初始的项目里面有3个文件夹：头文件，源文件和界面文件，以及一个.pro结尾的项目配置文件。</p>
<p><img src="qt-create-project.png" alt="qt-create-project" /></p>
<p>既然需要编辑界面，我们自然会想查看一下界面文件了，双击 <code>MainWindow.ui</code> (我这里全部都是默认的名字)。出现的是一个充满各种控件的可视化界面编辑器。</p>
<p><img src="qt-main-window-ui.png" alt="qt-main-window-ui" /></p>
<p>按照我们之前的界面样式，拖动左边的控件，就可以完成界面的编写了。小喵这里只用到了几种控件：</p>
<ul>
<li><code>QPushButton</code>：各种按钮</li>
<li><code>QLabel</code>：所以显示文字和图像的区域都是这这个控件</li>
<li><code>QFrame</code>：一个容器，小喵用它只是为了结构上更清晰</li>
<li><code>QSlider</code>：滑动条，小喵用的是水平滑动条</li>
<li><code>QStatusBar</code>：状态栏，这应该是自带的，如果删掉的话，在MainWindow控件点击右键就可以创建了</li>
</ul>
<p>拖动完成后，双击空间，就可以给空间设置文本，同时注意给每个控件起一个好听的名字（起名字很重要的！《代码大全》中甚至用一章，好几十页的篇幅介绍如何命名）。</p>
<p>至于其他的控件，大家可以自行研究。反正小喵现在的道行应该才是筑基。 那么我们就愉快的完成了界面的编写了~点击左右下的运行图标（三角形的那个），就可以看到自己的运行程序了！</p>
<h2 id="四数据定义与初始化">四、数据定义与初始化</h2>
<p>我们先前已经分析了我们需要的数据了，这部分开始使用代码的定义这些结构。打开我们头文件<code>mianwindow.h</code>，添加需要的变量，小喵就直接把自己的头文件复制下来了：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">MAINWINDOW_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAINWINDOW_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span>

<span class="token keyword">class</span> <span class="token class-name">MainWindow</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">MainWindow</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">enum</span> <span class="token class-name">AnnoState</span> <span class="token punctuation">&#123;</span>
        UNKNOWN <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">// 未标注</span>
        YES <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token comment">// 匹配</span>
        NO <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>       <span class="token comment">// 不匹配</span>
        UNSURE <span class="token operator">=</span> <span class="token number">3</span>    <span class="token comment">// 不确定</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">explicit</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    Ui<span class="token double-colon punctuation">::</span>MainWindow <span class="token operator">*</span>ui<span class="token punctuation">;</span> <span class="token comment">// 自带的，ui界面的接口</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> image_list_1<span class="token punctuation">;</span>  <span class="token comment">// 用来存放左边的图片的list</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> image_list_2<span class="token punctuation">;</span>  <span class="token comment">// 用来存放右边的图片的list</span>
    <span class="token keyword">int</span> current_idx<span class="token punctuation">;</span>                        <span class="token comment">// 当前图片对的id</span>
    <span class="token keyword">int</span> total_pair_num<span class="token punctuation">;</span>                     <span class="token comment">// 总共的图片对的数目</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span> AnnoState <span class="token operator">></span> annotation_list<span class="token punctuation">;</span>  <span class="token comment">// 标注的结果</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// MAINWINDOW_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出，小喵添加了一个 <code>enum</code> 的类型，用来表示标注结果的类型。虽然只有4个状态，我们甚至可以直接约定几个 <code>int</code> 值来表示，但相信我，为这么4个状态定义一个枚举类型是完全有必要的。之后我们所有的成员变量都是 <code>private</code> 的。具体含义，注释中也有写明。</p>
<p>下一步就是初始化了。初始化的过程当然得写在构造函数里，这里，小喵在初始化的时候强迫用户选择一个标注的list，如果不这么做，会有很多的意外情况。请原谅小喵的怠惰。。。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">MainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">MainWindow</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>MainWindow<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 选择输入文件</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        QString file_name <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getOpenFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"choose a file to annotate"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>file_name<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> ok <span class="token operator">=</span> <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"choose a file to annotate"</span><span class="token punctuation">,</span> <span class="token string">"Don't want to work now?"</span><span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>Ok <span class="token operator">|</span> QMessageBox<span class="token double-colon punctuation">::</span>Cancel<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ok <span class="token operator">==</span> QMessageBox<span class="token double-colon punctuation">::</span>Ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        std<span class="token double-colon punctuation">::</span>ifstream <span class="token function">is</span><span class="token punctuation">(</span>file_name<span class="token punctuation">.</span><span class="token function">toStdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>string image_name<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> is_odd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>is <span class="token operator">>></span> image_name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>is_odd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token operator">-></span>image_list_1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>image_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token operator">-></span>image_list_2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>image_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            is_odd <span class="token operator">=</span> <span class="token operator">!</span>is_odd<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>image_list_1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> image_list_2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"choose a file to annotate"</span><span class="token punctuation">,</span> <span class="token string">"this image list is not even"</span><span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>Ok<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> image_list_1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"choose a file to annotate"</span><span class="token punctuation">,</span> <span class="token string">"this image list is empty"</span><span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>Ok<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">assert</span><span class="token punctuation">(</span>image_list_1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> image_list_2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始化其他参数</span>
    <span class="token keyword">this</span><span class="token operator">-></span>total_pair_num <span class="token operator">=</span> image_list_1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>current_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>AnnoState<span class="token operator">></span> <span class="token function">annotation_list</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>total_pair_num<span class="token punctuation">,</span> AnnoState<span class="token double-colon punctuation">::</span>UNKNOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>annotation_list<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>annotation_list<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里用了两个QT的组件：</p>
<ul>
<li><code>QFileDialog</code>：这个组件是一个文件对话框，其中有两个十分有用的函数：
<ul>
<li><code>getOpenFileName</code> 用于选择一个文件，并返回文件名；</li>
<li><code>getSaveFileName</code> 用于选择一个文件来保存数据，并返回一个文件名。</li>
<li>这两个函数的参数很多，小喵只用到了前面的3个，用到的参数依次是：父组件，标题，初始目录。其他的参数的功能，喵粉可以去官网查一下。</li>
</ul></li>
<li>QMessageBox::information，这个函数的功能是显示一个消息窗口。四个参数分别表示：父组件，标题，内容，按钮样式。</li>
</ul>
<p>相信大家懂一点点C++的知识的话，很容易看懂这段代码。 这里就是使用了一个循环，让用户选择文件，如果选择成功了，则读取数据到我们的list中，最终初始化了其他的参数，在调用display函数来显示。这个display函数是我们自己编写的，后面会说到。另外，assert函数是断言，他保证了断言的数据的合法性，如果不合法，程序会退出。想使用这个函数，需要包含头文件 <code>assert.h</code>。</p>
<h2 id="五添加事件响应">五，添加事件响应</h2>
<p>小喵之前了解到，QT使用的是一种信号和槽的事件机制，是一种十分高级的机制。那么有没有什么简单的方法，为我们的每个控件绑定自己的的事件呢？</p>
<p>在界面编辑界面下，<strong>右击</strong>需要添加事件的空间，然后选择<strong>转到槽</strong>。这时候会有很多选项，这里直接选择 <code>clicked</code> 就可以。然后你会发现我们的mainwindow类中，多了一个pivate slot的函数（也就是槽函数）。</p>
<p><img src="qt-goto-slot.png" alt="qt-goto-slot" /></p>
<p>我们可以给每一个需要添加事件的函数都用这种方式来绑定事件，最终头文件中会出现这样的声明（函数名称的规则是：<code>on_控件名_信号类型</code>）：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">private</span> slots<span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">on_pushButton_save_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">on_pushButton_ok_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">on_pushButton_no_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">on_pushButton_unsure_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">on_pushButton_next_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">on_pushButton_prev_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">on_pushButton_switch_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">on_horizontalSlider_progress_sliderReleased</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在源文件中，也会生成空的函数定义。我们只需要自己完成函数定义就大功告成！</p>
<p>下面给出的是除了save的所有的函数的定义。主要工作是，给每个事件编写修改数据的代码，而不去负责任何界面相关的部分。各个控件可以通过 <code>this-&gt;ui</code> 来设置和获取。使用Qt Creator的时候，要充分利用智能提示。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**
 * @brief MainWindow::on_pushButton_ok_clicked
 * 标注为"匹配"
 */</span>
<span class="token keyword">void</span> <span class="token class-name">MainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">on_pushButton_ok_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>annotation_list<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-></span>current_idx<span class="token punctuation">]</span> <span class="token operator">=</span> MainWindow<span class="token double-colon punctuation">::</span>AnnoState<span class="token double-colon punctuation">::</span>YES<span class="token punctuation">;</span>
    <span class="token operator">++</span> <span class="token keyword">this</span><span class="token operator">-></span>current_idx<span class="token punctuation">;</span>
    <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * @brief MainWindow::on_pushButton_no_clicked
 * 标注为"不匹配"
 */</span>
<span class="token keyword">void</span> <span class="token class-name">MainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">on_pushButton_no_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>annotation_list<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-></span>current_idx<span class="token punctuation">]</span> <span class="token operator">=</span> MainWindow<span class="token double-colon punctuation">::</span>AnnoState<span class="token double-colon punctuation">::</span>NO<span class="token punctuation">;</span>
    <span class="token operator">++</span> <span class="token keyword">this</span><span class="token operator">-></span>current_idx<span class="token punctuation">;</span>
    <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * @brief MainWindow::on_pushButton_unsure_clicked
 * 标注为"不确定"
 */</span>
<span class="token keyword">void</span> <span class="token class-name">MainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">on_pushButton_unsure_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>annotation_list<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-></span>current_idx<span class="token punctuation">]</span> <span class="token operator">=</span> MainWindow<span class="token double-colon punctuation">::</span>AnnoState<span class="token double-colon punctuation">::</span>UNSURE<span class="token punctuation">;</span>
    <span class="token operator">++</span> <span class="token keyword">this</span><span class="token operator">-></span>current_idx<span class="token punctuation">;</span>
    <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * @brief MainWindow::on_pushButton_next_clicked
 * 移动到下一组
 */</span>
<span class="token keyword">void</span> <span class="token class-name">MainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">on_pushButton_next_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token operator">++</span> <span class="token keyword">this</span><span class="token operator">-></span>current_idx<span class="token punctuation">;</span>
    <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * @brief MainWindow::on_pushButton_prev_clicked
 * 移动到上一组
 */</span>
<span class="token keyword">void</span> <span class="token class-name">MainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">on_pushButton_prev_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token operator">--</span> <span class="token keyword">this</span><span class="token operator">-></span>current_idx<span class="token punctuation">;</span>
    <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * @brief MainWindow::on_pushButton_switch_clicked
 * 交换两边的图片
 */</span>
<span class="token keyword">void</span> <span class="token class-name">MainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">on_pushButton_switch_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>string tmp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>image_list_1<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-></span>current_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>image_list_1<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-></span>current_idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>image_list_2<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-></span>current_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>image_list_2<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-></span>current_idx<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * @brief MainWindow::on_horizontalSlider_progress_sliderReleased
 * 拖放进度条，控制进度
 */</span>
<span class="token keyword">void</span> <span class="token class-name">MainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">on_horizontalSlider_progress_sliderReleased</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>ui<span class="token operator">-></span>horizontalSlider_progress<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>current_idx <span class="token operator">=</span> pos<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>至此，我们的大体的功能逻辑就编写完了。 那么怎么让界面上显示我们的系统状态呢？注意到了我们上面的每一个函数都调用了display这个函数了吗？这个函数正式负责绘制界面的功能。 部分主要介绍三个函数：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string UNSURE_FILE <span class="token operator">=</span> <span class="token string">":File/images/unsure.png"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string YES_FILE <span class="token operator">=</span> <span class="token string">":File/images/yes.gif"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string NO_FILE <span class="token operator">=</span> <span class="token string">":File/images/no.gif"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string UNKNOWN_FILE <span class="token operator">=</span> <span class="token string">":File/images/unknown.png"</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @brief set_image 将图像设置到label上，图像自动根据label的大小来缩放
 * @param label
 * @param image
 */</span>
<span class="token keyword">void</span> <span class="token function">set_image</span><span class="token punctuation">(</span>QLabel <span class="token operator">*</span>label<span class="token punctuation">,</span> <span class="token keyword">const</span> QPixmap <span class="token operator">&amp;</span>image<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">float</span> <span class="token function">ratio</span><span class="token punctuation">(</span><span class="token number">0.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ratio <span class="token operator">=</span> <span class="token number">1.</span> <span class="token operator">*</span> label<span class="token operator">-></span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> image<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ratio <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span> <span class="token number">1.</span> <span class="token operator">*</span> label<span class="token operator">-></span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> image<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ratio <span class="token punctuation">)</span><span class="token punctuation">;</span>
    QPixmap m <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">scaled</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>image<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> ratio<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>image<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> ratio<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    label<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">set_image</span><span class="token punctuation">(</span>QLabel <span class="token operator">*</span>label<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string image_path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    QPixmap <span class="token function">image</span><span class="token punctuation">(</span>image_path<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_image</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * @brief MainWindow::display
 * 根据系统中的所有的变量来设置当前界面中的各个部分的内容
 */</span>
<span class="token keyword">void</span> <span class="token class-name">MainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>current_idx <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token operator">-></span>total_pair_num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"annotation over"</span><span class="token punctuation">,</span> <span class="token string">"Congratulations! You've finished all the job! Please save your work :)"</span><span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>Ok<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-></span>current_idx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>total_pair_num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>current_idx <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"annotation warning"</span><span class="token punctuation">,</span> <span class="token string">"You must start at 0 (not a negative position, I konw you wanna challenge this app) :)"</span><span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>Ok<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-></span>current_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 进度条</span>
    <span class="token keyword">this</span><span class="token operator">-></span>ui<span class="token operator">-></span>horizontalSlider_progress<span class="token operator">-></span><span class="token function">setRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>total_pair_num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>ui<span class="token operator">-></span>horizontalSlider_progress<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>current_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 状态栏</span>
    <span class="token keyword">this</span><span class="token operator">-></span>ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>current_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" / "</span> <span class="token operator">+</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>total_pair_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 文件名</span>
    std<span class="token double-colon punctuation">::</span>string image_name_1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>image_list_1<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-></span>current_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string image_base_name_1 <span class="token operator">=</span> image_name_1<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>image_name_1<span class="token punctuation">.</span><span class="token function">find_last_of</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string image_name_2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>image_list_2<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-></span>current_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string image_base_name_2 <span class="token operator">=</span> image_name_2<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>image_name_2<span class="token punctuation">.</span><span class="token function">find_last_of</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>ui<span class="token operator">-></span>label_image_name_1<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>image_base_name_1<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>ui<span class="token operator">-></span>label_image_name_2<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>image_base_name_2<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 显示图像</span>
    <span class="token function">set_image</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>ui<span class="token operator">-></span>label_image_view_1<span class="token punctuation">,</span> image_name_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_image</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>ui<span class="token operator">-></span>label_image_view_2<span class="token punctuation">,</span> image_name_2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 显示标注结果</span>
    std<span class="token double-colon punctuation">::</span>string show_image_name <span class="token operator">=</span> UNKNOWN_FILE<span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>annotation_list<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-></span>current_idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> AnnoState<span class="token double-colon punctuation">::</span>UNKNOWN<span class="token operator">:</span>
        show_image_name <span class="token operator">=</span> UNKNOWN_FILE<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> AnnoState<span class="token double-colon punctuation">::</span>YES<span class="token operator">:</span>
        show_image_name <span class="token operator">=</span> YES_FILE<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> AnnoState<span class="token double-colon punctuation">::</span>NO<span class="token operator">:</span>
        show_image_name <span class="token operator">=</span> NO_FILE<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> AnnoState<span class="token double-colon punctuation">::</span>UNSURE<span class="token operator">:</span>
        show_image_name <span class="token operator">=</span> UNSURE_FILE<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">set_image</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>ui<span class="token operator">-></span>label_image_compare_status<span class="token punctuation">,</span> show_image_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最开始我们定义了4个图片的路径。这可以是绝对路径或者相对路径。我们这里的路径设置的比较奇怪，在下面我们会讲到。<code>set_image</code> 负责将给定的图片绘制到 <code>QLabel</code> 上，为了显示的好看，图像会按照 <code>QLabel</code> 的尺寸来动态的缩放。这样就不会出现有个图像太大或太小的情况了。<code>display</code> 则是负责各个区域的绘制。</p>
<p>还差一步是保存结果：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*
 * @brief MainWindow::on_pushButton_save_clicked
 * 保存结果文件
 */</span>
<span class="token keyword">void</span> <span class="token class-name">MainWindow</span><span class="token double-colon punctuation">::</span><span class="token function">on_pushButton_save_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    QString file_name <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token double-colon punctuation">::</span><span class="token function">getSaveFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"choose a file to save"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>file_name<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"choose a file to save"</span><span class="token punctuation">,</span> <span class="token string">"please enter a legal file name"</span><span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>Ok<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    std<span class="token double-colon punctuation">::</span>ofstream <span class="token function">os</span><span class="token punctuation">(</span>file_name<span class="token punctuation">.</span><span class="token function">toStdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>annotation_list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span> idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        os <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>image_list_1<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>image_list_2<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>annotation_list<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">QMessageBox</span><span class="token double-colon punctuation">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"save"</span><span class="token punctuation">,</span> <span class="token string">"save result success"</span><span class="token punctuation">,</span> QMessageBox<span class="token double-colon punctuation">::</span>Ok<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="六添加资源">六、添加资源</h2>
<p>由于我们的程序是需要publish出去的，因此图片文件等资源，必须包含在程序中。那么Qt怎么添加文件资源呢？</p>
<p>在项目视图下，右键项目-&gt;添加新文件-&gt;Qt-&gt;Qt Resource File。就可以创建一个qrc文件了。</p>
<p><img src="qt-create-resource-file.png" alt="qt-create-resource-file" /></p>
<p>我这里给这个文件取名为image。</p>
<p>之后，建议在项目的根目录里面新建一个文件夹，用来存放资源。小喵的结构是这个样子的：</p>
<p><img src="annotate-tool-files.png" alt="annotate-tool-files" /></p>
<p>小喵的项目根目录新建了一个文件夹images，并将图像素材放入了这个文件夹。</p>
<p>之后回到QT，我们刚建好的image.qrc文件-&gt;Open in Editor。</p>
<p>先添加前缀，这里写上/File。之后点击新建的/File目录，再点击添加-&gt;添加文件，选择我们的素材文件。最终的效果图如下：</p>
<p><img src="qt-resource-image-files.png" alt="qt-resource-image-files" /></p>
<p>之后，我们就可以在程序中直接访问这些资源了。这也就是我们之前的那四个奇怪的路径的由来了。</p>
<h2 id="七发布">七、发布</h2>
<p>此时此刻，相信每一个喵粉的程序都能在自己的电脑上愉快的玩耍了。这么有意思的程序，怎么分享给其他人呢？</p>
<p>和Windows上常用的VS类似，Qt Creator的左下角有个发布选项：</p>
<p><img src="qt-project-publish.png" alt="qt-project-publish" /></p>
<p>选择Release，然后构建整个项目就可以了。之后找到我们的程序，双击就可以运行。</p>
<p>这时候你会愉快的把这个程序发给你的好伙伴，得到的反应一定是：这是啥！我打不开！ 为什么呢？ 虽然Qt是一个跨平台的界面库，但如果对方的电脑上没有安装Qt，那么就不能运行。不过不用失落，Qt中早已给出一个绝妙的解决办法。</p>
<p>小喵的电脑是Mac的，所以找到的解决方案也是Mac的，Windows和Linux上也有类似的办法，大家可以自行查找。</p>
<p><a href="http://www.cnblogs.com/E7868A/archive/2012/12/02/2798225.html">http://www.cnblogs.com/E7868A/archive/2012/12/02/2798225.html</a></p>
<p>参考上述博客，我们使用 <code>macdeployqt</code> 这个工具来处理一下release的程序就搞定。这时候你会发现原本100k的程序变成了22M。但是直接发给别人的时候，是可以直接运行的！</p>
<p>至此，本次的博客结束了。 完整的项目在github上可以下载： <a href="https://github.com/miaoerduo/Anno_pro">https://github.com/miaoerduo/Anno_pro</a></p>
<p><strong>转载请注明出处~</strong></p>
]]></content>
      <categories>
        <category>C++</category>
        <category>QT</category>
      </categories>
  </entry>
  <entry>
    <title>C程序优雅地调用Lua?一篇博客带你全面了解lua_State</title>
    <url>/2020/02/26/lua-state-tutorial/</url>
    <content><![CDATA[<h2 id="一前言">一、前言</h2>
<p>Lua是一种使用十分方便的脚本语言，同时又能C/C++无缝的粘合在一起，在速度上也比很多其他的脚本语言快了一个数量级，在使用LuaJit的情况下，速度甚至可以与C语言比肩。同时Lua支持模块的热更新，在游戏等行业受到广泛的应用。</p>
<p>同时Lua虚拟机十分的轻量，在占用极少内存和依赖的情况下，可以方便的嵌入到我们的项目中。</p>
<p>本文中，主要介绍了在C/C++项目中，使用Lua虚拟机的技巧，着重介绍Lua_State的原理和使用。简单的说就是用C去调用Lua。另一个技术是用Lua调用C库，可以为Lua程序加速，这个在以后的文章中再介绍。</p>
<span id="more"></span>
<p>本文中使用的LuaJit作为我们Lua脚本的执行引擎。对应的Lua的版本是Lua5.1。</p>
<h2 id="二c调用lua的案例">二、C调用Lua的案例</h2>
<p>在下面的程序中，我们的Lua脚本中，使用一个全局变量<code>version</code>表示程序的版本，定义一个<code>add</code>函数，负责计算两个数组的和。之后通过在C程序中加载Lua虚拟机，打印版本号和调用<code>add</code>函数。</p>
<p>下面是对应的C++程序：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;lualib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;lauxlib.h></span></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>lua_script <span class="token operator">=</span> <span class="token raw-string string">R"(
version = '1.0.0'
function add(a, b)
    return a + b;
end
)"</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    lua_State <span class="token operator">*</span>L <span class="token operator">=</span> <span class="token function">luaL_newstate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"create state failed!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">luaL_dostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> lua_script<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"cannot run lua script!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// get global variable</span>
    <span class="token function">lua_getglobal</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>version <span class="token operator">=</span> <span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"version: "</span> <span class="token operator">&lt;&lt;</span> version <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// call global function</span>
    <span class="token function">lua_getglobal</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
    <span class="token function">lua_pushnumber</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">lua_pushnumber</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">lua_pcall</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"call func failed, got error: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">lua_tonumber</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" + "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token function">lua_close</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译和运行，我这里用的luajit，所以链接的库可能略有不同，使用lua的话，使用<code>-llua</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># compile</span>
g++ lua_sample.cpp <span class="token parameter variable">-o</span> lua_sample <span class="token parameter variable">-I</span> /path/to/lua/include/ <span class="token parameter variable">-L</span> /path/to/lua/lib -lluajit-5.1 <span class="token parameter variable">-std</span><span class="token operator">=</span>c++11 <span class="token parameter variable">-o</span> lua_sample
<span class="token comment"># run</span>
<span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span>/path/to/lua/lib ./lua_sample<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>就可以得到如下的输出：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">version: 1.0.0
100 + 200 = 300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="三交互与栈">三、交互与栈</h2>
<p>C与Lua的交互，是通过lua_State和相关的函数接口来实现的（<code>lua_getglobal</code>, <code>lua_pushnumber</code>等）。但是具体的值的获取和函数调用，其实是利用了一套栈机制。</p>
<p>C与Lua的交互，本质上是对Lua栈做相关的操作。<code>lua_pushxxx</code>是将数据压入栈中，而<code>lua_pop</code>就是出栈操作。<code>lua_toxxx</code>是将栈中对应位置的数据转换成我们期望的数据类型，而输出。</p>
<p>下面我们按情况分别介绍。</p>
<h2 id="四全局变量">四、全局变量</h2>
<h3 id="全局的基本类型数据">1. 全局的基本类型数据</h3>
<p>获取和设置全局变量，是一个重要的功能。</p>
<p>例子中的是获取全局变量的实例。我们现在知道所谓的交互都是堆栈做操作。<code>lua_getglobal</code>的作用就是把输入的变量名对应的数据放入栈顶。</p>
<p><img src="lua_getglobal.png" alt="lua_getglobal" /></p>
<p>之后，我们只需要根据栈中的位置，获取对应的数据即可。比如上图中，<code>version</code>就在栈顶的位置，索引号为101。由于我们一般都是对栈顶做操作，使用负数的索引会更方便。<code>lua_tostring(L, -1)</code>就可以把索引号为<code>-1</code>的数据（即栈顶的数据）转换成<code>string</code>类型输出。</p>
<p>在数据使用结束后，我们需要将数据pop出栈（<code>lua_pop(L, 1)</code>出栈一个数据），不然这个栈的大小会越来越大，导致最终程序内存很大，但是又不是因为内存泄漏，难以用valgrind等程序查到问题。</p>
<p>那么如何设置一个全局变量呢？</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">lua_pushstring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lua_setglobal</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"greet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>通过<code>lua_pushxxx</code>，在栈中push一个数据，之后使用<code>lua_setglobal</code>即可。<code>lua_setglobal</code>的功能是，pop出<strong>栈顶</strong>的数据，并使用给定的名字把它设置为全局变量。这样，我们在<code>lua</code>虚拟机就新建了名字为<code>greet</code>，值为字符串<code>"hello world"</code>的全局变量了。由于该操作本身就会pop出栈顶数据，我们随后就不需要再自行pop了。</p>
<h3 id="全局table">2. 全局Table</h3>
<p>Table的创建和读取，比一般变量要稍微复杂一点。主要使用<code>lua_newtable</code>或<code>lua_createtable</code>创建Table。之后使用<code>lua_settable</code>设置Table的键值对，<code>lua_gettable</code>去读取对应的值。</p>
<p>下面是一个完整的Demo。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;lualib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;lauxlib.h></span></span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    lua_State <span class="token operator">*</span>L <span class="token operator">=</span> <span class="token function">luaL_newstate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建table</span>
    <span class="token function">lua_newtable</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// t = &#123;&#125; 创建没有名字的table，这里用t代替</span>
                        <span class="token comment">// 也可以使用lua_createtable创建，该函数可以指定预分配的大小</span>
    <span class="token function">lua_pushstring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">lua_pushstring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"val1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">lua_settable</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// t["key1"] = "val1"</span>

    <span class="token function">lua_pushinteger</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">lua_pushstring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"val2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">lua_settable</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// t[1] = "val2"</span>

    <span class="token comment">// setfield 可以稍微简化创建的操作，但是key只能是字符串</span>
    <span class="token function">lua_pushstring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"val3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">lua_setfield</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// t["key3"] = "val3"</span>

    <span class="token function">lua_setglobal</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"my_table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 给这个匿名的table一个名字</span>

    <span class="token comment">// 读取table</span>
    <span class="token function">lua_getglobal</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"my_table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">lua_pushstring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">lua_gettable</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v1: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">lua_pushinteger</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">lua_gettable</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v2: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// getfield可以简化</span>
    <span class="token function">lua_getfield</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v3: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pop table</span>

    <span class="token function">lua_close</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>为了方便理解，这里我绘制了一个栈空间的示意图：</p>
<p><img src="lua_table.png" alt="lua table" /></p>
<p>首先是table的创建，使用<code>lua_newtable</code>可以创建一个table对象，并且在栈顶。之后我们将键、值分别push进栈，使用<code>lua_settable</code>，就可以将键值出栈，并设置进table中。这个过程也可以使用<code>lua_setfield</code>函数进行简化，在demo里面有写。最后我们使用<code>lua_setglobal</code>给栈顶的数据设置一个名字，并且出栈。这样，就创建好了一个Table。</p>
<p>读取的操作也类似。首先，我们使用<code>lua_getglobal</code>将对应的table放入栈顶。之后push想要获取的key值，最后使用<code>lua_gettable</code>，该函数在pop出key值后，会获取key值对应的value，并放入栈顶。这样就可以完成table的读取了。<code>lua_gettable</code>可以通过<code>lua_getfield</code>来简化操作。demo中也给出了例子。</p>
<h2 id="五函数调用">五、函数调用</h2>
<p>在前面，我们知道了变量的读取和设置。本节将介绍函数的调用。我们知道对于一个函数而言，最重要的有三个部分：</p>
<ol type="1">
<li>函数入口</li>
<li>参数</li>
<li>返回值</li>
</ol>
<p>这是第一个例子的节选。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">lua_getglobal</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
<span class="token function">lua_pushnumber</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lua_pushnumber</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">lua_pcall</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"call func failed, got error: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">lua_tonumber</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>调用示意图：</p>
<p><img src="lua_function_call.png" alt="lua function call" /></p>
<p>首选，我们使用<code>lua_getglobal</code>将函数入口入栈。之后使用<code>lua_pushxxx</code>向栈中push入参数。之后我们调用该函数，可以使用的函数有<code>lua_call</code>和<code>lua_pcall</code>。</p>
<p><code>lua_pcall</code>表示<code>protected mode</code>。简单理解，<code>lua_call</code>没有返回值，我们不能知道函数调用的状态。而<code>lua_pcall</code>有返回值，并且支持设定错误处理函数。速度上<code>lua_call</code>更快一点。我这边只使用了<code>lua_pcall</code>最简单的用法，简单的检查一下返回值。</p>
<p>在函数调用完成后，函数入口和参数都均会出栈，如果调用没出现问题的话，返回值会被依次入栈。当一个函数有多个返回值，它的第一个返回值会首先入栈，因此栈顶是最终的返回值。如果调用出错的话，错误信息会放在栈顶。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">lua_call</span> <span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> nargs<span class="token punctuation">,</span> <span class="token keyword">int</span> nresults<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">lua_pcall</span> <span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> nargs<span class="token punctuation">,</span> <span class="token keyword">int</span> nresults<span class="token punctuation">,</span> <span class="token keyword">int</span> errfunc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>nargs</code>表示函数的参数数目，<code>nresults</code>表示返回值的数目。<code>errfunc</code>是异常处理函数在栈中的位置，如果填写0的话，出错时，<code>lua_pcall</code>会把错误信息直接放在栈顶。<code>lua_pcall</code>的返回值表示是否出错，返回0则表示一切运行正常。</p>
<p>我们例子中的<code>lua_pcall(L, 2, 1, 0)</code>的意思就很明确了：帮忙调用一个函数，它的输入参数有2个，返回值有1个，如果程序出错的话，麻烦把错误信息放栈顶，谢谢。</p>
<p>函数返回值，我们通过<code>lua_toxxx(L, index)</code>来进行获取。该函数会把栈中对应<code>index</code>的值，转换成<code>xxx</code>的类型返回。这里的内存是由lua维护，我们在C中一般不需要释放的。</p>
<p>那么Lua支持哪些类型的数据呢？</p>
<p>建议使用这个参考文档：<a href="https://pgl.yoyo.org/luai/i/_">https://pgl.yoyo.org/luai/i/_</a></p>
<p>入栈<code>lua_pushxxx</code>:</p>
<ul>
<li>lua_pushboolean</li>
<li>lua_pushcclosure</li>
<li>lua_pushcfunction</li>
<li>lua_pushfstring</li>
<li>lua_pushinteger</li>
<li>lua_pushlightuserdata</li>
<li>lua_pushliteral</li>
<li>lua_pushlstring</li>
<li>lua_pushnil</li>
<li>lua_pushnumber</li>
<li>lua_pushstring</li>
<li>lua_pushthread</li>
<li>lua_pushvalue</li>
<li>lua_pushvfstring</li>
</ul>
<p>取值<code>lua_toxxx</code>:</p>
<ul>
<li>lua_toboolean</li>
<li>lua_tocfunction</li>
<li>lua_tointeger</li>
<li>lua_tolstring</li>
<li>lua_tonumber</li>
<li>lua_topointer</li>
<li>lua_tostring</li>
<li>lua_tothread</li>
<li>lua_touserdat</li>
</ul>
<p>这里我碰到了需要传递指针的情况，这里就使用lightuserdata类型。我们可以把它看成<code>void *</code>。</p>
<p>对于更复杂的自定义数据类型，需要使用<code>lua_newuserdata</code>来创建。不过C和Lua交互，能用指针还是用指针吧，这样会方便很多，也符合C程序的特点。</p>
<h2 id="六package-loader">六、Package Loader</h2>
<p>对于一段Lua的程序字符串，我们怎么把它加载进Lua虚拟机并且编译成可以操作的变量和函数呢？Lua提供了若干个函数，可以将数据装载进Lua。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">luaL_loadbuffer</span> <span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">,</span>
                     <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>buff<span class="token punctuation">,</span>
                     size_t sz<span class="token punctuation">,</span>
                     <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">luaL_loadfile</span> <span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">luaL_loadstring</span> <span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这几个函数的功能都是把数据加载进Lua虚拟机，<code>luaL_loadbuffer</code>是加载一段数据，并且给个命名，用于debug等用处。<code>luaL_loadfile</code>是从文件中读取。<code>luaL_loadstring</code>是读取字符串。返回值不为0的话，表示加载出错。这三个函数最终都是调用了<code>lua_load</code>进行代码编译，并将编译后的代码放与栈顶。</p>
<p>上述的函数只是完成程序文本的加载，编译，只有在执行之后才能变成虚拟机中的变量和函数。由于代码已经在栈顶了，我们也没有需要传入的参数。因此只需要随后调用<code>lua_pcall(L, 0, LUA_MULTRET, 0)</code>即可。这里的<code>LUA_MULTRET</code>表示多个返回值。Lua会帮我们自动处理这些返回值。</p>
<p>因此，我们常见的加载Lua代码的逻辑是：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">luaL_loadstring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">lua_pcall</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> LUA_MULTRET<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// load fail or pcall fail</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>Lua中提供了一套简单的函数，和前面的写法等价：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">luaL_dofile</span> <span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">luaL_dostring</span> <span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>所以在最开始的例子中，使用了<code>luaL_dostring</code>这个函数。</p>
<p>在Lua程序中，我们使用<code>require</code>关键字去加载模块，在写入<code>local my_module = require("my_module")</code>之后，Lua会从<code>package.path</code>和<code>package.cpath</code>依次去查找。</p>
<p>但是存在这么一种情况。我们的产品中，有许多的Lua模块，这些模块一起被打包和加密，只能通过特定接口去获取对应的数据，而且为了安全，数据必须在内存中，不能写入文件。这种情况下，Lua的默认行为就不能很好的加载我们的这些模块，这时候该怎么办？</p>
<p>这里就用到了Package Loader。Lua支持注册我们自己的包加载器。在Lua中，包的加载并不是严格的去根据文件名去查找，而是将包名传递给package loaders，让他们自行处理。Lua中可以有多种package loaders，在<code>require</code>时会依次调用<code>package.loaders</code>中的loader去加载，如果都没有加载成功，才会报错。</p>
<p>这样我们就可以注册一个自己的package loader，完成自定义的模块数据的加载。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">my_package_loader</span><span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>required_module_name <span class="token operator">=</span> <span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string data <span class="token operator">=</span> <span class="token function">user_defined_load</span><span class="token punctuation">(</span>required_module_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">luaL_loadbuffer</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> required_module_name<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"error load: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lua_tostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token function">lua_pop</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    lua_State <span class="token operator">*</span>L <span class="token operator">=</span> <span class="token function">luaL_newstate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">luaL_openlibs</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 要装载系统库，比如math、table等。</span>
    <span class="token function">lua_register</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"my_loader"</span><span class="token punctuation">,</span> my_package_loader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">luaL_dostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token string">"table.insert(package.loaders, 2, my_loader)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// do whatever you enjoy</span>

    <span class="token function">lua_close</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里，我们在C/C++程序中，编写了package loader，lua中对loader的定义就是<code>int xxx(lua_State *L)</code>。之后我们使用<code>lua_register</code>，该函数可以将C函数注册为Lua的函数。之后，通过<code>"table.insert(package.loaders, 2, my_loader)</code>语句，将自定义的<code>my_loader</code>插入进<code>package.loaders</code>数组中。这样就完成的loader的注册了。由此，我们就可以封装数据读取的接口<code>user_defined_load</code>，从而完成内存中的Lua package的加载了。</p>
<h2 id="七沙盒环境">七、沙盒环境</h2>
<p>我们有很多时候，希望用户可以编写自己的插件，以增强软件的功能。比如VS Code就支持自己编写插件。但是这个插件，我们又需要较为严格的权限管理。比如，不能访问本地文件，删除文件等等。那么有什么比较合适的办法呢？</p>
<p>其实十分简单，Lua的全局函数都是存放在<code>_G</code>这个表里面的。由于虚拟机是由程序创建和提供的，我们只需要在虚拟机创建的时候，手动的禁用掉一些函数就可以了。</p>
<p>比如：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sandbox_env <span class="token operator">=</span> <span class="token string">"_G.os.execute = nil\n"</span>
                                 <span class="token string">"_G.os.exit = nil\n"</span>
                                 <span class="token string">"_G.os.remove = nil\n"</span>
                                 <span class="token string">"_G.os.rename = nil\n"</span>
                                 <span class="token string">"_G.io = nil\n"</span>
                                 <span class="token string">"_G.debug = nil\n"</span><span class="token punctuation">;</span>

<span class="token function">LuaL_dostring</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> sandbox_env<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样就可以禁用掉<code>execute</code>、<code>exit</code>等函数了。所以针对你期望的沙盒环境，可以选择性的开放相关的函数即可。</p>
<p>如果出现不存在<code>_G</code>或者<code>require</code>的错误，可能是没有启用Lua的对应的模块，使用<code>void luaL_openlibs (lua_State *L);</code>可以打开所有的标准库。</p>
<p>当然，我们还可以定制化的打开，参考 <a href="https://www.bookstack.cn/read/lua-5.3/6.md">LUA标准库</a>：</p>
<blockquote>
<p>要使用这些（Lua所有的标准）库，<code>C</code> 的宿主程序需要先调用一下 <code>luaL_openlibs</code> 这个函数，这样就能打开所有的标准库。或者宿主程序也可以用<code>luaL_requiref</code> 分别打开这些库：<code>luaopen_base</code> （基础库），<code>luaopen_package</code> （包管理库），<code>luaopen_coroutine</code> （协程库），<code>luaopen_string</code> （字符串库），<code>luaopen_utf8</code> （UTF8 库），<code>luaopen_table</code> （表处理库），<code>luaopen_math</code> （数学库），<code>luaopen_io</code> （I/O 库），<code>luaopen_os</code> （操作系统库），<code>luaopen_debug</code> （调试库）。这些函数都定义在 <code>lualib.h</code> 中。</p>
</blockquote>
<h2 id="八结束语">八、结束语</h2>
<p>至此，我们学习完了C调用Lua的相关知识，相信对于常见的功能需求都可以很好的满足了，针对个别的特殊的功能，还需要通过文档等进行学习。有时间，我会再整理一篇Lua调用C的文章。</p>
<p><strong>转载</strong>请注明出处。</p>
]]></content>
      <categories>
        <category>C++</category>
        <category>Lua</category>
      </categories>
  </entry>
  <entry>
    <title>应用OpenMP的一个简单的设计模式</title>
    <url>/2016/11/15/openmp-tutorial/</url>
    <content><![CDATA[<blockquote>
<p>小喵的唠叨话：最近很久没写博客了，一是因为之前写的LSoftmax后馈一直没有成功，所以在等作者的源码。二是最近没什么想写的东西。前两天，在预处理图片的时候，发现处理200w张图片，跑了一晚上也才处理完一半。早上的时候，出于无奈，花半小时改写了一个简单调用OpenMP的处理程序，用了30个核心，然后一小时不到就处理完了。感慨在多核的时代，即使是简单的程序，如果能支持多核，应该都能节省不少时间。</p>
</blockquote>
<span id="more"></span>
<h2 id="一写在前面">一、写在前面</h2>
<p>对于OpenMP，小喵其实并不是了解很多，而且小喵本身也只用到了OpenMP的最简单的功能。在这里主要是分享一个自己常用的写简单的并行程序的思路。希望能帮助到大家。</p>
<p>这个设计模式的主要特点如下：</p>
<ol type="1">
<li>处理的任务是独立的；</li>
<li>可以在运行中输出结果，而不是最终才输出；</li>
<li>有限的资源占用；</li>
<li>在每次任务的执行时间不同的情况下，也能很好的工作；</li>
<li>在每次任务执行需要占用私有的数据时（依赖了线程不安全的库），也可以很好的工作；</li>
<li>输出是有序的</li>
</ol>
<p>注意：本文中仅介绍小喵自己用到的几个OpenMP的功能。既不深入也不完善。仅适合初学者。 小喵学习OpenMP主要是看了周明伟的博客： <a href="http://blog.csdn.net/drzhouweiming/article/details/4093624">OpenMP编程指南</a>。想要比较深入地学习的童鞋请看周老师的博客。对于什么是OpenMP，OpenMP有什么优点等的问题。周老师的博客也很详细的说明。这里小喵就不多废话了。直奔主题。</p>
<h2 id="二如何使用openmp">二、如何使用OpenMP</h2>
<p>小喵使用的开发环境是Linux，windows的童鞋可以看一下这个博客：<a href="http://www.cnblogs.com/yangyangcv/archive/2012/03/23/2413335.html">http://www.cnblogs.com/yangyangcv/archive/2012/03/23/2413335.html</a>。MAC上的GCC实际上是Clang，想要使用OpenMP的话比较麻烦。要额外装一些东东，自己bing一下就有。</p>
<p>本喵的编译环境是CentOS 7， GCC 4.8.5。大多数系统和编译器都支持OpenMP了。</p>
<p>先举个小栗子： 不使用OpenMP：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">100000000</span></span></span>

<span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        a <span class="token operator">+=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"finish"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>之后使用g++编译，并计时：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ sample_without_omp.cpp <span class="token parameter variable">-o</span> sample_without_omp.bin
<span class="token function">time</span> ./sample_with_omp.bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>运行结果：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">./sample_without_omp.bin  24.42s user 0.00s system 100% cpu 24.417 total<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里可以看到用了100%的cpu，总时间是24.417 s。</p>
<p>使用OpenMP，调用2个线程：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">100000000</span></span></span>

<span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        a <span class="token operator">+=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">num_threads</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">schedule</span><span class="token punctuation">(</span>dynamic<span class="token punctuation">)</span></span></span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"finish"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里源码的差别是多了一个omp.h的头文件，和一个奇怪的语句： <code>#pragma omp parallel for num_threads(2) schedule(dynamic)</code></p>
<p>编译的时候，也有点小修改：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ sample_with_omp.cpp <span class="token parameter variable">-o</span> sample_with_omp.bin <span class="token parameter variable">-fopenmp</span>
<span class="token function">time</span> ./sample_with_omp.bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">./sample_with_omp.bin  24.32s user 0.01s system 199% cpu 12.182 total<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以看出，user的时间几乎没变，这表示CPU总的运行时间没有变化。但是cpu的使用变成了199%，total的时间变成了12.182 s。这就表明了我们使用了2个cpu，使得运行时间成功减半了！是不是很愉快，我们只添加了1行代码，就使得程序的速度翻倍。可见OpenMP是多么的简洁实用。</p>
<p>那么，现在是不是不用小喵说，我们也知道怎么给程序加入OpenMP的支持了呢？</p>
<p>归纳一下，主要有三点：</p>
<ol type="1">
<li>加入OpenMP的头文件 <code>omp.h</code></li>
<li>使用合适的 <code>编译器指令</code> 修饰我们需要并行的部分（线程数、任务分配模式等等，后面会讲到）</li>
<li>编译的时候加入 <code>openmp</code> 的支持，编译的时候加入参数 <code>-fopenmp</code></li>
</ol>
<h2 id="三forkjoin的并行执行模式">三、fork/join的并行执行模式</h2>
<p>我们之前看到了一个简单的例子，可以看出，程序其实是有串行部分和并行部分两个部分组成的。</p>
<p>在程序刚启动的时候，只有一个主线程，当执行到并行部分的时候（上面的例子中就是pragma之后的for循环），并行的代码会通过派生其他线程来执行。只有当并行的所有代码执行完之后，才会继续执行串行的部分。</p>
<p>因此主要的运行流程是这个样子的：</p>
<p><img src="openmp-pipeline.svg" alt="openmp pipeline" /></p>
<p>理解这个流程是相当重要的，可以避免很多的不必要的错误。一个常见的错误就是资源访问的冲突。比如文件，流对象等，如果<strong>在并行的代码部分随意访问这些资源，就可能会导致不可预见的错误</strong>。这在多线程编程中也是最常出现的错误，我们在下面会具体说到。</p>
<h2 id="四openmp的常用指令和库函数">四、OpenMP的常用指令和库函数</h2>
<p>在C/C++中，OpenMP的指令使用的格式如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp 指令 <span class="token punctuation">[</span>子句 <span class="token punctuation">[</span>子句<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>指令用来指示下面的代码的运行模式。子句是给出一些额外的信息。</p>
<p>这里主要介绍两个指令：<code>parallel</code>，<code>for</code></p>
<ul>
<li><code>parallel</code>：用在代码段之前，表示下面的代码段使用多线程运行。</li>
<li><code>for</code>：用于 <code>for</code> 循环之前，将循环分配到多个线程中并行执行，必须保证每次循环之间无相关性。</li>
<li><code>parallel for</code>：<code>parallel</code> 和 <code>for</code> 语句的结合，也是用在一个 <code>for</code> 循环之前，表示 <code>for</code> 循环的代码将被多个线程并行执行。</li>
</ul>
<p>小喵使用的时候都是直接使用了 <code>parallel for</code> 这个组合指令。用来对紧接着的 <code>for</code> 循环的代码段进行并行。其他的指令请查阅之前提到的博客。</p>
<p>子句中主要是给出一些额外的设置，这里也主要介绍2个：<code>num_threads</code>，<code>schedule</code>。</p>
<ul>
<li>num_threads：指定线程的数目（不设置该参数似乎会使用和cpu核心数相同的线程数）。</li>
<li>schedule：指定如何调度for循环迭代。有4种模式：<code>static</code>、<code>dynamic</code>、<code>guided</code>、·，后面会专门讲到。</li>
</ul>
<p>这里，我们再回顾一下之前写的代码：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">num_threads</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">schedule</span><span class="token punctuation">(</span>dynamic<span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>是不是豁然开朗。这句话的意思是，使用OpenMP（<code>#pragma omp</code>），将下面的 <code>for</code> 循环使用多线程去执行（<code>parallel for</code>），线程数为2（<code>num_threads(2)</code>），任务调度方式使用 <code>dynamic</code> 模式（<code>schedule(dynamic)</code>）。 现在，让我们趁热打铁，学习for循环的写法。</p>
<p>这里，小喵直接复制了周老师的说法（解释得实在太好了）：</p>
<pre>
for 循环语句中，书写是需要按照一定规范来写才可以的，即for循环小括号内的语句要按照一定的规范进行书写，for语句小括号里共有三条语句
for( i = start; i < end; i++)

i = start; 是for循环里的第一条语句，必须写成 “变量＝初值” 的方式。如 i＝0
i < end; 是for循环里的第二条语句，这个语句里可以写成以下4种形式之一：
变量 < 边界值
变量 <= 边界值
变量 > 边界值
变量 >= 边界值
如 i>10 i<10 i>=10 i<=10 等等
最后一条语句i++可以有以下9种写法之一
i++
++i
i–
–i
i += inc
i -= inc
i = i + inc
i = inc + i
i = i – inc
例如i += 2; i -= 2；i = i + 2；i = i – 2；都是符合规范的写法。</pre>
<p>可见一般来说，我们的for循环的写法OpenMP是支持的。那么有没有OpenMP不支持的for循环呢？小喵没试过，不过可以猜想，<code>for (auto &amp;v: arr)</code> 这种写法是不支持的。使用迭代器的话，不知道能不能使用，小喵没有验证过。喵粉如果好奇的话，可以自行验证一下。</p>
<p>在介绍schedule之前，我们先学习几个常用的库函数，用来获取和设置OpenMP的各种运行时状态： - <code>omp_get_num_procs</code>, 返回运行本线程的多处理机的处理器个数。通常可以根据处理器的个数来合理设置并行的线程数。 - <code>omp_get_num_threads</code>, 返回当前并行区域中的活动线程个数。比如上面的例子，应该就会返回2。 - <code>omp_get_thread_num</code>, 返回线程号。并行区域的代码会被多个线程执行，而每个线程都有一个自己的ID，也就是线程号。如果我们设置使用N个线程，那么线程号会是0，1，2，...，N-1。 - <code>omp_set_num_threads</code>**`, 设置并行执行代码时的线程个数。和num_threads功能相同。</p>
<h2 id="五openmp中的任务调度">五、OpenMP中的任务调度</h2>
<p>那么接下来，我们开始学习任务调度的四种模式。使用的子句就是schedule。schedule的使用格式：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">schedule</span><span class="token punctuation">(</span>type<span class="token punctuation">[</span><span class="token punctuation">,</span> size<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>type主要有4种：<code>static</code>，<code>dynamic</code>，<code>guilded</code>，<code>runtime</code>。</p>
<h3 id="static静态调度">1、static（静态调度）</h3>
<p>表示静态调度，当不设置schedule的时候，多数编译器就是使用这种调度方式。它十分的简单。给定N个任务，启用t个线程，那么直接给每个线程分配N/t个任务，考虑到N可能不能整除t，所以每个线程的任务数会有极小的不同。</p>
<p>下面举个例子：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">const</span> <span class="token keyword">int</span> task_num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">num_threads</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">)</span></span></span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> task_num<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"i = "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" thread_id = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果如下：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">i = 0 thread_id = 0
i = 5 thread_id = 1
i = 6 thread_id = 1
i = 7 thread_id = 1
i = 8 thread_id = 1
i = 9 thread_id = 1
i = 1 thread_id = 0
i = 2 thread_id = 0
i = 3 thread_id = 0
i = 4 thread_id = 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出，0-4被分配给了0线程，5-9被分配给了1线程。由于是多线程，所以打印出来的顺序并不能保证。如果使用了<code>size</code>，则每次回分配给一个线程size次任务，依次迭代。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">const</span> <span class="token keyword">int</span> task_num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">num_threads</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> task_num<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"i = "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" thread_id = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>```

运行结果和上面稍有不同：

```text
i <span class="token operator">=</span> <span class="token number">2</span> thread_id <span class="token operator">=</span> <span class="token number">1</span>
i <span class="token operator">=</span> <span class="token number">0</span> thread_id <span class="token operator">=</span> <span class="token number">0</span>
i <span class="token operator">=</span> <span class="token number">3</span> thread_id <span class="token operator">=</span> <span class="token number">1</span>
i <span class="token operator">=</span> <span class="token number">6</span> thread_id <span class="token operator">=</span> <span class="token number">1</span>
i <span class="token operator">=</span> <span class="token number">7</span> thread_id <span class="token operator">=</span> <span class="token number">1</span>
i <span class="token operator">=</span> <span class="token number">1</span> thread_id <span class="token operator">=</span> <span class="token number">0</span>
i <span class="token operator">=</span> <span class="token number">4</span> thread_id <span class="token operator">=</span> <span class="token number">0</span>
i <span class="token operator">=</span> <span class="token number">5</span> thread_id <span class="token operator">=</span> <span class="token number">0</span>
i <span class="token operator">=</span> <span class="token number">8</span> thread_id <span class="token operator">=</span> <span class="token number">0</span>
i <span class="token operator">=</span> <span class="token number">9</span> thread_id <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出，连续的2个任务会被分配到同一个线程。0、1给线程0，2、3给线程1，4、5给线程0，6、7给线程1 ……</p>
<p><code>static</code> 是一个十分简单的策略，但同时会带来一些问题。比如当任务的执行时间差异很大的时候，由于OpenMP的 <code>fork/join</code> 的机制，速度快的线程必须等待速度慢的线程，如果恰好分配的很不合理的话（耗时的任务集中在了某一个线程），其他的线程可能会等待较长的时间。这显然不利于我们充分利用多核资源。</p>
<h3 id="dynamic动态调度">2、dynamic（动态调度）</h3>
<p>动态调度会根据运行时的线程状态来决定下一次的迭代。当一个线程执行完自己的任务之后，会再去领取任务。不设置 <code>size</code> 的话，一个线程一次会分配一个任务，当执行完了，会再领取一个任务。如果设置了 <code>size</code> ，线程则一次领取 <code>size</code> 个任务。 <code>dynamic</code> 是小喵最爱的模式！是因为它和标准的生产者消费者模式很相似。这里生产者默认一次性生产所有的任务，然后每个线程都是一个消费者，当自己执行完了，会再次去领取任务。这样，任务的分配会更加的有弹性，更好的适应了任务时间不同的情况。</p>
<p>下面也是一个小栗子，不使用<code>size</code>：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">const</span> <span class="token keyword">int</span> task_num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">num_threads</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">schedule</span><span class="token punctuation">(</span>dynamic<span class="token punctuation">)</span></span></span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> task_num<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"i = "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" thread_id = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">i = 0 thread_id = 0
i = 1 thread_id = 1
i = 2 thread_id = 0
i = 3 thread_id = 0
i = 4 thread_id = 1
i = 5 thread_id = 1
i = 6 thread_id = 1
i = 7 thread_id = 1
i = 8 thread_id = 1
i = 9 thread_id = 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出任务的分配是不均匀的。</p>
<p>使用<code>size</code>之后：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">const</span> <span class="token keyword">int</span> task_num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">num_threads</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">schedule</span><span class="token punctuation">(</span>dynamic<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span></span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> task_num<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"i = "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" thread_id = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>运行结果如下：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">i = 0 thread_id = 0
i = 2 thread_id = 1
i = 3 thread_id = 1
i = 4 thread_id = 1
i = 5 thread_id = 1
i = 6 thread_id = 1
i = 7 thread_id = 1
i = 8 thread_id = 1
i = 9 thread_id = 1
i = 1 thread_id = 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>线程0先领取了任务0、1。线程1领取了2、3。线程1做完之后，又领取了4、5 ……</p>
<p>可以看出，每次的任务分配是以2个为单位的，分配的顺序视运行时状态动态调整。</p>
<h3 id="guided启发式调度">3、guided（启发式调度）</h3>
<p>采用启发式调度方法进行调度，每次分配给线程迭代次数不同，开始比较大，以后逐渐减小。 size表示每次分配的迭代次数的最小值，由于每次分配的迭代次数会逐渐减少，少到size时，将不再减少。如果不知道size的大小，那么默认size为1，即一直减少到1。具体采用哪一种启发式算法，需要参考具体的编译器和相关手册的信息。</p>
<h3 id="runtime">4、runtime</h3>
<p>runtime调用，并不是一个真的调度方式。它是根据环境变量的OMP_SCHEDULE来确定调度模式。最终仍然是上述三种方式之一。具体用法可以查看相关文档。</p>
<h2 id="六一个常用的设计模式">六、一个常用的设计模式</h2>
<p>在做了前5个部分的铺垫之后，相信喵粉们已经初步掌握了OpenMP的几个基本的知识。那么，现在就开始讲我们最重要的部分——小喵最常用的一个设计模式。 主要流程如下：</p>
<ol type="1">
<li>初始化
<ol type="1">
<li>定义线程数为<code>thread_num</code></li>
<li>定义平均每个线程上的任务数为<code>task_per_thread</code></li>
<li>初始化处理器对象（<code>handle_arr</code>）,大小为<code>thread_num</code></li>
<li>初始化任务空间（<code>task_arr</code>），大小为 <code>thread_num * task_per_thread</code></li>
<li>初始化结果空间（<code>result_arr</code>），大小为 <code>thread_num * task_per_thread</code></li>
</ol></li>
<li>读取任务（串行）
<ol type="1">
<li>读取 <code>thread_num * task_per_thread</code> 个任务，存入 <code>task_arr</code></li>
<li>记录读取任务的数目 <code>task_num (task_num &lt;= thread_num * task_per_thread)</code></li>
</ol></li>
<li>任务处理（并行）
<ol type="1">
<li>任务的 <code>task_id</code> 就是for循环的下标</li>
<li>通过 <code>omp_get_thread_num</code> 获取当前的线程id，根据线程id查找处理器对象。</li>
<li>使用处理器处理定义的 <code>task_id</code> 对应的任务 <code>task_arr[task_id]</code></li>
<li>将执行结果存入 <code>result_arr[task_id]</code> 的位置</li>
</ol></li>
<li>结果处理（串行）
<ol type="1">
<li>根据 <code>task_num</code>，处理完 <code>result_arr</code> 中的结果。</li>
</ol></li>
<li>程序状态判断
<ol type="1">
<li>判断 <code>task_num</code> 是否等于 <code>thread_num * task_per_thread</code>。
<ul>
<li>如果相等，说明任务队列没有执行完，继续 <code>&lt;2&gt;</code> 开始执行。</li>
<li>如果不相等，则说明任务队列全部处理完，程序执行结束 <code>&lt;6&gt;</code>。</li>
</ul></li>
</ol></li>
<li>enjoy your programming</li>
</ol>
<p>让我们来一步一步的理解这个模式。</p>
<h3 id="初始化">&lt;1&gt;初始化</h3>
<p>这里主要完成一些初始化的工作。</p>
<h4 id="thread_num-和-task_per_thread">1. <code>thread_num</code> 和 <code>task_per_thread</code></h4>
<p>可以看到，这里初始化了两个参数。那么为什么需要 <code>thread_num</code> 和 <code>task_per_thread</code> 这两个参数呢？</p>
<p>为了更好的利用和控制资源。</p>
<p>根据机器的不同，我们可以自己设置需要开启的线程数，这就是 <code>thread_num</code>。</p>
<blockquote>
<p>反派汪：我觉得你说的有问题。我们在程序中明明可以利用omp_get_num_procs获取机器的所有的处理器的数目，然后就启用这么多的线程的话，不就能最大限度的使用所有的计算能力了吗？</p>
<p>喵座：其实不然。假如服务器的处理器数目为40，按照你的思路，则会启用40个线程。这样一是会造成其他人不能正常的工作，二是当服务器本来就有其他的程序在run的时候，你的40个线程亦不能很好的工作。不如自己在运行之前设置一下需要的计算资源数，会更方便一点。</p>
</blockquote>
<p>那么为什么我们需要设置这个 <code>task_per_thread</code> 呢？</p>
<p>因为资源是有限的。</p>
<p>考虑到最高效的工作方式，就是让所有的线程不间断的工作。比如一次性读完所有的任务列表，然后使用 <code>dynamic</code> 做完所有的任务。这样在任务做完之前，每个线程都会无间歇的工作。</p>
<p>理想是完美的，现实是残酷的。如果任务非常多，比如小喵需要处理的200w条数据。很难一次性全部载入内存。而且，即使这么做了，也必须得任务全部做完，才能得到运行结果，时效性很差。</p>
<p>那么我们不设置 <code>thask_per_thread</code> 不行吗？或者就把这个设置成1。每次就读取线程数相同的任务数，这样代码编写不应该更简单吗？</p>
<p>这时候，让我们回顾一下OpenMP的调度机制。如果每次只读取 <code>thread_num</code> 这么多的个任务数，那么每次并行计算的时候，每个线程都会分配到一个任务。那么总的耗时将变成最慢的任务的执行时间。</p>
<p>举个简单的例子，比如有12个任务，耗时为2，1，2，1，2，1，2，1，2，1，2，1。我们使用2个线程。那么每处理2个任务，耗时都是2。总时间是12。</p>
<p>如果我们每6个一起执行，也是使用2个线程。需要的总时间会变成了10。执行过程看下图：</p>
<p><img src="task-queue.svg" alt="任务队列" /></p>
<p>可以使用 <code>task_per_task</code> 这个策略，每次处理 <code>thread_num * task_per_task</code> 个任务的话，可以更好了利用多核的资源。（<code>task_per_task</code>设得越大，讲道理效果应该越好。小喵自己喜欢设成10或20）</p>
<p>另一个好处是，当我们处理完这些任务之后，可以立刻将结果写入结果文件。</p>
<h4 id="处理器对象">2. 处理器对象</h4>
<p>这是可选的。我们在实际处理任务的时候，有时候会使用到一些特殊的资源，而且必须保证这些资源是独占的（比如网络通信的套接字，文件对象，或是线程不安全的一些实例的对象）。最简单高效的方法就是为每个线程都初始化一个自己的处理器（或是资源）对象。这样在实际处理的时候，每个线程可以根据自己的线程id找到自己的处理器，从而避免了多线程中的各种问题。</p>
<h4 id="task_arr-和-result_arr">3. <code>task_arr</code> 和 <code>result_arr</code></h4>
<p>这两个空间是用来存放每次并行处理的任务和结果的。大小自然和每次并行的任务数（<code>thread_num * task_per_thread</code>）相等。考虑到每次并行都可以复用这些空间，所以提前申请好足够的空间可以提高运行效率。</p>
<h3 id="读取任务">&lt;2&gt;读取任务</h3>
<p>我们通常会将任务的内容保存在文件中。而文件的读取是不能并行的。因此我们需要提前按串行的方式将任务读取到任务队列 <code>task_arr</code> 中。每次读取 <code>thread_num * task_per_thread</code> 个。考虑到任务总数可能不是 <code>thread_num * task_per_thread</code> 的整数倍，因此最后一次读取的任务数会稍小一点。我们将每次读取的任务数记录下来，命名为 <code>task_num</code>。</p>
<h3 id="任务处理">&lt;3&gt;任务处理</h3>
<p>这里就是我们刚刚学习到的OpenMP的用武之地。</p>
<p>通常的写法是：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">num_threads</span><span class="token punctuation">(</span>thread_num<span class="token punctuation">)</span> <span class="token function">schedule</span><span class="token punctuation">(</span>dynamic<span class="token punctuation">)</span></span></span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> task_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> task_idx <span class="token operator">&lt;</span> task_num<span class="token punctuation">;</span> <span class="token operator">++</span> task_idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> thread_id <span class="token operator">=</span> <span class="token function">omp_get_thread_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// 获取当前的线程id</span>
    handle_type handle <span class="token operator">=</span> handle_arr<span class="token punctuation">[</span>thread_id<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// 根据线程id，获取处理器</span>
    result_type result <span class="token operator">=</span> handle<span class="token operator">-></span><span class="token function">process</span><span class="token punctuation">(</span>task_arr<span class="token punctuation">[</span>task_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 处理指定的任务</span>
    result_arr<span class="token punctuation">[</span>task_idx<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">;</span>                             <span class="token comment">// 在指定位置写回执行的结果</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>获取当前的线程号，然后获取处理器，然后处理对应的任务，并将结果存放进对应的位置。</p>
<p>注意，线程之间是独立的，不能读写同一个线程不安全的资源。而且在并行区域不保证任何的线程间的顺序。</p>
<p>这样，我们就能安全且高效的执行完每次的任务了。</p>
<h3 id="结果处理">&lt;4&gt;结果处理</h3>
<p>这部分十分简单，因为任务的结果已经按顺序存进了 <code>result_arr</code> 中，有效的 <code>result</code> 是前 <code>task_num</code> 个，之后想怎么处理都是喵粉自己的事情了。</p>
<h3 id="程序状态判断">&lt;5&gt;程序状态判断</h3>
<p>正如我们在 <code>&lt;2&gt;</code> 中说到的，我们每次处理一批任务，最后的一批任务的个数将不是 <code>thread_num * task_per_thread</code> 这么多。因此需要与 <code>task_num</code> 比较一下。如果相等，就可能是我们还没有处理完，回到 <code>&lt;2&gt;</code> 继续执行。如果不相等，那就说明我们处理完了所有的任务了！你可以坐下来喝杯caffe，然后enjoy多线程带来的快感了。</p>
<p>最后，附上一个简单的demo。使用多线程，从文本上读取图片的list，读取图片的大小，并将结果存入一个新的文本中。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/opencv.hpp></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> width<span class="token punctuation">;</span>
    <span class="token keyword">int</span> height<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> Size<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"usage: get_size.bin input_list output_list"</span>
            <span class="token string">" [thread_num] [task_per_thread]"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> thread_num <span class="token operator">=</span> <span class="token punctuation">(</span>argc <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> task_per_thread <span class="token operator">=</span> <span class="token punctuation">(</span>argc <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token keyword">int</span> total_task <span class="token operator">=</span> thread_num <span class="token operator">*</span> task_per_thread<span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>string image_name_arr<span class="token punctuation">[</span>total_task<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// task arr</span>
    Size image_size_arr<span class="token punctuation">[</span>total_task<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">// result arr</span>

    std<span class="token double-colon punctuation">::</span>ifstream <span class="token function">is</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>ofstream <span class="token function">os</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token comment">// 读取任务</span>
        <span class="token keyword">int</span> task_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> task_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> task_idx <span class="token operator">&lt;</span> total_task<span class="token punctuation">;</span> <span class="token operator">++</span> task_idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>is <span class="token operator">>></span> image_name_arr<span class="token punctuation">[</span>task_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token operator">++</span> task_num<span class="token punctuation">;</span>
            <span class="token operator">++</span> count<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 处理任务</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span> <span class="token function">num_threads</span><span class="token punctuation">(</span>thread_num<span class="token punctuation">)</span> <span class="token function">schedule</span><span class="token punctuation">(</span>dynamic<span class="token punctuation">)</span></span></span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> task_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> task_idx <span class="token operator">&lt;</span> task_num<span class="token punctuation">;</span> <span class="token operator">++</span> task_idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            cv<span class="token double-colon punctuation">::</span>Mat image <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">imread</span><span class="token punctuation">(</span>image_name_arr<span class="token punctuation">[</span>task_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            image_size_arr<span class="token punctuation">[</span>task_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>width <span class="token operator">=</span> image<span class="token punctuation">.</span>cols<span class="token punctuation">;</span>
            image_size_arr<span class="token punctuation">[</span>task_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>height <span class="token operator">=</span> image<span class="token punctuation">.</span>rows<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"process #"</span> <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

        <span class="token comment">// 处理结果</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> task_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> task_idx <span class="token operator">&lt;</span> task_num<span class="token punctuation">;</span> <span class="token operator">++</span> task_idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            os <span class="token operator">&lt;&lt;</span> image_name_arr<span class="token punctuation">[</span>task_idx<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>
                <span class="token operator">&lt;&lt;</span> image_size_arr<span class="token punctuation">[</span>task_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>width <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>
                <span class="token operator">&lt;&lt;</span> image_size_arr<span class="token punctuation">[</span>task_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>height <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 状态判断</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>task_num <span class="token operator">!=</span> total_task<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译和执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ get_image_size_with_omp.cpp <span class="token parameter variable">-o</span> get_image_size_with_omp <span class="token parameter variable">-fopenmp</span> -I/path/to/opencv/include -L/path/to/opencv/lib <span class="token parameter variable">-lopencv_core</span> <span class="token parameter variable">-lopencv_highgui</span>
./get_image_size_with_omp /path/to/image_list /path/to/save/result <span class="token number">2</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>怎么样，使用这种模式来实现简单的多线程程序是不是很简单？</p>
<p><strong>转载请注明出处~</strong></p>
]]></content>
      <categories>
        <category>C++</category>
        <category>OpenMP</category>
      </categories>
  </entry>
  <entry>
    <title>三、Redis基本操作——List</title>
    <url>/2016/06/11/redis-list/</url>
    <content><![CDATA[<blockquote>
<p>小喵的唠叨话：前面我们介绍了Redis的string的数据结构的原理和操作。当时我们提到Redis的键值对不仅仅是字符串。而这次我们就要介绍Redis的第二个数据结构了，List（链表）。由于List在原理上的实现并不是特别的复杂，我们在这里将原理和具体的命令都放在一起介绍。</p>
</blockquote>
<span id="more"></span>
<h2 id="redis-list-原理">Redis List 原理</h2>
<p>学习过数据结构的同学，一定对链表（Linked List）十分的熟悉。相信我们自己也曾经使用过这种数据结构。</p>
<p>链表分为很多种：单向链表，双向链表，循环链表，块状链表等等。</p>
<p>链表的作用也有很多。首先，链表可以存放数据。其次链表可以模拟队列、堆栈等其他的数据结构。</p>
<p>链表的实现也有多种，以C语言为例，最常见的是构造节点node，node中又有指针，用于指向下一个node，这样就构成了单向链表，如果node中有两个指针，分别指向前一个和后一个node，则构造了双向链表，再如果链表是首尾相连的，那么就是循环链表。链表的具体算法，是数据结构里面的内容，我们这里就不专门介绍啦。</p>
<p>那么，Redis内部的List是什么样子的链表呢？又是怎么来维护的呢？</p>
<p>我们慢慢的剖析。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// 前置节点</span>
    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span>

    <span class="token comment">// 后置节点</span>
    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>

    <span class="token comment">// 节点的值</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> listNode<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述就是Redis的节点的定义。</p>
<p>可以看出，这是一个双向的链表。比较有意思的是，节点内存的值，是一个void *的指针，这就说明节点内部可以存放任何的内容。</p>
<div style="background-color:#ddd; padding: 20px">
<p>反派汪：我不能理解为什么value是void <em>的指针就能存任何内容？我甚至不知道为什么还有要void </em>这么奇怪的数据类型。<br/> 喵太：其实很多人也有这个疑问。不过先问问你自己，指针到底是什么？int <em>，float </em>和char <em>的这几种指针有什么区别？<br/> 反派汪：指针里面存的就是地址，通过地址就能访问到指定的内存。以int </em>指针为例，int <em>说明，指针指向的是一个由int型的数据组成的内存。通过指针运算符</em>，我们就能取到对应位置的内存中的值。通过对指针的+和-，我们就能移动到相邻的位置。<br/> 喵太：嗯，说的不错，但是你只说对了一半。指针里面存放的是地址，无论任何类型的指针，里面存放的都只是一个32位的无符号整数。指针的类型，其实只是决定了对内存进行的操作。int <em>的指针，每次加1的时候，其实移动了4个字节，char </em>则移动1个。使用指针运算符<em>其实也是一样。int </em>会得到连续4个字节的内容，并且存进一个int变量里面，而char <em>则会得到一个字节的内容，并存进一个char里面。因此，任何类型的指针其实本质上是一样的。<br/> 反派汪：那你的意思是，所有类型的指针都是一样的了。那么我还是不能理解void </em>的指针究竟能做什么。<br/> 喵太：void <em>的指针是C语言中最简单的一种指针，它存放的是一个地址，并且没有给出任何操作上的提示。但是任何类型的指针都能赋给void </em>的指针。void <em>的指针也能强制转换成任何类型的指针。这里使用void </em>的指针，只是在说明，value对应的是一块内存。开发者，可以自行转换指针的类型，来做相应的操作。如果你熟悉C语言的话，malloc函数的返回值也是一个void <em>的指针，而我们通常会把它强制转换成我们需要的任何数据类型。<br/> 反派汪：这样啊，那原则上这里的指针用什么类型的都是可以的了？反正就是一个地址而已。只是void </em>更纯粹一点，也最符合要求，毕竟它只是指向数据的地址，没有做任何的限制。<br/> 喵太：孺狗可教也。</p>
</div>
<p>现在，我们有了listNode这个节点的数据结构，就可以构造我们的链表了。</p>
<p><img src="redis-list.jpg" alt="list" /></p>
<center>
图一 链表的结构
</center>
<p>依照上图的示意图，我们就可以使用listNode构造一个双向链表了。</p>
<p>Redis中，为了更好地管理链表，定义了一个list的数据结构，作为链表的封装。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">list</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// 头节点</span>
    listNode <span class="token operator">*</span>head<span class="token punctuation">;</span>

    <span class="token comment">// 尾节点</span>
    listNode <span class="token operator">*</span>tail<span class="token punctuation">;</span>

    <span class="token comment">// 链表中的节点数</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">;</span>

    <span class="token comment">// 节点值复制函数</span>
    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>dup<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 节点值释放函数</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>free<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 节点值对比函数</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>match<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> list<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>list结构记录了链表的头指针，尾指针，链表的节点数。dup，free和match三个成员则表示对节点的值进行复制，释放和比较的函数。由于这里的节点的value的内容是任意的，复制和释放并不一定能用类似于memcpy和free的函数来处理（不太理解的话，可以google一下浅拷贝和深拷贝）。</p>
<p>因此，我们得到的最终的链表结构是这个样子的：</p>
<p><img src="redis-list2.jpg" alt="list" /></p>
<center>
图二 链表的结构
</center>
<p>Redis的链表的实现的主要特性如下：</p>
<ol type="1">
<li>双端：链表节点都有prev和next指针，这样获取一个节点的前置节点和后置节点的算法复杂度都为O(1)。</li>
<li>无环：list的第一个节点（头节点）的prev和最后一个节点（尾节点）的next都指向NULL。</li>
<li>带表头指针和表尾指针：通过list的head和tail两个指针，可以随意的从链表的头和尾进行操作。</li>
<li>带链表长度计数器：可以通过len成员来获取链表的节点的个数，复杂度O(1)。</li>
<li>多态：链表使用void *指针来保存value，并且可以通过dup，free，match来操控节点的value值，因此，该链表可以保存任意类型的值。</li>
</ol>
<p>小喵看到这个多态的实现也是惊呆了，原来C语言也能实现多态，也第一次知道了函数指针居然可以这么用。</p>
<p>由此想到之前看过的一句话：高手用树叶也能杀人。希望每个人都能成为传说中的高手~</p>
<p>关于链表的操作，是数据结构课程中的基础，无外乎是增、删、改、查这四个操作，这里不再介绍。聪明的你，bing一下就OK了！</p>
<h2 id="redis-list-实战">Redis List 实战</h2>
<p>现在，我们已经基本了解了Redis的List结构的底层实现。那么，Redis提供了哪些可以供我们调用的接口呢？请听小喵慢慢道来。</p>
<p>以下指令根据类别和使用的频率进行排序。</p>
<p>指令清单：</p>
<ul>
<li>BLPOP</li>
<li>BRPOP</li>
<li>BRPOPLPUSH</li>
<li>LINDEX</li>
<li>LINSERT</li>
<li>LLEN</li>
<li>LPOP</li>
<li>LPUSH</li>
<li>LPUSHX</li>
<li>LRANGE</li>
<li>LREM</li>
<li>LSET</li>
<li>LTRIM</li>
<li>RPOP</li>
<li>RPOPLPUSH</li>
<li>RPUSH</li>
<li>RPUSHX</li>
</ul>
<h3 id="一push操作">一、PUSH操作</h3>
<h4 id="rpush-key-value-value-...">1，RPUSH key value [value ...]</h4>
<p>从队列的右边入队一个元素或多个元素，复杂度O(1)。</p>
<p>将所有指定的值插入存于key的列表的尾部（从右侧插入）。如果key不存在，那么PUSH之前，会先自动创建一个空的列表。如果key对应的值不是一个list的话，则会返回一个错误。如果同时push多个值的话，值会依次从左到右PUSH从尾部进入list。</p>
<p>那么这个命令有什么作用呢？</p>
<p>作用大大滴！</p>
<p>PUSH和POP操作，其实是队列的基本操作。Redis的list就是一个极其强大的队列系统。我们在哪些地方会用到队列呢？下面，我们说两个例子：</p>
<h5 id="a评论系统">a，评论系统</h5>
<p>逛过微博的筒子们应该都对评论系统有了解。我们在看完一条微博之后，常常会评论一番，或者看看其他人的吐槽。每条评论的记录都是按照时间顺序排序的。我们读的时候也是这个顺序。这时，队列就是一个很好的存储结构。每提交一次评论，都向list的末尾添加一个新的节点。</p>
<p>当然，博客本身也可以是这样的结构。</p>
<h5 id="b并行转串行">b，并行转串行</h5>
<p>我们做后台开发的筒子们应该都遇到过类似的情景。用户每时每刻都可能发出请求，而且请求的频率经常变化。这时，后台的程序不可能立刻响应每一个用户的请求，尤其是请求特别占资源的服务的时候（双11的时候，你有没有看到404页面？）。有什么好的办法来解决这个问题呢？我们需要一个排队系统。根据用户的请求时间，将用户的请求放入队列中，后台程序依次从队列中获取任务，处理并将结果返回到结果队列。</p>
<p>这其实也是一个生产者消费者模型。通过队列，我们将并行的请求转换成串行的任务队列，之后依次处理（当然后台的程序也可以多核并行处理）。</p>
<p>那么，这么强大的功能，我们不马上试试吗？</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> rpush queue a
(integer) 1
redis> rpush queue b
(integer) 2
redis> rpush queue c
(integer) 3
redis> rpush queue d e f
(integer) 6
redis> lrange queue 0 -1
1) "a"
2) "b"
3) "c"
4) "d"
5) "e"
6) "f"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>lrange这个命令是获取指定范围的list中的数据，我们下面再具体介绍。</p>
<p>这个例子中，我们依次将a、b、c、d、e、f、g从尾部(右侧)追加到queue中，最后通过lrange查看queue中的数据的顺序。</p>
<h4 id="lpush-key-value-value-...">2，LPUSH key value [value ...]</h4>
<p>从队列的左边入队一个或多个元素，复杂度O(1)。</p>
<p>这个指令和RPUSH几乎一样，只是插入节点的方向相反了，是从list的头部(左侧)进行插入的。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> del queue
(integer) 1
redis> lpush queue a
(integer) 1
redis> lpush queue b
(integer) 2
redis> lpush queue c
(integer) 3
redis> lpush queue e f g
(integer) 6
redis> lrange queue 0 -1
1) "g"
2) "f"
3) "e"
4) "c"
5) "b"
6) "a"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出，结果正好和RPUSH相反。</p>
<h4 id="rpushx-key-value">3，RPUSHX key value</h4>
<p>从队列的右边入队一个元素，仅队列存在时有效。当队列不存在时，不进行任何操作。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text"># 之前queue已经存在，且有a、b、c、d、e、f、g这6个元素
redis> rpushx queue z
(integer) 7
redis> del queue
(integer) 1
redis> rpushx queue z
(integer) 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看出，最开始rpushx向queue中新增了一个节点，但当我们删掉了queue时，再rpushx，就没有插入成功（返回值为0）。</p>
<h4 id="lpushx-key-value">4，LPUSHX key value</h4>
<p>从队列的左边入队一个元素，仅队列存在时有效。当队列不存在时，不进行任何操作。</p>
<p>参考RPUSHX。</p>
<h3 id="二pop操作">二、POP操作</h3>
<p>PUSH操作，是从队列头部和尾部增加节点的操作。而POP是获取并删除头尾节点的操作。</p>
<h4 id="lpop-key">1，LPOP key</h4>
<p>从队列的左边出队一个元素，复杂度O(1)。如果list为空，则返回nil。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> del queue
(integer) 0
redis> rpush queue a b c d e f
(integer) 6
redis> lrange queue 0 -1
1) "a"
2) "b"
3) "c"
4) "d"
5) "e"
6) "f"
redis> lpop queue
"a"
redis> lpop queue
"b"
redis> lrange queue 0 -1
1) "c"
2) "d"
3) "e"
4) "f"
redis> rpop queue
"f"
redis> rpop queue
"e"
redis> lrange queue 0 -1
1) "c"
2) "d"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们首先向空的list中添加了a、b、c、d、e、f这6个值，之后从左边POP(LPOP)出两个值，再从右侧POP(RPOP)出两个值。</p>
<h4 id="rpop-key">2，RPOP key</h4>
<p>从队列的右边出队一个元素，复杂度O(1)。如果list为空，则返回nil。</p>
<p>见LPOP。</p>
<h4 id="blpop-key-key-...-timeout">3，BLPOP key [key ...] timeout</h4>
<p>删除，并获得该列表中的第一元素，或阻塞，直到有一个可用。</p>
<p>这是LPOP的阻塞版本。在LPOP的时候，如果队列中没有值，则会返回一个nil。而BLPOP则会等待一段时间，如果list中有值（等待的时候，被添加的），则返回对应值；如果在给定时间内仍没有得到结果，则返回nil。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> lrange queue 0 -1
1) "c"
2) "d"
redis> BLPOP queue 1
1) "queue"
2) "c"
redis> BLPOP queue 1
1) "queue"
2) "d"
redis> BLPOP queue 1
(nil)
(1.10s)
redis> LPOP queue
(nil)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们仍接着上面的实验继续，这时queue里面只有2个元素了，我们使用BLPOP取值，前两次都成功地得到了值，效果和LPOP一样。但第三次的时候，由于list已经为空，但是BLPOP并没有立刻返回nil，而是阻塞了一点时间(timeout的时间)，之后才返回了nil。最后，我们试验了一下LPOP，证实了LPOP是立刻返回结果的。</p>
<p>timeout表示等待的时间，单位是秒。当设为0时，表示永远阻塞，非0时，表示等待的最长时间。</p>
<p>要注意的是，LBPOP支持多个key，也就是说可以同时监听多个list，并按照key的顺序，依次检查list是否为空，如果不为空，则返回最优先的list中的值。如果都为空，则阻塞，直到有一个list不为空，那么返回这个list对应的值。这里进行试验不是特别的方便，更具体的介绍可以查看中文官网的文档：<a href="http://redis.cn/commands/blpop.html">http://redis.cn/commands/blpop.html</a>。</p>
<h4 id="brpop-key-key-...-timeout">4，BRPOP key [key ...] timeout</h4>
<p>删除，并获得该列表中的最后一个元素，或阻塞，直到有一个可用。</p>
<p>参考BLPOP。</p>
<h3 id="三pop-and-push">三、POP and PUSH</h3>
<h4 id="rpoplpush-source-destination">1，RPOPLPUSH source destination</h4>
<p>删除列表中的最后一个元素，将其追加到另一个列表。</p>
<p>这个命令可以原子性地返回并删除source对应的列表的最后一个元素（尾部元素），并将钙元素放入destination对应的列表的第一个元素位置（列表头部）。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> rpush q1 1 2 3 4 5
(integer) 5
redis> lrange q1 0 -1
1) "1"
2) "2"
3) "3"
4) "4"
5) "5"
redis> rpoplpush q1 q2
"5"
redis> rpoplpush q1 q2
"4"
redis> lrange q1 0 -1
1) "1"
2) "2"
3) "3"
redis> lrange q2 0 -1
1) "4"
2) "5"
redis><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们简单的看一下上述的例子，首先我们初始化一个q1，内容是{1, 2, 3, 4, 5}。这是q2没有定义，可以理解是一个空的list {}。</p>
<p>之后使用rpoplpush，从q1右边pop出一个元素5，然后在q2左侧push进。则现在的q1为{1, 2, 3, 4}，q2为{5}。</p>
<p>再进行一次rpoplpush，从q1右边pop出一个元素4，然后在q2左侧push进。则现在的q1为{1, 2, 3}，q2为{4, 5}。</p>
<p>那么，这个有意思的命令有什么实际的用处呢？</p>
<p>redis的官网给出了两个有意思的案例（因为写的很详细，所以直接照搬下来了）<a href="http://www.redis.cn/commands/rpoplpush.html">2</a>：</p>
<p>模式：安全的队列</p>
<p>Redis通常都被用做一个处理各种后台工作或消息任务的消息服务器。一个简单的队列模式就是：生产者把消息放入一个列表中，等待消息的消费者用 <a href="http://www.redis.cn/commands/rpop.html">RPOP</a> 命令（用轮询方式），或者用 BRPOP 命令（如果客户端使用阻塞操作会更好）来得到这个消息。</p>
<p>然而，因为消息有可能会丢失，所以这种队列并是不安全的。例如，当接收到消息后，出现了网络问题或者消费者端崩溃了，那么这个消息就丢失了。</p>
<p>RPOPLPUSH (或者其阻塞版本的 <a href="http://www.redis.cn/commands/brpoplpush.html">BRPOPLPUSH</a>）提供了一种方法来避免这个问题：消费者端取到消息的同时把该消息放入一个正在处理中的列表。 当消息被处理了之后，该命令会使用 LREM 命令来移除正在处理中列表中的对应消息。</p>
<p>另外，可以添加一个客户端来监控这个正在处理中列表，如果有某些消息已经在这个列表中存在很长时间了（即超过一定的处理时限），那么这个客户端会把这些超时消息重新加入到队列中。</p>
<p>模式：循环列表</p>
<p>RPOPLPUSH 命令的 source 和 destination 是相同的话，那么客户端在访问一个拥有n个元素的列表时，可以在 O(N) 时间里一个接一个获取列表元素，而不用像 <a href="http://www.redis.cn/commands/lrange.html">LRANGE</a> 那样需要把整个列表从服务器端传送到客户端。</p>
<p>上面这种模式即使在以下两种情况下照样能很好地工作：</p>
<ul>
<li>有多个客户端同时对同一个列表进行旋转（rotating）：它们会取得不同的元素，直到列表里所有元素都被访问过，又从头开始这个操作。</li>
<li>有其他客户端在往列表末端加入新的元素。</li>
</ul>
<p>这个模式让我们可以很容易地实现这样一个系统：有 N 个客户端，需要连续不断地对一批元素进行处理，而且处理的过程必须尽可能地快。 一个典型的例子就是服务器上的监控程序：它们需要在尽可能短的时间内，并行地检查一批网站，确保它们的可访问性。</p>
<p>值得注意的是，使用这个模式的客户端是易于扩展（scalable）且安全的（reliable），因为即使客户端把接收到的消息丢失了， 这个消息依然存在于队列中，等下次迭代到它的时候，由其他客户端进行处理。</p>
<h4 id="brpoplpush-source-destination-timeout">2，BRPOPLPUSH source destination timeout</h4>
<p>弹出一个列表的值，将它推到另一个列表，并返回它;或阻塞，直到有一个可用。</p>
<p>RPOPLPUSH的阻塞版本。timeout的单位是秒，当timeout为0的时候，表示无限期阻塞。</p>
<p>具体使用参考RPOPLPUSH。</p>
<h3 id="四其他">四、其他</h3>
<h4 id="llen-key">1，LLEN key</h4>
<p>获得队列(List)的长度</p>
<p>和名字一样易懂，这里不再过多解释。</p>
<h4 id="lrange-key-start-stop">2，LRANGE key start stop</h4>
<p>从列表中获取指定返回的元素</p>
<p>我们在前面用到了很多次。LRANGE可以获取list的指定范围的值。范围用start和stop表示。负数表示从右向左数。</p>
<p>需要注意的是，超出范围的下标不会产生错误：如果start&gt;end，会得到空列表，如果end超过队尾，则Redis会将其当做列表的最后一个元素。</p>
<h4 id="lindex-key-index">3，LINDEX key index</h4>
<p>获取一个元素，通过其索引列表</p>
<p>我们之前介绍的操作都是对list的两端进行的，所以算法复杂度都只有O(1)。而这个操作是指定位置来进行的，每次操作，list都得找到对应的位置，因此算法复杂度为O(N)。list的下表是从0开始的，index为负的时候是从右向左数。-1表示最后一个元素。当下标超出的时候，会返回nul。所以不用像操作数组一样担心范围越界的情况。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> rpush q1 a b c d f e g
(integer) 7
redis> lrange q1 0 -1
1) "a"
2) "b"
3) "c"
4) "d"
5) "f"
6) "e"
7) "g"
redis> lindex q1 0
"a"
redis> lindex q1 3
"d"
redis> lindex q1 4
"f"
redis> lindex q1 -1
"g"
redis> lindex q1 100
(nil)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="lset-key-index-value">4，LSET key index value</h4>
<p>设置队列里面一个元素的值</p>
<p>这个操作和LINDEX类似，只不过LINDEX是读，而LSET是写。下标的用法和LINDX相同。不过当index越界的时候，这里会报异常。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> rpush q1 a b c d f e g
(integer) 7
redis> lrange q1 0 -1
1) "a"
2) "b"
3) "c"
4) "d"
5) "f"
6) "e"
7) "g"
redis> lset q1 0 1
OK
redis> lset q1 3 3
OK
redis> lset q1 -1 0
OK
redis> lset q1 100 0
(error) ERR index out of range
redis> lrange q1 0 -1
1) "1"
2) "b"
3) "c"
4) "3"
5) "f"
6) "e"
7) "0"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="lrem-key-count-value">5，LREM key count value</h4>
<p>从列表中删除元素</p>
<p>该命令用于从key对应的list中，移除前count次出现 的值为value的元素。count参数有三种情况：</p>
<p>count &gt; 0: 表示从头向尾（左到右）移除值为value的元素。</p>
<p>count &lt; 0: 表示从尾向头（右向左）移除值为value的元素。</p>
<p>count = 0: 表示移除所有值为value的元素。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> rpush q 1 0 1 1 2 1 0 1 1
(integer) 9
redis> lrange q 0 -1
1) "1"
2) "0"
3) "1"
4) "1"
5) "2"
6) "1"
7) "0"
8) "1"
9) "1"
redis> lrem q 2 1
(integer) 2
redis> lrange q 0 -1
1) "0"
2) "1"
3) "2"
4) "1"
5) "0"
6) "1"
7) "1"
redis> lrem q -2 1
(integer) 2
redis> lrange q 0 -1
1) "0"
2) "1"
3) "2"
4) "1"
5) "0"
redis> lrem q 0 1
(integer) 2
redis> lrange q 0 -1
1) "0"
2) "2"
3) "0"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="ltrim-key-start-stop">6，LTRIM key start stop</h4>
<p>修剪到指定范围内的清单</p>
<p>这个命令和LRANGE十分相似，LRANGE会将指定范围的元素返回给客户端，而LTRIM会对list进行修剪，使其只包含指定范围的元素。start和stop表示范围。</p>
<p>超出范围的下标不会产生错误：如果start&gt;end，会得到空列表，如果end超过队尾，则Redis会将其当做列表的最后一个元素。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> rpush q a b c d e f g
(integer) 7
redis> lrange q 0 -1
1) "a"
2) "b"
3) "c"
4) "d"
5) "e"
6) "f"
7) "g"
redis> ltrim q 1 4
OK
redis> lrange q 0 -1
1) "b"
2) "c"
3) "d"
4) "e"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="linsert-key-beforeafter-pivot-value">7，LINSERT key BEFORE|AFTER pivot value</h4>
<p>在列表中的另一个元素之前或之后插入一个元素</p>
<p>该命令将value插入值key对应的列表的基准值pivot的前面或是后面。</p>
<p>当key不存在时，这个list被视为空列表，任何操作都不会发生。</p>
<p>当key存在，但保存的不是list，则会报error。</p>
<p>该命令会返回修改之后的list的长度，如果找不到pivot，则会返回-1。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> rpush q a b c d e
(integer) 5
redis> lrange q 0 -1
1) "a"
2) "b"
3) "c"
4) "d"
5) "e"
redis> linsert q before c 0
(integer) 6
redis> linsert q after c 0
(integer) 7
redis> linsert q before 0 1
(integer) 8
redis> linsert q after 0 1
(integer) 9
redis> lrange q 0 -1
1) "a"
2) "b"
3) "1"
4) "0"
5) "1"
6) "c"
7) "0"
8) "d"
9) "e"
redis> linsert q after w 1
(integer) -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里，我们构造了一个list{a, b, c, d, e}，先在c的前后插入了0，再在0前后插入了1。可以看出，linsert只会对第一个匹配pivot的前后进行操作。</p>
<p>最后，我们在w前面插入1，但是list中并没有w，所以返回了-1。</p>
<p><strong>转载</strong>请注明出处。</p>
]]></content>
      <categories>
        <category>C++</category>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>二、Redis基本操作——String(实战篇)</title>
    <url>/2016/05/01/redis-string-practice/</url>
    <content><![CDATA[<blockquote>
<p>小喵的唠叨话：上一周因为实验室要用GIT作为版本控制器，导致小喵花了一周的时间研究GIT，Redis这边，就没来得及继续研究。前几天看到有人搜索Redis怎么向数组里面添加内容，搜到了我的上一篇文章，可惜上一篇只讲到了String的原理，所以小喵痛定思痛，决定还是爬起来写这篇博客，免得搜索String操作的小伙伴又空手而归。</p>
</blockquote>
<span id="more"></span>
<p>上一篇博客，我们详细的介绍了Redis中String数据类型的底层实现，相信大家已经在原理上掌握的相当不错了。这次，我们就介绍Redis的命令行操作。当然，我们实际开发的时候可能不会太经常直接用到Redis的命令，而是通过一些数据库的封装来操控（就像我们虽然会使用SQL，但是实际开发的时候，总是有一些特别好用的库，既安全又方便）。但是，学习最基础的Redis命令，是针对各种语言的以不变应万变的法宝，毕竟库是针对于语言的。同时，学会了Redis的基本命令，将来对各种库的掌握也能更迅速。</p>
<p>关于Redis的命令，主要参考Redis的官方文档(<a href="http://redis.io/commands#string">http://redis.io/commands#string</a>)。小喵这里主要像是翻译一下，并且给出一些实用的例子。排版上，小喵按功能重新组织了一下指令，并将比较常用的指令放在了最前面。同时也增加了锚点，方便大家查阅。小喵这里的Redis版本是3.0.7，应该是目前的最新版。</p>
<p>注：redis的命令（SET，GET等）是不区分大小写的（KEY和VALUE区分的），为了方便所以小喵的操作可能都是小写的。</p>
<p>指令清单:</p>
<ul>
<li>APPEND</li>
<li>BITCOUNT</li>
<li>BITOP</li>
<li>BITPOS</li>
<li>DECR</li>
<li>DECRBY</li>
<li>GET</li>
<li>GETBIT</li>
<li>GETRANGE</li>
<li>GETSET</li>
<li>INCR</li>
<li>INCRBY</li>
<li>INCRBYFLOAT</li>
<li>MGET</li>
<li>MSET</li>
<li>MSETNX</li>
<li>SET</li>
<li>SETBIT</li>
<li>SETEX</li>
<li>SETNX</li>
<li>SETRANGE</li>
<li>STRLEN</li>
</ul>
<h3 id="一set的相关操作">一，SET的相关操作</h3>
<h4 id="set-key-value-ex-seconds-px-milliseconds-nxxx">1，SET key value [EX seconds] [PX milliseconds] [NX|XX]</h4>
<p>Set the string value of a key</p>
<p>将键key设置成指定的字符串value。</p>
<p>我们知道Redis是一种key-value数据库（当然这么说可能不够严谨，因为Redis支持很多高级的数据结构）。因此所有的数据都是通过key来访问，key就是键。</p>
<p>SET指令可以将字符串的value和key绑定在一起。</p>
<p>如果不加额外的参数。当key中已经保存了一个值的话，这个值会被覆盖成新的值，并且忽略掉原始类型（一个key对应的不一定是一个字符串，也可以是List等其他的数据结构，这些结构在后面的文章里面会陆续介绍）；如果key不存在，那么则会在数据库中新增一个key，对应的值就是你刚刚设置的。</p>
<p>例子：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> get name
(nil)
redis> set name miaoerduo
OK
redis> get name
"miaoerduo"
redis> set name miao
OK
redis> get name
"miao"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>GET命令用于查看key对应的值，我们下面会讲到。</p>
<p>第一个get，由于name这个key不存在，因此我们得到的结果是nil，也就是说空。</p>
<p>之后我们设置一次，然后就get到我们的结果了。之后再设置一次，会发现结果已经被覆盖。</p>
<p>这就是set命令的基本用法。</p>
<p>我们看到文档的后面有一些可选的参数。下面依次来介绍：</p>
<p><strong>EX seconds</strong>：设置key的过时时间，单位为秒。</p>
<p><strong>PX milliseconds</strong>：设置key的过期时间，单位为毫秒。</p>
<p>以ex为例：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> set name miaoerduo ex 10
OK
redis> get name
"miaoerduo"
redis> get name
(nil)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们设置了name的过期时间为10秒。</p>
<p>在设置完name之后，立刻获取name的值，可以得到正确的输出。但是过了10s之后，发现只能得到一个nil。说明这个key已经被清空了。</p>
<p>那么这个设置有什么作用呢？</p>
<p>我们说几个常见的应用场景：</p>
<h5 id="a验证码">a，验证码</h5>
<p>我们经常在登录一些网站或是进行付款等操作的时候，都会收到一些验证码，并且说10min后失效。</p>
<p>实际上就可以通过下面一条指令来实现：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">set phone_num code ex 600<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>用手机号作为key，验证码作为值，超时6min。这样当你输入好验证码，提交的时候，后台就可以了先 <code>get phone_num</code>，再比较你的输入和数据库里面存的值，从而完成身份的验证。</p>
<h5 id="bsession">b，session</h5>
<p>早前，网站通过cookie来保存用户的用户名和密码，之后出现了很多的安全隐患，因此就提出了session的机制。</p>
<p>用户登陆成功之后，本地的cookie会保留一个较长的随机码，而网站后的后台则存储了这个随机码和你的用户id的对应关系。在你第二次登录的时候，cookie会传输到后台，而后台则根据你的随机码，获取你的用户信息，如果符合，则自动登录。这样，即使网站上有不法分子获取了你的cookie，也得不到你的任何信息，因为你的真实的有用的信息都存储在网站的后台。</p>
<p>我们在登录邮箱的时候，通常都会有一个选项，7天内自动登录。这其实就是给后台存的session设置了一个超时。聪明的你是不是已经会自己实现了呢？</p>
<p><strong>NX</strong>：（if Not eXist）只有键key不存在的时候才会设置key的值</p>
<p><strong>XX</strong>：只有键key存在的时候才会设置key的值 NX通常用于实现锁机制，XX的功能，小喵暂时木有头绪。。。想到应用场景的筒子们可以留言告诉小喵，小喵看到了一定会更新的。</p>
<p>举个例子：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> del name
(integer) 0
redis> get name
(nil)
redis> set name miaoerduo nx
OK
redis> set name miaoerduo nx
(nil)
redis> get name
"miaoerduo"
redis> set name miao xx
OK
redis> get name
"miao"
redis> del name
(integer) 1
redis> set name miao xx
(nil)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先我们使用del指令删除了name（这个指令后面会介绍）。之后使用nx模式设置name，第一次成功了，而第二次就失败了，因为name已经存在了。之后使用xx模式修改，发现确实可以。del name之后，再使用xx模式，就失败了，因为此时的name已经不存在了。</p>
<p>以上，就是set的所有的用法。</p>
<h4 id="setrange-key-offset-value">2，SETRANGE key offset value</h4>
<p>Overwrite part of a string at key starting at the specified offset</p>
<p>这个命令可以覆盖掉key对应的string的一部分。offset表示需要覆盖的字符串的起始位置，之后会用value的值，覆盖掉原始string的对应位置的数据。</p>
<p>这里有一些比较有意思的操作：如果原始key不存在，则默认为一个长度为0的字符串。如果offset超过原始string的长度，那么会在之前的string后面补充0以达到offset。如果value的长度超过了原始string后面可以覆盖的部分，则Redis内部会重新申请内存，完成数据的追加（还记得上一章的内容吗？），这时候数据库由于需要分配内存，可能会出现阻塞（需要分配的内存越大，阻塞时间越长）。</p>
<p>例子：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> set str "hello world"
OK
redis> setrange str 6 redis
(integer) 11
redis> get str
"hello redis"
redis> setrange str 15 aha
(integer) 18
redis> get str
"hello redis\x00\x00\x00\x00aha"
redis> del str
(integer) 1
redis> setrange str 5 "hello miao"
(integer) 15
redis> get str
"\x00\x00\x00\x00\x00hello miao"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这个实验中，我们先新建了一个str，内容是"hello world"，之后，从位置6开始写入字符串"redis"，则得到了"hello redis"。之后我们在15的位置，写入"aha"，这是offset已经比字符串的长度要大了，则Redis会默认填充0（\x00是0的16进制表达），之后再追加字符串。最后，我们给一个不存在的key使用setrange设置了一个值，结果表现得和空字符串一样。</p>
<h4 id="mset-key-value-key-value-...">3，MSET key value [key value ...]</h4>
<p>Set multiple keys to multiple values</p>
<p>一次性设置多个key-value。如果key的值已存在，则会直接覆盖。 相当与同时调用多次SET命令。不过要注意的是，这个操作是原子的。也就是说，所有的keys都一次性设置的。如果你同时运行两个MSET来设置相同的keys，那么操作的结果也只会是两次MSET中的后一次的结果，而不会是混杂的结果。</p>
<p>例子：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> mset name1 miaoerduo name2 miao name3 love
OK
redis> get name1
"miaoerduo"
redis> get name2
"miao"
redis> get name3
"love"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="msetnx-key-value-key-value-...">4，MSETNX key value [key value ...]</h4>
<p>Set multiple keys to multiple values, only if none of the keys exist</p>
<p>一次性设置多个key-value。如果存在任何一个key已经存在，那么这个操作都不会执行。所以，当使用MSETNX的时候，要么全部key都被修改，要么全部都不被修改。</p>
<p>当然这个操作也是原子的。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> get name3
"love"
redis> msetnx name3 miaoerduo name4 miao
(integer) 0
redis> get name4
(nil)
redis> msetnx name4 miaoerduo name5 miao
(integer) 1
redis> get name4
"miaoerduo"
redis> get name5
"miao"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当name3已经存在的时候，我们设置name3和name4，发现，连name4都没有创建。当设置name4和name5的时候，由于这两个key之前都不存在，因此设置成功了。</p>
<h4 id="setex-key-seconds-value">5，SETEX key seconds value</h4>
<p>Set the value and expiration of a key</p>
<p>设置key的值和超时。和前面的set key value ex seconds一样。</p>
<h4 id="psetex-key-milliseconds-value">6，PSETEX key milliseconds value</h4>
<p>Set the value and expiration in milliseconds of a key</p>
<p>设置key的值和超时。和前面的set key value px milliseconds一样。</p>
<h4 id="setnx-key-value">7，SETNX key value</h4>
<p>Set the value of a key, only if the key does not exist</p>
<p>当key不存在的时候，设置key的值。和set key value nx一样。</p>
<h3 id="二get的相关操作">二、GET的相关操作</h3>
<h4 id="get-key">1，GET key</h4>
<p>Get the value of a key</p>
<p>根据给定的key，获取value值。这个操作，我们之前已经使用了很多次。</p>
<p>如果key不存在，会返回nil。如果key对应的值不是string(List，Set等)，则会报错，因为GET只能处理string类型的value。</p>
<p>演示如下：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> get name
(nil)
redis> set name "miaoerduo"
OK
redis> get name
"miaoerduo"
redis> lpush arr 1 2 3 4 5
(integer) 5
redis> get arr
(error) WRONGTYPE Operation against a key holding the wrong kind of value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意，lpush是List部分的内容，arr的值是一个List的结构。这里只需要知道key不是string类型的时候，get的时候就会报错。</p>
<h4 id="mget-key-key-...">2，MGET key [key ...]</h4>
<p>Get the values of all the given keys</p>
<p>还记得我们之前可以同时设置多个key-value吗？其实我们也可以一次性获取多个key的值。如果key不存在，则对应的地方返回nil。</p>
<p>那么一次性获取多个值和单独一次一次GET有什么区别呢？</p>
<p>小喵认为，主要有两点，原子操作和查询效率。</p>
<p>比如博客上会统计评论数和访问数。如果我们依次读取这两部分的值，那么可能得到的两个值并不是同一时刻的。而如果使用MGET，则得到的一定是同一时刻的。这就是原子操作的威力（注，官方文档只介绍了SET和GET的操作是原子的，并没有说MGET是不是，这里小喵果断的说MGET是原子操作也是不合理的。但考虑到使用MGET的时候，是把查询指令一次性传输到后台来执行，所以应该原子操作。无论如何，在上面的例子中，使用MGET总是比两次GET要合理的）。</p>
<p>另外，如果数据库的查询，都分为三个过程，传输查询指令，执行指令，输出结果。</p>
<p>如果分多次GET的话，在传输指令和输出结果的这两个部分就要重复很多次，效率大打折扣。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> set key1 a
OK
redis> set key2 b
OK
redis> mget key1 key2 key3
1) "a"
2) "b"
3) (nil)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们只创建了key1和key2，使用MGET获取的时候，由于没有key3，对应的位置返回了nil。</p>
<h3 id="getrange-key-start-end">3，GETRANGE key start end</h3>
<p>Get a substring of the string stored at a key</p>
<p>该指令只要用于获取字符串的字串，在Redis2.0版本之前，叫做SUBSTR。strat和end是字串的起始和结束的位置，可以用负数来表示距离string尾部的未知的下标。-1是最后一个字符，-2是底数第二个字符。这个表达方式和Python的获取list的子list非常相似。</p>
<p>需要注意的有两点：</p>
<p>字串包括了start和end这两个位置的字符。在Python中是不包含end的。</p>
<p>当给出的start和end超出了string的范围时，指令只会返回在string内的结果。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> set str "hello world"
OK
redis> getrange str 6 -1
"world"
redis> getrange str -5 -1
"world"
redis> getrange str 0 4
"hello"
redis> getrange str 0 100
"hello world"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述例子是几种情况下的输出。</p>
<h4 id="getset-key-value">4，GETSET key value</h4>
<p>Set the string value of a key and return its old value</p>
<p>设置key的值，并返回之前的值。如果之前key的值不是string，则会报错。</p>
<p>这个指令相当于先GET，再SET。</p>
<p>这个指令可以用来配合INCR指令一起使用支持重置的技术功能（INCR我们后面会讲到）。先设置count为0，每次INCR使得count加1。等到需要获取计数的时候，使用GETSET count 0，就能获取计数的值，并且把计数器重置了。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> set str "hello"
OK
redis> getset str "world"
"hello"
redis> get str
"world"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>第一行设置str为"hello"</p>
<p>第二行获取了str原先的值，并把str设置成"world"。</p>
<p>第三行GET的时候，就是修改之后的值了。</p>
<h3 id="三string的修改操作">三、string的修改操作</h3>
<h4 id="strlen-key">1，STRLEN key</h4>
<p>Get the length of the value stored in a key</p>
<p>返回key对应的string的长度，如果key对应的不是string，则报错。如果key不存在，则返回0（还是把key对应的看成空字符串）。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> set str "hello world"
OK
redis> strlen str
(integer) 11
redis> get nokey
(nil)
redis> strlen nokey
(integer) 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="append-key-value">2，APPEND key value</h4>
<p>Append a value to a key</p>
<p>如果key已经存在，且值为string，则将value追加到值的后面，如果key不存在，则会创建一个空的字符串的key，然后执行追加操作。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> set str "hello"
OK
redis> append str " world"
(integer) 11
redis> get str
"hello world"
redis> del str
(integer) 1
redis> append str "hello"
(integer) 5
redis> get str
"hello"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个例子中，我们先向已有值的str中append了一个字符串。然后向不存在的key，也添加了字符串。</p>
<h4 id="incr-key">3，INCR key</h4>
<p>Increment the integer value of a key by one</p>
<p>对存储在key的整数值进行原子的加1操作。</p>
<p>如果key不存在，则会设置默认值0，再加1。</p>
<p>如果key存在，但是存储的值不是字符串，或者存储的字符串不能表示整数，则执行该操作时，会报错。</p>
<p>这个操作仅限于64位的有符号的整型数据。</p>
<p>比较有意思的是，虽然这个key存储的值是个字符串，但是该操作的效果和对相应的数字进行操作一样。而且，Redis中，在存储这类字符串的时候，底层上其实存储的就是一个整数，因此不存在存储上的浪费。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> set count 0
OK
redis> incr count
(integer) 1
redis> incr count
(integer) 2
redis> del count
(integer) 1
redis> get count
(nil)
redis> incr count
(integer) 1
redis> incr count
(integer) 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>值得注意的是，该操作是原子操作，即使有多个请求传输到Redis，count执行的结果都不会错误，所以我们可以大胆放心的用这个功能实现多线程的计数功能。</p>
<h4 id="decr-key">4，DECR key</h4>
<p>Decrement the integer value of a key by one 对存储在key的整数值进行原子的减1操作。</p>
<p>注意事项和INCR一样。</p>
<h4 id="incrby-key-increment">5，INCRBY key increment</h4>
<p>Increment the integer value of a key by the given amount</p>
<p>对存储在key的整数值进行原子的加操作，加increment。</p>
<p>如果key不存在，操作之前，key就会被置为0。如果key的value类型错误或者是个不能表示成数字的字符串，就返回错误。这个操作最多支持64位有符号的整型数字。基本上和INCR一样。</p>
<h4 id="decrby-key-decrement">6，DECRBY key decrement</h4>
<p>Decrement the integer value of a key by the given number</p>
<p>对存储在key的整数值进行原子的减操作，减increment。</p>
<p>其他和INCR一样。</p>
<h4 id="incrbyfloat-key-increment">7，INCRBYFLOAT key increment</h4>
<p>Increment the float value of a key by the given amount</p>
<p>对存储造key中的浮点数进行原子的加操作，加increment。</p>
<p>如果key不存在，操作之前，key就会被置为0。如果key的value类型错误或者是个不能表示成浮点数的字符串，就返回错误。</p>
<p>我们并没有DECRBYFLOAT这个操作，因此想要实现减操作，只需要把increment设成负的就可以。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> set a 1.5
OK
redis> incrbyfloat a 10.1
"11.6"
redis> incrbyfloat a 10.1
"21.7"
redis> incrbyfloat a -10.1
"11.6"
redis> incrbyfloat a -1.5e2
"-138.39999999999999999"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>浮点数可以用一般的小数和科学计数法表示。</p>
<h3 id="四二进制操作">四、二进制操作</h3>
<h4 id="setbit-key-offset-value">1，SETBIT key offset value</h4>
<p>Sets or clears the bit at offset in the string value stored at key</p>
<p>设置或者清空key的value(字符串)在offset处的bit值。这里将string看成由bit组成的数组。</p>
<p>指定位置的bit可以被设置，或者被清空，这个由value（只能是0或者1）来决定。当key不存在的时候，就创建一个新的字符串value。要确保这个字符串足够长到在offset处有bit值。参数offset需要大于等于0，并且小于2^32(限制bitmap大小为512)。当key对应的字符串增大的时候，新增的部分bit值都是设置为0。</p>
<p>该操作返回value原来的offset位置的bit值。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> setbit a 0 1
(integer) 0
redis> setbit a 1 1
(integer) 0
redis> setbit a 2 1
(integer) 0
redis> setbit a 3 1
(integer) 0
redis> get a
"\xf0"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>a最开始不存在，使用setbit操作，将a的前4位都设置成1。最终就得到了\xf0，这是16进制表示的结果，前4位都是1，其他都是0。</p>
<h4 id="getbit-key-offset">2，GETBIT key offset</h4>
<p>Returns the bit value at offset in the string value stored at key</p>
<p>获取key对应的string在offset处的bit值。当offset超出了字符串长度的时候，这个字符串就被假定为由0比特填充的连续空间。当key不存在的时候，它就认为是一个空字符串，所以offset总是超出范围，然后value也被认为是由0比特填充的连续空间。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> setbit a 7 1
(integer) 0
redis> getbit a 0
(integer) 0
redis> getbit a 7
(integer) 1
redis> getbit a 100
(integer) 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="bitcount-key-start-end">3，BITCOUNT key [start end]</h4>
<p>Count set bits in a string</p>
<p>统计key的string的二进制中1的个数。 start和end分别表示string的起始和结束位置，含义和GETRANGE中一样。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> setbit mykey 0 1
(integer) 0
redis> setbit mykey 10 1
(integer) 0
redis> setbit mykey 5 1
(integer) 0
redis> bitcount mykey
(integer) 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="bitop-operation-destkey-key-key-...">4，BITOP operation destkey key [key ...]</h4>
<p>Perform bitwise operations between strings</p>
<p>对string进行bit级别的操作。具体操作有4种。AND，OR，XOR，NOT。</p>
<p>用法如下：</p>
<p>BITOP AND destkey srckey1 srckey2 srckey3 ... srckeyN</p>
<p>BITOP OR destkey srckey1 srckey2 srckey3 ... srckeyN</p>
<p>BITOP XOR destkey srckey1 srckey2 srckey3 ... srckeyN</p>
<p>BITOP NOT destkey srckey NOT</p>
<p>操作后面只有一个目标key和srckey，是因为NOT操作是一元的。</p>
<p>对于AND，OR和XOR操作，Redis会将srckey1，srckey2，...，srckeyN这些字符串对位进行相关操作，之后将结果存入destkey中。</p>
<p>如果srckey的length不相等的话，Redis内部会将短的字符串补齐，并填充上0。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> set key1 "\xf0\xf0"
OK
redis> set key2 "\x0f\x0f"
OK
redis> set key3 "\xff\xff"
OK
redis> bitop and destkey key1 key2 key3
(integer) 2
redis> get destkey
"\x00\x00"
redis> bitop or destkey key1 key2 key3
(integer) 2
redis> get destkey
"\xff\xff"
redis> bitop xor destkey key1 key2 key3
(integer) 2
redis> get destkey
"\x00\x00"
redis> bitop not destkey key1
(integer) 2
redis> get destkey
"\x0f\x0f"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="bitpos-key-bit-start-end">5，BITPOS key bit [start] [end]</h4>
<p>Find first bit set or clear in a string</p>
<p>返回string的二进制中第一个0或1的位置。</p>
<p>这里将string看成一个有许多bit组成的数组。其中start和end表示string的一个间隔，如果指定了start和end，则BITPOS只会查询这个区间。注意，start和end表示的字符的位置，不是bit的位置。</p>
<p>即使指定了start和end，BITPOS这个操作也只会这个目标bit的绝对地址。</p>
<p>有几点需要注意：</p>
<p>在没有指定查询区间或只指定start的时候，查询bit位为0的位置时，如果string中没有该位，则会返回string的bit位的总数。比如在\xff\xff\xff直接查询bit为0的位置，Redis默认该字符串后面都是0，因此，返回的结果就是12（下标从0开始数的）。</p>
<p>如果指定了查询区间，无论查询0或是1，在没查询到的时候只会返回-1。</p>
<p>在没有指定查询区间时，查询bit位为1的位置时，如果string中没有该位，则会返回-1，表示未查询到。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">redis> set bits "\x00\xff\x00\xff"
OK
redis> strlen bits
(integer) 4
redis> bitpos bits 0
(integer) 0
redis> bitpos bits 1
(integer) 8
redis> bitpos bits 0 1
(integer) 16
redis> bitpos bits 0 1 -1
(integer) 16
redis> bitpos bits 1 1 -1
(integer) 8
redis> bitpos bits 0 3
(integer) 32
redis> bitpos bits 0 3 3
(integer) -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看上面的例子，bits的初始设置的二进制表示为：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">00000000 11111111 00000000 11111111<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>直接获取0（bitpos bits 0）的位置为0，获取1（bitpos bits 1）的位置为8。</p>
<p>指定开始位置为1（start = 1）的时候，0第一次出现（bitpos bits 1）的位置为16。</p>
<p>指定起始位置为3（start = 3）的时候，0第一次出现（bitpos bits 0 3）的位置为32。</p>
<p>这是因为Redis在查询字符串的时候查询到了字符串的末尾，之后默认末尾的后面都是0，因此得到了32这的个位置。</p>
<p>最后，当指定必须在第3个字节（从0开始数）查询0的时候，由于查不到0，因此只返回了-1。</p>
<p>这篇博客的内容，小喵自己也感觉有点多，每个指令小喵都是参考了官方的文档，然后都自己动手做了实验。可能有些地方，小喵没有理解的很好，这时就需要大家多多指教了。</p>
<p><strong>转载</strong>请注明出处~</p>
]]></content>
      <categories>
        <category>C++</category>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>关于多线程的三两事</title>
    <url>/2021/07/17/talk-about-threads/</url>
    <content><![CDATA[<p>多线程一直是编程中的重要的工具，它可以分充分的利用硬件资源，是我们用更少的时间去完成更多的事情。在之前的博客中，我有介绍了OpenMP的基本使用，OpenMP可以理解为多线程的一个合理和高效的一套抽象工具。这次，打算仔细的介绍多线程编程中的常见的概念和典型的案例。</p>
<h2 id="典型的案例">典型的案例</h2>
<p>说到多线程，最核心的问题就是保证数据的读写安全。为了达到此目的，我们需要多很多常见的数据结构做一些改造，从而适应多线程的场景。以下是我工作中比较常见到的一些使用场景：</p>
<ol type="1">
<li>线程池</li>
<li>读写锁</li>
<li>消息队列</li>
<li>ConcurrentCache</li>
<li>PingPang Buffer</li>
</ol>
<p>在具体介绍这些使用场景之前，我们还是需要了解需要使用到的一些基本的工具：互斥量、条件变量、原子操作等。</p>
<span id="more"></span>
<h2 id="互斥量">互斥量</h2>
<p>互斥量，顾名思义，就是互斥的数据，一个线程持有的时候，其他线程就必须等待。</p>
<p>在C++11中，使用<code>&lt;mutex&gt;</code>头文件引入。以下是一个简单的计数器的实现。</p>
<p><code>emit</code>函数通过<code>mutex_</code>进行加锁，使得同一时间仅有一个线程可以执行<code>++ x_</code>的操作，从而保证了计数的正确性。</p>
<p><code>std::lock_guard</code>是个工具类，lck在构造时，调用了lock函数，在析构时调用了unlock，从而避免我们自行调用的时候忘记unlock。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">x_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        mutex_<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">++</span> x_<span class="token punctuation">;</span>
        mutex_<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// or</span>
        <span class="token comment">// std::lock_guard&lt;std::mutex> lck(mutex_);</span>
        <span class="token comment">// ++ x_;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> x_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> x_<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>mutex mutex_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Counter c<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>c<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            c<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t2</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>c<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            c<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 20000000</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>基于Mutex，我们可以方便的实现读写锁。读写锁的作用是，保证数据可以供多个线程并发读，仅一个线程允许写。在存在线程读的情况下，写的线程会阻塞，直到没有任何线程有读操作。</p>
<h2 id="读写锁">读写锁</h2>
<p>首先读写锁会存在一个write_mutex，读线程和写线程都需要抢占这个mutex，从而保证读和写不会同时进行。但是只需要第一个读线程抢占write_mutex即可，其他的读线程不需要再抢占（抢占的话，就不支持并发读了）。当不存在读线程的时候，需要释放write_mutex，这才运行写线程抢占。</p>
<p>因此我们还需要一个计数器，记录当前读线程的个数，并使用另一个read_mutex保证计数器的准确。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token keyword">class</span> <span class="token class-name">ReadWriteLock</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">ReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">reader_count_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">lock_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        read_mutex_<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>reader_count_ <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            write_mutex_<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token operator">++</span> reader_count_<span class="token punctuation">;</span>
        read_mutex_<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">unlock_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        read_mutex_<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">--</span> reader_count_<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>reader_count_ <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            write_mutex_<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        read_mutex_<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">lock_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        write_mutex_<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">unlock_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        write_mutex_<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>mutex read_mutex_<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>mutex write_mutex_<span class="token punctuation">;</span>
    <span class="token keyword">int64_t</span> reader_count_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

ReadWriteLock rw_lock<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">read_fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">seconds</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rw_lock<span class="token punctuation">.</span><span class="token function">lock_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"read thread #"</span> <span class="token operator">&lt;&lt;</span> idx <span class="token operator">&lt;&lt;</span> <span class="token string">": read data"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">seconds</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"read thread #"</span> <span class="token operator">&lt;&lt;</span> idx <span class="token operator">&lt;&lt;</span> <span class="token string">": read over"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    rw_lock<span class="token punctuation">.</span><span class="token function">unlock_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">write_fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">seconds</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rw_lock<span class="token punctuation">.</span><span class="token function">lock_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"write thread #"</span> <span class="token operator">&lt;&lt;</span> idx <span class="token operator">&lt;&lt;</span> <span class="token string">": write data"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">seconds</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"write thread #"</span> <span class="token operator">&lt;&lt;</span> idx <span class="token operator">&lt;&lt;</span> <span class="token string">": write over"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    rw_lock<span class="token punctuation">.</span><span class="token function">unlock_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>thread<span class="token operator">></span> threads<span class="token punctuation">;</span>
    threads<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">read_fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    threads<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">read_fn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    threads<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">read_fn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    threads<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">write_fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    threads<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">write_fn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span>t <span class="token operator">:</span> threads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// output</span>
<span class="token comment">// read thread #1: read data</span>
<span class="token comment">// read thread #2: read data</span>
<span class="token comment">// read thread #1: read over</span>
<span class="token comment">// read thread #2: read over</span>
<span class="token comment">// write thread #1: write data</span>
<span class="token comment">// write thread #1: write over</span>
<span class="token comment">// write thread #2: write data</span>
<span class="token comment">// write thread #2: write over</span>
<span class="token comment">// read thread #3: read data</span>
<span class="token comment">// read thread #3: read over</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到读线程1和2同时进行的读操作，而写线程1在读线程结束之后才进行。</p>
<h2 id="条件变量">条件变量</h2>
<p>条件变量主要作用是是线程间进行通信，用于一个线程告知其他线程当前的状态。</p>
<p>一般可以用于控制线程的执行顺序，告知其他线程资源是否可用等。</p>
<p>条件变量的使用需要搭配互斥量。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;condition_variable></span></span>

std<span class="token double-colon punctuation">::</span>mutex mutex_<span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>condition_variable cv_<span class="token punctuation">;</span>
<span class="token keyword">bool</span> ready_ <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">print_id</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lck</span><span class="token punctuation">(</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>ready_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cv_<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>lck<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"thread -- "</span> <span class="token operator">&lt;&lt;</span> id <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lck</span><span class="token punctuation">(</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ready_ <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    cv_<span class="token punctuation">.</span><span class="token function">notify_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>thread threads<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// spawn 10 threads:</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">thread</span><span class="token punctuation">(</span>print_id<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"10 threads ready to race...\n"</span><span class="token punctuation">;</span>
    <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// go!</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>th <span class="token operator">:</span> threads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        th<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里使用<code>std::unique_lock</code>来管理互斥量。相对于<code>lock_guard</code>，<code>unique_lock</code>的功能更丰富，可以通过它来对<code>mutex</code>进行<code>lock</code>和<code>unlock</code>，具体的使用可以查看相关的文档。</p>
<p>condition_variable通过wait操作，可以等待唤醒。wait操作有两个行为：</p>
<ol type="1">
<li>将当前线程加入条件变量的等待队列</li>
<li>释放锁</li>
</ol>
<p>唤醒条件变量的方法有两个：<code>notify_one</code>和<code>notify_all</code>，分别唤醒一个和所有的线程。</p>
<p>当一个wait中的线程被唤醒时，它会抢占住<code>mutex</code>，因此后续的操作均是线程安全的。</p>
<blockquote>
<p>为什么<code>condition_variable</code>需要一个<code>mutex</code>呢？</p>
<ol type="1">
<li>一方面是有些变量的访问，我们需要保证它的互斥性，比如这里的<code>ready_</code>字段</li>
<li>保证wait的两个操作（等待和锁释放）是原子的。</li>
</ol>
<p>可以参考下面这篇文章：</p>
<p><a href="https://blog.csdn.net/weixin_37822792/article/details/112430570">C++面试问题：为什么条件变量要和互斥锁一起使用？</a></p>
</blockquote>
<p>那么使用条件变量，我们可以创造哪些有意思的工具呢？阻塞队列就是一个巧妙的应用。</p>
<h2 id="blockqueue">BlockQueue</h2>
<p>阻塞队列是一种非常常见的数据结构，它允许一个或多个生产者向Queue中写入数据，如果Queue满了，则阻塞住。允许一个或多个消费者读取Queue的数据，如果Queue为空，则一直阻塞直至Queue中有数据。</p>
<p>根据BlockQueue的两种阻塞行为，我们可以大胆的推测，这里可以用两个条件变量，分别控制写入阻塞和读取阻塞。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;condition_variable></span></span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">TaskType</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">BlockQueue</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">BlockQueue</span><span class="token punctuation">(</span>size_t capacity<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">capacity_</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    size_t <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lck</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>capacity_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    size_t <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lck</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>task_queue_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>TaskType <span class="token operator">*</span>task<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lck</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>task_queue_<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token operator">-></span>capacity_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token operator">-></span>full_cv_<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>lck<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">this</span><span class="token operator">-></span>task_queue_<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-></span>empty_cv_<span class="token punctuation">.</span><span class="token function">notify_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span>TaskType <span class="token operator">*</span><span class="token operator">*</span>task<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lck</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>task_queue_<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token operator">-></span>empty_cv_<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>lck<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token operator">*</span>task <span class="token operator">=</span> task_queue_<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        task_queue_<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-></span>full_cv_<span class="token punctuation">.</span><span class="token function">notify_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span>TaskType <span class="token operator">*</span><span class="token operator">></span> task_queue_<span class="token punctuation">;</span>
    size_t capacity_<span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>mutex mutex_<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>condition_variable full_cv_<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>condition_variable empty_cv_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述的例子，如果将<code>wait</code>改为<code>wait_for</code>的话，还可以方便的实现带<strong>timeout的BlockQueue</strong>，感兴趣的同学可以自己尝试一下。</p>
<h2 id="原子类型与原子操作">原子类型与原子操作</h2>
<p>C++中的原子类型的定义和使用十分简单。仅需要包含头文件<code>&lt;atomic&gt;</code>即可。使用<code>std::atomic&lt;T&gt;</code>的方式即可构造原子类型的变量。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;atomic></span></span>
std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">int32_t</span><span class="token operator">></span> i32_count<span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">uint64_t</span><span class="token operator">></span> u64_count<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>针对原子类型的变量，有许多的操作可用。最常用到的就是<code>++</code>用来计数。比如我们前面的使用mutex完成计数器的例子，其实使用原子类型会更加的简单和高效。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;atomic></span></span>

<span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">x_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">++</span> x_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> x_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> x_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以下是具体的几个方法：</p>
<table>
<thead>
<tr class="header">
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>store</td>
<td>用非原子对象替换当前对象的值。相等于线程安全的=操作</td>
</tr>
<tr class="even">
<td>load</td>
<td>原子地获取原子对象的值</td>
</tr>
<tr class="odd">
<td>fetch_add/fetch_sub</td>
<td>原子地对原子做加减操作，返回操作之前的值</td>
</tr>
<tr class="even">
<td><code>+=</code> / <code>-=</code></td>
<td>同上</td>
</tr>
<tr class="odd">
<td>fetch_and/fetch_or/fetch_xor</td>
<td>原子地对原子对象做与/或/异或地操作，返回操作之前的值</td>
</tr>
<tr class="even">
<td><code>&amp;=</code> / <code>|=</code> / <code>^=</code></td>
<td>同上</td>
</tr>
</tbody>
</table>
<p>另外，atomic类型的函数可以指定memory_order参数，用于约束atomic类型数据在多线程中的视图。感兴趣可以看这篇文章：<a href="https://zhuanlan.zhihu.com/p/31386431">https://zhuanlan.zhihu.com/p/31386431</a></p>
<p>一般我们使用默认的memory_order就已经足够了。</p>
<p>之后我们再介绍一个复杂但十分有用的原子操作：CAS（Compare And Swap）</p>
<p>看名字就知道，他的作用是，比较两个值，如果相同就交换。</p>
<p>百度上给了一个比较直观的解释：</p>
<ul>
<li>compare and swap，解决多线程并行情况下使用锁造成性能损耗的一种机制，CAS操作包含三个操作数——内存位置（V）、预期原值（A）和新值(B)。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。无论哪种情况，它都会在CAS指令之前返回该位置的值。CAS有效地说明了“我认为位置V应该包含值A；如果包含该值，则将B放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可。</li>
</ul>
<p>通过CAS操作，我们可以方便的实现无锁的线程安全队列：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;atomic></span></span>

<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">val_</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next_</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> val_<span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token operator">*</span>next_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span>Node <span class="token operator">*</span><span class="token operator">></span> <span class="token operator">&amp;</span>head<span class="token punctuation">,</span> Node <span class="token operator">*</span>new_node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    new_node<span class="token operator">-></span>next_ <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token function">compare_exchange_weak</span><span class="token punctuation">(</span>new_node<span class="token operator">-></span>next_<span class="token punctuation">,</span> new_node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span>Node <span class="token operator">*</span><span class="token operator">></span> head<span class="token punctuation">;</span>
    Node <span class="token operator">*</span>new_node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> new_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当我们插入一个节点的时候，首先尝试加入它，也就是<code>new_node-&gt;next_ = head;</code> 然后如果head没有变化的话，那么就更新head为我们新的节点，如果变化的话就不断重试。也就是<code>while (head.compare_exchange_weak(new_node-&gt;next_, new_node));</code> 的逻辑。</p>
<p>上面这个例子是所有的CAS介绍都会说到的，可以非常容易地帮助我们理解CAS地功能，但是对于<code>POP</code>操作，并不好实现。</p>
<p>另外其实还存在一个ABA地问题，需要解决。这里就不展开了。感兴趣地可以搜一下相关的资料，这里仅做简单地介绍。</p>
<h2 id="其他">其他</h2>
<p>最后我们看几个非常有意思地设计。</p>
<h3 id="pingpang-buffer">PingPang Buffer</h3>
<p>PingPang Buffer也被称为双Buffer。它的核心是这样地，由于一些系统配置需要不断地更新，而更新地过程中也会被不断地读取。如果使用之前的读写锁，就可能永远都更新不了（读线程一直占着锁），同时线程同步也是非常低效地一个过程。然后就诞生了PingPang Buffer这么个结构。</p>
<p>它的核心是有两块内存，一块用来给所有线程进行读操作，另一块用来给写线程进行更新，在更新完毕之后，交换这两个内存。新的内存变成了读内存，旧内存变成了写内存。</p>
<p>以下是一个简单的实现，和网上的其他版本可能略有不同，看思路即可。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;atomic></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">PingPangBuffer</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">PingPangBuffer</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>T<span class="token operator">></span> read_buffer<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>T<span class="token operator">></span> write_buffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        data_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> read_buffer<span class="token punctuation">;</span>
        data_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> write_buffer<span class="token punctuation">;</span>
        read_idx_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">read_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> data_<span class="token punctuation">[</span>read_idx_<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">write_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> write_idx <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> read_idx_<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>data_<span class="token punctuation">[</span>write_idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// sleep 1s</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> data_<span class="token punctuation">[</span>write_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">bool</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>mutex_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        read_idx_ <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> read_idx_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>T<span class="token operator">></span> data_<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> read_idx_<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>mutex mutex_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里<code>read_data</code>函数被多个读线程去调用。而<code>write_data</code>和<code>update</code>只有一个写线程进行调用。</p>
<p>使用一个<code>read_idx_</code>记录读的Buffer的下标，那么交换读写Buffer的操作就可以简化为<code>read_idx_ = 1 - read_idx_</code> 。不过下标切换之后，切换之前的读线程还在读旧数据。</p>
<p>而获取写数据的操作需要等待当前Buffer不再被使用了才可以再次被使用（反正早晚它都是可以被使用的），这里就直接使用了<code>shared_ptr</code>的<code>use_count</code>。</p>
<h3 id="线程安全的lrucache">线程安全的LRUCache</h3>
<p>一般Cache是使用std::unordered_map来实现的。和前面的读写锁类似，map支持多线程的读，但是仅支持单线程写入。这就会造成这个map的写入性能可能会较差。因此这里一般采用分shard的方式进行库的拆分。</p>
<p>一个简单的实现，先根据key分shard，然后每个分片都使用读写锁。（多线程的测试不太好写，这里只测试了过期时间和容量）</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span>

<span class="token comment">// 读写锁，就是前面原封不动的代码</span>
<span class="token keyword">class</span> <span class="token class-name">ReadWriteLock</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">ReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">reader_count_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">lock_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        read_mutex_<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>reader_count_ <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            write_mutex_<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token operator">++</span> reader_count_<span class="token punctuation">;</span>
        read_mutex_<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">unlock_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        read_mutex_<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">--</span> reader_count_<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>reader_count_ <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            write_mutex_<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        read_mutex_<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">lock_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        write_mutex_<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">unlock_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        write_mutex_<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>mutex read_mutex_<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>mutex write_mutex_<span class="token punctuation">;</span>
    <span class="token keyword">int64_t</span> reader_count_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">ValType</span><span class="token operator">></span>
<span class="token keyword">class</span> <span class="token class-name">ConcurrentLRUCache</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">const</span> KeyType<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> <span class="token keyword">const</span> ValType<span class="token operator">&amp;</span> val<span class="token punctuation">,</span> size_t time_ms<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">key_</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">val_</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">time_ms_</span><span class="token punctuation">(</span>time_ms<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
        KeyType key_<span class="token punctuation">;</span>
        ValType val_<span class="token punctuation">;</span>
        size_t time_ms_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> node_iter_type <span class="token operator">=</span> <span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span>Node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">ConcurrentLRUCache</span><span class="token punctuation">(</span>size_t capacity<span class="token punctuation">,</span> size_t shard<span class="token punctuation">,</span> size_t expire_time <span class="token comment">/* ms */</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        capacity_ <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
        shard_ <span class="token operator">=</span> shard<span class="token punctuation">;</span>
        capacity_per_cache_ <span class="token operator">=</span> capacity_ <span class="token operator">/</span> shard_<span class="token punctuation">;</span>
        expire_time_ <span class="token operator">=</span> expire_time<span class="token punctuation">;</span>
        cache_shard_list_<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>shard_<span class="token punctuation">)</span><span class="token punctuation">;</span>
        node_data_list_shard_list_<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>shard_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">bool</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">const</span> KeyType<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> ValType<span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">auto</span> <span class="token operator">&amp;</span>cache <span class="token operator">=</span> cache_shard_list_<span class="token punctuation">[</span><span class="token function">get_shard_idx</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        rw_lock_<span class="token punctuation">.</span><span class="token function">lock_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">auto</span> iter <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>iter <span class="token operator">==</span> cache<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// not found</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            size_t cur_ms <span class="token operator">=</span> <span class="token function">get_cur_time_ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            size_t record_ms <span class="token operator">=</span> iter<span class="token operator">-></span>second<span class="token operator">-></span>time_ms_<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur_ms <span class="token operator">-</span> record_ms <span class="token operator">></span> expire_time_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// found but expired</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            val <span class="token operator">=</span> iter<span class="token operator">-></span>second<span class="token operator">-></span>val_<span class="token punctuation">;</span>
            ok <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rw_lock_<span class="token punctuation">.</span><span class="token function">unlock_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ok<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">const</span> KeyType<span class="token operator">&amp;</span> key<span class="token punctuation">,</span> ValType<span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        size_t shard_idx <span class="token operator">=</span> <span class="token function">get_shard_idx</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> <span class="token operator">&amp;</span>cache <span class="token operator">=</span> cache_shard_list_<span class="token punctuation">[</span>shard_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> <span class="token operator">&amp;</span>data_list <span class="token operator">=</span> node_data_list_shard_list_<span class="token punctuation">[</span>shard_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
        rw_lock_<span class="token punctuation">.</span><span class="token function">lock_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// when found, del the older</span>
            <span class="token keyword">auto</span> iter <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>iter <span class="token operator">!=</span> cache<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                data_list<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>iter<span class="token operator">-></span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
                cache<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token comment">// when cache full, del the oldest</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> capacity_per_cache_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                cache<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>data_list<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>key_<span class="token punctuation">)</span><span class="token punctuation">;</span>
                data_list<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            size_t cur_ms <span class="token operator">=</span> <span class="token function">get_cur_time_ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            data_list<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> cur_ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">--</span>data_list<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        rw_lock_<span class="token punctuation">.</span><span class="token function">unlock_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">static</span> size_t <span class="token function">get_cur_time_ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>milliseconds<span class="token operator">></span></span></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>system_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">time_since_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    size_t <span class="token function">get_shard_idx</span><span class="token punctuation">(</span><span class="token keyword">const</span> KeyType<span class="token operator">&amp;</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>hash<span class="token operator">&lt;</span>KeyType<span class="token operator">></span> hash_func<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">hash_func</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">%</span> shard_<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    ReadWriteLock rw_lock_<span class="token punctuation">;</span>

    size_t capacity_<span class="token punctuation">;</span>
    size_t shard_<span class="token punctuation">;</span>
    size_t capacity_per_cache_<span class="token punctuation">;</span>
    size_t expire_time_<span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span>KeyType<span class="token punctuation">,</span> node_iter_type<span class="token operator">>></span> cache_shard_list_<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span>Node<span class="token operator">>></span> node_data_list_shard_list_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ConcurrentLRUCache<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token function">cache</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token comment">/* 1s */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"set: ("</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">") "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"set: ("</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">") "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 此时0-9已经被覆盖（容量），10-19已经过去500ms，20-29是最新时间</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">bool</span> is_ok <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 这里只有10-29被查到了</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"get: ("</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> data <span class="token operator">&lt;&lt;</span> <span class="token string">") "</span> <span class="token operator">&lt;&lt;</span> is_ok <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 总共过去800ms，10-29都没过期</span>
	std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">bool</span> is_ok <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 只有20-29被查到</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"get: ("</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> data <span class="token operator">&lt;&lt;</span> <span class="token string">") "</span> <span class="token operator">&lt;&lt;</span> is_ok <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 总共过去1100ms，20-29没过期</span>
    std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">bool</span> is_ok <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 20-29</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"get: ("</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> data <span class="token operator">&lt;&lt;</span> <span class="token string">") "</span> <span class="token operator">&lt;&lt;</span> is_ok <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="写在最后">写在最后</h2>
<p>知识的总结一直是一件令人愉悦的事情，时隔1年多有一次捡起技术博客。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>C++对象模型</title>
    <url>/2023/01/19/cpp-object-model/</url>
    <content><![CDATA[<p>本文主要是在看《Inside the C++ Object Model》的时候，想通过案例的方式加深一下理解。</p>
<p>首先，由于编译器有内存对齐的优化，比如：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token keyword">class</span> <span class="token class-name">WithAlign</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token keyword">char</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>push<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">class</span> <span class="token class-name">WithoutAlign</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token keyword">char</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"WithAlign: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>WithAlign<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"WithoutAlign: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>WithoutAlign<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Output:</span>
<span class="token comment">//  WithAlign: 8</span>
<span class="token comment">//  WithoutAlign: 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>内存对齐的类大小为8（按int 4字节对齐），未对齐的为5（int + char）。这里为了更容易理解，全部默认使用1字节对齐。</p>
<p>注意，本文中的内容均仅在自己的机器的Docker容器中做测试，环境为：64位 ubuntu 16.04， gcc 5.5。</p>
<pre class="line-numbers language-none"><code class="language-none"># lsb_release -a
Distributor ID: Ubuntu
Description:    Ubuntu 16.04.7 LTS
Release:        16.04
Codename:       xenial

# uname -a
Linux 06f25c7abffd 5.15.49-linuxkit #1 SMP Tue Sep 13 07:51:46 UTC 2022 x86_64 x86_64 x86_64 GNU&#x2F;Linux

# gcc --version
gcc (Ubuntu 5.5.0-12ubuntu1~16.04) 5.5.0 20171010<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="何为c对象模型">何为C++对象模型?</h2>
<p>引用《深度探索C++对象模型》这本书中的话：</p>
<p>有两个概念可以解释C++对象模型：</p>
<ol type="1">
<li>语言中直接支持面向对象程序设计的部分。包括构造函数、析构函数、多态、虚函数等。</li>
<li>对于各种支持的底层实现机制。这部分并没有标准化，因此不同的编译器可以有自己的实现。</li>
</ol>
<span id="more"></span>
<h2 id="c数据存放">C++数据存放</h2>
<p>C++变量有两种：</p>
<ol type="1">
<li>static：也称为类变量、类静态变量，由同一个类的所有实例共享。</li>
<li>non-static，也称为成员变量，每个类的实例均持有自己的一份。</li>
</ol>
<p>类成员函数由三种：</p>
<ol type="1">
<li>static：静态函数，属于该类，不需要实例也可以调用。</li>
<li>non-static：成员函数，一般需要实例才可以调用。</li>
<li>virtual：虚函数，用于实现多态。</li>
</ol>
<p>例子：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>push<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data_</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">++</span>instance_cnt_<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>            <span class="token comment">// constructor, non-static function</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                                     <span class="token comment">// destructor, virtual function</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getInstanceCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> instance_cnt_<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token comment">// static function</span>
    <span class="token keyword">int</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> data_<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>                        <span class="token comment">// non-static function</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                 <span class="token comment">// virtual function</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Base] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" data: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> data_<span class="token punctuation">;</span>                 <span class="token comment">// non-static data</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> instance_cnt_<span class="token punctuation">;</span>  <span class="token comment">// static data</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> Base<span class="token double-colon punctuation">::</span>instance_cnt_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Base <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Base <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Size "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" InstanceCnt "</span> <span class="token operator">&lt;&lt;</span> <span class="token class-name">Base</span><span class="token double-colon punctuation">::</span><span class="token function">getInstanceCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">getInstanceCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
              <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">.</span><span class="token function">getInstanceCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    a<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Output:</span>
<span class="token comment">// Size 12 InstanceCnt 2 2 2</span>
<span class="token comment">// [Base] address: 0x7ffffe4bf670 data: 100</span>
<span class="token comment">// [Base] address: 0x7ffffe4bf67c data: 200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>存储方式：</p>
<p><img src="C%2B%2B%20object%20model.png" alt="C++ Object Model" /></p>
<ol type="1">
<li>static data：单独存放，不计入class的size中。</li>
<li>non-static data：在实例存放，计入class的size。</li>
<li>static function：单独存放</li>
<li>non-static function：单独存放</li>
<li>virtual function：单独存放，一个具体类对应的虚函数会整合进一个表中，表中存放了虚函数的指针等信息，实例存放一到多个指向虚表的指针。</li>
</ol>
<p>这里可以看到Base类的size为12，其实就是存放了<code>vptr</code>和<code>int data_</code>这两个数据导致的。</p>
<p>那么我们就通过编译器和代码，来具体看一下每一部分的数据的存放方式。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>push<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data_</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">++</span>instance_cnt_<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>                            <span class="token comment">// constructor, non-static function</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"destructor: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token comment">// destructor, virtual function</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getInstanceCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> instance_cnt_<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>                  <span class="token comment">// static function</span>
    <span class="token keyword">int</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> data_<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>                                        <span class="token comment">// non-static function</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                 <span class="token comment">// virtual function</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[Base] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" data: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> data_<span class="token punctuation">;</span>                 <span class="token comment">// non-static data</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> instance_cnt_<span class="token punctuation">;</span>  <span class="token comment">// static data</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> Base<span class="token double-colon punctuation">::</span>instance_cnt_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Base <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Base <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">uint64_t</span> ptr_list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">uint64_t</span><span class="token punctuation">)</span>b<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">uint64_t</span> ptr <span class="token operator">=</span> ptr_list<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"instance "</span> <span class="token operator">&lt;&lt;</span> idx <span class="token operator">&lt;&lt;</span> <span class="token string">" address "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

        <span class="token keyword">uint64_t</span> pointer2vptr <span class="token operator">=</span> ptr<span class="token punctuation">;</span>                <span class="token comment">// 指向vptr的地址，前8字节存放vptr</span>
        <span class="token keyword">uint64_t</span> pointer2data <span class="token operator">=</span> ptr <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">;</span>            <span class="token comment">// 指向数据的地址，之后存放数据</span>
        <span class="token keyword">uint64_t</span> vptr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>pointer2vptr<span class="token punctuation">;</span>  <span class="token comment">// 获取vptr的具体数据</span>
        <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>pointer2data<span class="token punctuation">;</span>            <span class="token comment">// 获取data的具体数据</span>

        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  vptr address "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>pointer2vptr <span class="token operator">&lt;&lt;</span> <span class="token string">" vptr "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>vptr <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  data address "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>pointer2data <span class="token operator">&lt;&lt;</span> <span class="token string">" data "</span> <span class="token operator">&lt;&lt;</span> data <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

        <span class="token comment">// 关于虚表</span>
        <span class="token comment">// 1. 虚表存放了多个指针，顺序是：offset, type_info, virtual_func1, virtual_func2, ...</span>
        <span class="token comment">// 2. 虚函数在虚表中的顺序和声明的顺序一致</span>
        <span class="token comment">// 3. 实例的vptr指向的是第一个virtual_func，而不是vtable真正的起点</span>
        <span class="token comment">// 4. GCC对于虚析构函数会生成两个虚函数</span>
        <span class="token keyword">uint64_t</span> <span class="token operator">*</span>vtable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>vptr<span class="token punctuation">;</span>  <span class="token comment">// 严格来说是 vptr - 16</span>
        <span class="token keyword">uint64_t</span> offset_ptr <span class="token operator">=</span> vtable<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">uint64_t</span> type_info_ptr <span class="token operator">=</span> vtable<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">uint64_t</span> destructor1_ptr <span class="token operator">=</span> vtable<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 析构函数，但是不调用delete()</span>
        <span class="token keyword">uint64_t</span> destructor2_ptr <span class="token operator">=</span> vtable<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 析构函数，析构完调用delete()</span>
        <span class="token keyword">uint64_t</span> print_fn_ptr <span class="token operator">=</span> vtable<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"vtable address "</span> <span class="token operator">&lt;&lt;</span> vtable <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  offset address "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>offset_ptr <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  type_info address "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>type_info_ptr <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  destructor1 address "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>destructor1_ptr <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  destructor2 address "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>destructor2_ptr <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  print_fn address "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>print_fn_ptr <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

        <span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>print_fn_type<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// print函数的类型，入参是一个指针，且无返回值</span>

        <span class="token comment">// call print</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call from instance:"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span>Base <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call from vtable:"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span>print_fn_type<span class="token punctuation">)</span>print_fn_ptr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>del_fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span>del_fn<span class="token punctuation">)</span><span class="token punctuation">(</span>destructor2_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这里调用第二个析构函数</span>

        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Output:</span>
<span class="token comment">// instance 0 address 0x60200000eff0</span>
<span class="token comment">//   vptr address 0x60200000eff0 vptr 0x401fd8</span>
<span class="token comment">//   data address 0x60200000eff8 data 100</span>
<span class="token comment">// vtable address 0x401fd8</span>
<span class="token comment">//   offset address 0</span>
<span class="token comment">//   type_info address 0x401ff0</span>
<span class="token comment">//   destructor1 address 0x4017c6</span>
<span class="token comment">//   destructor2 address 0x401890</span>
<span class="token comment">//   print_fn address 0x4018b6</span>
<span class="token comment">// call from instance:</span>
<span class="token comment">// [Base] address: 0x60200000eff0 data: 100</span>
<span class="token comment">// call from vtable:</span>
<span class="token comment">// [Base] address: 0x60200000eff0 data: 100</span>
<span class="token comment">// destructor: 0x60200000eff0</span>

<span class="token comment">// instance 1 address 0x60200000efd0</span>
<span class="token comment">//   vptr address 0x60200000efd0 vptr 0x401fd8</span>
<span class="token comment">//   data address 0x60200000efd8 data 200</span>
<span class="token comment">// vtable address 0x401fd8</span>
<span class="token comment">//   offset address 0</span>
<span class="token comment">//   type_info address 0x401ff0</span>
<span class="token comment">//   destructor1 address 0x4017c6</span>
<span class="token comment">//   destructor2 address 0x401890</span>
<span class="token comment">//   print_fn address 0x4018b6</span>
<span class="token comment">// call from instance:</span>
<span class="token comment">// [Base] address: 0x60200000efd0 data: 200</span>
<span class="token comment">// call from vtable:</span>
<span class="token comment">// [Base] address: 0x60200000efd0 data: 200</span>
<span class="token comment">// destructor: 0x60200000efd0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ <span class="token parameter variable">-O0</span> <span class="token parameter variable">-std</span><span class="token operator">=</span>c++11 -fdump-class-hierarchy <span class="token parameter variable">-fsanitize</span><span class="token operator">=</span>address memory.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><code>-O0</code>：表示不做编译器优化</li>
<li><code>-fdump-class-hierarchy</code>: 会dump出内存布局</li>
<li><code>-std=c++11</code>: 使用C++11标准</li>
<li><code>-fsanitize=address</code>:开启内存检查</li>
</ul>
<p>和网上的很多写法有一点点不同，这里为了避免各种复杂的指针转换，就直接用uint64_t（测试环境是64位的）来存指针和计算了，只在打印地址的时候转换成<code>void *</code>。</p>
<p>具体的字段偏移量的分析，在注释中有详细的解释，这里不再重复了。仅做出整体的分析。</p>
<p>Dump出的内存布局：</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Vtable for Base
Base::_ZTV4Base: 5u entries
0     (int (*)(...))0
8     (int (*)(...))(&amp; _ZTI4Base)
16    (int (*)(...))Base::~Base
24    (int (*)(...))Base::~Base
32    (int (*)(...))Base::print

Class Base
   size=12 align=1
   base size=12 base align=1
Base (0x0x7f291b569360) 0
    vptr=((&amp; Base::_ZTV4Base) + 16u)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以清楚的看出，Base是12字节，按照1字节对齐。vptr指向了虚表首地址+16的位置。并且有两个<code>Base:~Base</code>的虚函数。</p>
<p>上面程序的输出也可以看出：</p>
<ol type="1">
<li>两个Instance本身的地址和vptr/data的地址均不同，说明这部分数据确实是存放在实例本身的。</li>
<li>虚表和虚函数的地址都不变，说明被所有实例共享。</li>
<li>类的成员函数本质上也是普通函数，只是默认有了个this指针，通过vtable的直接调用也可以证实。</li>
<li>虚析构函数会生成两个虚函数，前者是对象析构但不调用<code>delete()</code>，相当于手动调用析构函数<code>obj-&gt;~Base()</code>，后者是析构且调用<code>delete()</code>，相当于<code>delete obj</code>。将案例中的析构改为调用第一个的话，就会报内存泄露的错误了。<a href="https://itanium-cxx-abi.github.io/cxx-abi/abi.html#vtable-components">参考 CXX API</a></li>
</ol>
<h2 id="继承">继承</h2>
<h3 id="单继承">单继承</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>push<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data_</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                                                  <span class="token comment">// constructor, non-static function</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[A] destructor: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token comment">// destructor, virtual function</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                                  <span class="token comment">// virtual function</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[A] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" a: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> data_<span class="token punctuation">;</span>  <span class="token comment">// non-static data</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">B</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">A</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">data_</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[B] destructor: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[B] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span>                             <span class="token comment">// this</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" a: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_  <span class="token comment">// A</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" b: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_        <span class="token comment">// B</span>
                  <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> data_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">B</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">data_</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[C] destructor: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[C] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span>  <span class="token comment">// this</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" a: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>B<span class="token double-colon punctuation">::</span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>B<span class="token double-colon punctuation">::</span>A<span class="token double-colon punctuation">::</span>data_                                   <span class="token comment">// A</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" b: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>B<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>B<span class="token double-colon punctuation">::</span>data_  <span class="token comment">// B</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" c: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_        <span class="token comment">// C</span>
                  <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> data_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sizeof: A "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" B "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" C "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    A <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    A <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    A <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    a<span class="token operator">-></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// A::print</span>
    b<span class="token operator">-></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// A:print</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span>B <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// B:printB</span>
    c<span class="token operator">-></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// C:print</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span>B <span class="token operator">*</span><span class="token punctuation">)</span>c<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// B:printB</span>

    <span class="token keyword">delete</span> a<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> b<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> c<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Output:</span>
<span class="token comment">// Sizeof: A 12 B 16 C 20</span>
<span class="token comment">// [A] address: 0x142f030 a: 0x142f038 100</span>
<span class="token comment">// [A] address: 0x142f050 a: 0x142f058 100</span>
<span class="token comment">// [B] address: 0x142f050 a: 0x142f058 100 b: 0x142f05c 200</span>
<span class="token comment">// [C] address: 0x142f070 a: 0x142f078 100 0x142f078 100 b: 0x142f07c 200 c: 0x142f080 300</span>
<span class="token comment">// [B] address: 0x142f070 a: 0x142f078 100 b: 0x142f07c 200</span>
<span class="token comment">// [A] destructor: 0x142f030</span>
<span class="token comment">// [B] destructor: 0x142f050</span>
<span class="token comment">// [A] destructor: 0x142f050</span>
<span class="token comment">// [C] destructor: 0x142f070</span>
<span class="token comment">// [B] destructor: 0x142f070</span>
<span class="token comment">// [A] destructor: 0x142f070</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ -fdump-class-hierarchy single_inheritance.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>首先查看内存布局：</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Vtable for A
A::_ZTV1A: 5u entries
0     (int (*)(...))0
8     (int (*)(...))(&amp; _ZTI1A)
16    (int (*)(...))A::~A
24    (int (*)(...))A::~A
32    (int (*)(...))A::print

Class A
   size=12 align=1
   base size=12 base align=1
A (0x0x7f12dea0c7e0) 0
    vptr=((&amp; A::_ZTV1A) + 16u)

Vtable for B
B::_ZTV1B: 6u entries
0     (int (*)(...))0
8     (int (*)(...))(&amp; _ZTI1B)
16    (int (*)(...))B::~B
24    (int (*)(...))B::~B
32    (int (*)(...))A::print
40    (int (*)(...))B::printB

Class B
   size=16 align=1
   base size=16 base align=1
B (0x0x7f12de71bb60) 0
    vptr=((&amp; B::_ZTV1B) + 16u)
  A (0x0x7f12dea0c840) 0
      primary-for B (0x0x7f12de71bb60)

Vtable for C
C::_ZTV1C: 6u entries
0     (int (*)(...))0
8     (int (*)(...))(&amp; _ZTI1C)
16    (int (*)(...))C::~C
24    (int (*)(...))C::~C
32    (int (*)(...))C::print
40    (int (*)(...))B::printB

Class C
   size=20 align=1
   base size=20 base align=1
C (0x0x7f12de71bbc8) 0
    vptr=((&amp; C::_ZTV1C) + 16u)
  B (0x0x7f12de71bc30) 0
      primary-for C (0x0x7f12de71bbc8)
    A (0x0x7f12dea0c8a0) 0
        primary-for B (0x0x7f12de71bc30)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>存储：</p>
<ol type="1">
<li>A和之前的Base一样，没有啥好说的。大小<code>12 = vptr+int</code>。</li>
<li>B继承A。同时B也定义了自己的成员变量（虽然和A的相同，但二者不是同一个变量，可以通过obj-&gt;A::data_来访问父类的对象）。因此大小是<code>16 = vptr + A::int + B::int</code>。</li>
<li>C继承B。也定义了自己的成员变量。因此大小是<code>20 = vptr + A::int + B::int + C::int</code>。</li>
<li>通过每个<code>print</code>和<code>printB</code>的打印结果可以看出，派生类先存放了自己的基类的数据，之后才存放自己的数据。</li>
</ol>
<p>虚表：</p>
<p>每个类都有且只有一个虚表对象。</p>
<ol type="1">
<li>A和Base一样就不解释了。</li>
<li>B继承了A的<code>print</code>方法，同时自己又定义了<code>printB</code>方法，因此B复制了A的虚表结构，除了改了析构函数的地址外，还新增了<code>printB</code>的指针。</li>
<li>C继承了B，同时覆盖了<code>print</code>方法。因此C复制了B的虚表，修改了析构函数，并修改了<code>print</code>函数的指针。</li>
<li>可以总结个规律：单继承下，派生类有且只有一个虚表，相当于直接将基类的虚表复制一次，替换掉自己的覆盖的虚函数，并追加自己新增的虚函数。</li>
</ol>
<h3 id="多继承">多继承</h3>
<p>多继承比单继承复杂了很多。而且多继承一致被很多人诟病，像Java就直接不支持多继承。这里我们不考虑基类重名等情况。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>push<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data_</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[A] destructor: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[A1] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[A2] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> data_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">B</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data_</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[B] destructor: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[B1] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printB2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[B2] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> data_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">B</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">A</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">B</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">data_</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[C] destructor: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printB2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[C B2] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span>                                 <span class="token comment">// this</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" a: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>  <span class="token comment">// A</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" b: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>B<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>B<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>  <span class="token comment">// B</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" c: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_               <span class="token comment">// C</span>
                  <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[C] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span>                                    <span class="token comment">// this</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" a: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>  <span class="token comment">// A</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" b: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>B<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>B<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>  <span class="token comment">// B</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" c: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_               <span class="token comment">// C</span>
                  <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> data_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sizeof: A "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" B "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" C "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    C <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\ncall from C*"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    c<span class="token operator">-></span><span class="token function">printA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// A::printA1</span>
    c<span class="token operator">-></span><span class="token function">printA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// A::printA2</span>
    c<span class="token operator">-></span><span class="token function">printB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// B::printB1</span>
    c<span class="token operator">-></span><span class="token function">printB2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// C::printB2</span>
    c<span class="token operator">-></span><span class="token function">printC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// C::printC</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\ncall from dynamic_cast A* "</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">printA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">printA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\ncall from static_cast A*"</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">printA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">printA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\ncall from reinterpret_cast A*"</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">printA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">printA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\ncall from dynamic_cast B*"</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">printB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">printB2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\ncall from static_cast B*"</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">printB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">printB2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\ncall from reinterpret_cast B*"</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">printB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">printB2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">delete</span> c<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Output:</span>
<span class="token comment">// Sizeof: A 12 B 12 C 28</span>

<span class="token comment">// call from C*</span>
<span class="token comment">// [A1] address: 0x183a030 0x183a038 100</span>
<span class="token comment">// [A2] address: 0x183a030 0x183a038 100</span>
<span class="token comment">// [B1] address: 0x183a03c 0x183a044 200</span>
<span class="token comment">// [C B2] address: 0x183a030 a: 0x183a038 100  b: 0x183a044 200  c: 0x183a048 300</span>
<span class="token comment">// [C] address: 0x183a030 a: 0x183a038 100  b: 0x183a044 200  c: 0x183a048 300</span>

<span class="token comment">// call from dynamic_cast A* 0x183a030</span>
<span class="token comment">// [A1] address: 0x183a030 0x183a038 100</span>
<span class="token comment">// [A2] address: 0x183a030 0x183a038 100</span>

<span class="token comment">// call from static_cast A*0x183a030</span>
<span class="token comment">// [A1] address: 0x183a030 0x183a038 100</span>
<span class="token comment">// [A2] address: 0x183a030 0x183a038 100</span>

<span class="token comment">// call from reinterpret_cast A*0x183a030</span>
<span class="token comment">// [A1] address: 0x183a030 0x183a038 100</span>
<span class="token comment">// [A2] address: 0x183a030 0x183a038 100</span>

<span class="token comment">// call from dynamic_cast B*0x183a03c</span>
<span class="token comment">// [B1] address: 0x183a03c 0x183a044 200</span>
<span class="token comment">// [C B2] address: 0x183a030 a: 0x183a038 100  b: 0x183a044 200  c: 0x183a048 300</span>

<span class="token comment">// call from static_cast B*0x183a03c</span>
<span class="token comment">// [B1] address: 0x183a03c 0x183a044 200</span>
<span class="token comment">// [C B2] address: 0x183a030 a: 0x183a038 100  b: 0x183a044 200  c: 0x183a048 300</span>

<span class="token comment">// call from reinterpret_cast B*0x183a030</span>
<span class="token comment">// [A1] address: 0x183a030 0x183a038 100</span>
<span class="token comment">// [A2] address: 0x183a030 0x183a038 100</span>

<span class="token comment">// [C] destructor: 0x183a030</span>
<span class="token comment">// [B] destructor: 0x183a03c</span>
<span class="token comment">// [A] destructor: 0x183a030</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ -fdump-class-hierarchy single_inheritance.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>先查看内存布局：</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Vtable for A
A::_ZTV1A: 6u entries
0     (int (*)(...))0
8     (int (*)(...))(&amp; _ZTI1A)
16    (int (*)(...))A::~A
24    (int (*)(...))A::~A
32    (int (*)(...))A::printA1
40    (int (*)(...))A::printA2

Class A
   size=12 align=1
   base size=12 base align=1
A (0x0x7f640b38b7e0) 0
    vptr=((&amp; A::_ZTV1A) + 16u)

Vtable for B
B::_ZTV1B: 6u entries
0     (int (*)(...))0
8     (int (*)(...))(&amp; _ZTI1B)
16    (int (*)(...))B::~B
24    (int (*)(...))B::~B
32    (int (*)(...))B::printB1
40    (int (*)(...))B::printB2

Class B
   size=12 align=1
   base size=12 base align=1
B (0x0x7f640b38b840) 0
    vptr=((&amp; B::_ZTV1B) + 16u)

Vtable for C
C::_ZTV1C: 14u entries
0     (int (*)(...))0
8     (int (*)(...))(&amp; _ZTI1C)
16    (int (*)(...))C::~C
24    (int (*)(...))C::~C
32    (int (*)(...))A::printA1
40    (int (*)(...))A::printA2
48    (int (*)(...))C::printB2
56    (int (*)(...))C::printC
64    (int (*)(...))-12
72    (int (*)(...))(&amp; _ZTI1C)
80    (int (*)(...))C::_ZThn12_N1CD1Ev
88    (int (*)(...))C::_ZThn12_N1CD0Ev
96    (int (*)(...))B::printB1
104   (int (*)(...))C::_ZThn12_N1C7printB2Ev

Class C
   size=28 align=1
   base size=28 base align=1
C (0x0x7f640b0e25b0) 0
    vptr=((&amp; C::_ZTV1C) + 16u)
  A (0x0x7f640b38b8a0) 0
      primary-for C (0x0x7f640b0e25b0)
  B (0x0x7f640b38b900) 12
      vptr=((&amp; C::_ZTV1C) + 80u)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol type="1">
<li>A、B本身没啥好说的。占用空间都是<code>12 = vptr + int</code></li>
<li>C继承A和B，顺序是先A再B。C中存放了A、B的数据，并且有两个虚指针（后续解释），因此大小为<code>28 = vptr + A::int + vptr + B::int + C::int</code>。</li>
<li>根据C打印的结果，可以看出
<ol type="1">
<li><code>A::data</code>的地址偏移了8，前面存放了<code>vptr</code></li>
<li><code>B::data</code>偏移12，前面存放了<code>vptr</code>和<code>A::data</code>的数据</li>
<li><code>C::data</code>偏移24，前面存放了<code>vptr</code>, <code>A::data</code>, <code>vptr</code>, <code>B::data</code>的数据</li>
</ol></li>
<li>可以看出，派生类存放数据顺序为：虚指针1 + 基类1的数据 + 虚指针2 + 基类2的数据 + ... + 自己的数据。另外如果继承的多个类，有的有虚函数有的没有，则优先存有虚函数的。<a href="https://www.cnblogs.com/pandamohist/p/13882020.html">参考</a></li>
</ol>
<p>虚表：</p>
<ol type="1">
<li>A、B的虚表很简单。</li>
<li>C的虚表有两个，存储上是连续的，每个虚表都是<code>offset + type_info + func1 + func2 + ...</code> 的顺序。</li>
<li>C有两个虚指针，第一个的偏移量是0，第二个是<code>12</code>，正好是<code>vptr</code> + <code>int</code>的大小。</li>
<li>第一个虚指针指向第一个虚表的第一个虚函数，第二个虚指针指向了第二个虚表的第一个虚函数。</li>
<li>虚函数调用，对于C的实例，如果转换为其他类型指针，则分情况：
<ol type="1">
<li><code>A*</code>指针，由于偏移量是0，所以直接复用C的第一个表即可。</li>
<li><code>B*</code>指针，通过<code>static_cast</code>或者<code>dynamic_cast</code>可以得到<code>B*</code>指针，此时指针指向了原先实例偏移12字节的位置，其实也就是C中基类B的地址。在调用时，严格对应自己的虚表来执行（此时自己的虚表其实是C的第二个虚表）。
<ol type="1">
<li>对于<code>printB1</code>的调用，其实就是调用原生B的函数，因此直接调用即可。</li>
<li>对于<code>printB2</code>的调用，由于C进行了覆盖，这里的虚表对应的函数是<code>_ZThn12_N1C7printB2Ev</code>，通过工具解析<code>c++filt _ZThn12_N1C7printB2Ev --&gt; non-virtual thunk to C::printB2()</code>，这是编译器生成的新函数，调用它相对于把当前this指针修正（偏移12字节）以后，再调用<code>C::printB2()</code>。</li>
</ol></li>
<li><code>C*</code>指针，对于A和C的函数，直接使用第一个虚表来调用。对于B的函数，相当于先自动转换为<code>B*</code>类型，再调用。</li>
</ol></li>
</ol>
<p>最后，让我们直接通过虚表来调用这里所有的函数，以及强制调用被覆盖的原始函数。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>push<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data_</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[A] destructor: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[A1] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[A2] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> data_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">B</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data_</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[B] destructor: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[B1] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printB2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[B2] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> data_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">B</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">A</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">B</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">data_</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[C] destructor: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printB2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[C B2] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span>                                 <span class="token comment">// this</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" a: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>  <span class="token comment">// A</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" b: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>B<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>B<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>  <span class="token comment">// B</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" c: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_               <span class="token comment">// C</span>
                  <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[C] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span>                                    <span class="token comment">// this</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" a: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>  <span class="token comment">// A</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" b: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>B<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>B<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>  <span class="token comment">// B</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" c: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_               <span class="token comment">// C</span>
                  <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> data_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>print_fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

print_fn <span class="token function">get_func</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">uint64_t</span> vptr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>print_fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>vptr<span class="token punctuation">)</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    C <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// printA1</span>
    <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A::printA1"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call from C* "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        c<span class="token operator">-></span><span class="token function">printA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        A <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call from A* "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        a<span class="token operator">-></span><span class="token function">printA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call from vtable"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token function">get_func</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// printA2</span>
    <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A::printA2"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call from C* "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        c<span class="token operator">-></span><span class="token function">printA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        A <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call from A* "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        a<span class="token operator">-></span><span class="token function">printA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call from vtable"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token function">get_func</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// printB1</span>
    <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B::printB1"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call from C* "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        c<span class="token operator">-></span><span class="token function">printB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call from B*"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        B <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        b<span class="token operator">-></span><span class="token function">printB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call from B vtable"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token function">get_func</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call from C vtable"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token function">get_func</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>c <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// printB2</span>
    <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C::printB2"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call from C* "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        c<span class="token operator">-></span><span class="token function">printB2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        B <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call from B* "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        b<span class="token operator">-></span><span class="token function">printB2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call from B vtable"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token function">get_func</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call from C vtable"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token function">get_func</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">get_func</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token operator">-</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// force call B::printB2</span>
    <span class="token punctuation">&#123;</span>
        B <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>

        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call from B vtable C::printB2"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token function">get_func</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"force call B::printB2"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        B <span class="token function">tmp</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">get_func</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">delete</span> c<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Output:</span>

<span class="token comment">// A::printA1</span>
<span class="token comment">// call from C* 0x15b7c20</span>
<span class="token comment">// [A1] address: 0x15b7c20 0x15b7c28 100</span>
<span class="token comment">// call from A* 0x15b7c20</span>
<span class="token comment">// [A1] address: 0x15b7c20 0x15b7c28 100</span>
<span class="token comment">// call from vtable</span>
<span class="token comment">// [A1] address: 0x15b7c20 0x15b7c28 100</span>

<span class="token comment">// A::printA2</span>
<span class="token comment">// call from C* 0x15b7c20</span>
<span class="token comment">// [A2] address: 0x15b7c20 0x15b7c28 100</span>
<span class="token comment">// call from A* 0x15b7c20</span>
<span class="token comment">// [A2] address: 0x15b7c20 0x15b7c28 100</span>
<span class="token comment">// call from vtable</span>
<span class="token comment">// [A2] address: 0x15b7c20 0x15b7c28 100</span>

<span class="token comment">// B::printB1</span>
<span class="token comment">// call from C* 0x15b7c20</span>
<span class="token comment">// [B1] address: 0x15b7c2c 0x15b7c34 200</span>
<span class="token comment">// call from B*</span>
<span class="token comment">// [B1] address: 0x15b7c2c 0x15b7c34 200</span>
<span class="token comment">// call from B vtable</span>
<span class="token comment">// [B1] address: 0x15b7c2c 0x15b7c34 200</span>
<span class="token comment">// call from C vtable</span>
<span class="token comment">// [B1] address: 0x15b7c2c 0x15b7c34 200</span>

<span class="token comment">// C::printB2</span>
<span class="token comment">// call from C* 0x15b7c20</span>
<span class="token comment">// [C B2] address: 0x15b7c20 a: 0x15b7c28 100  b: 0x15b7c34 200  c: 0x15b7c38 300</span>
<span class="token comment">// call from B* 0x15b7c2c</span>
<span class="token comment">// [C B2] address: 0x15b7c20 a: 0x15b7c28 100  b: 0x15b7c34 200  c: 0x15b7c38 300</span>
<span class="token comment">// call from B vtable</span>
<span class="token comment">// [C B2] address: 0x15b7c20 a: 0x15b7c28 100  b: 0x15b7c34 200  c: 0x15b7c38 300</span>
<span class="token comment">// call from C vtable</span>
<span class="token comment">// [C B2] address: 0x15b7c20 a: 0x15b7c28 100  b: 0x15b7c34 200  c: 0x15b7c38 300</span>
<span class="token comment">// [C B2] address: 0x15b7c20 a: 0x15b7c28 100  b: 0x15b7c34 200  c: 0x15b7c38 300</span>

<span class="token comment">// call from B vtable C::printB2</span>
<span class="token comment">// [C B2] address: 0x15b7c20 a: 0x15b7c28 100  b: 0x15b7c34 200  c: 0x15b7c38 300</span>
<span class="token comment">// force call B::printB2</span>
<span class="token comment">// [B2] address: 0x15b7c2c 0x15b7c34 200</span>

<span class="token comment">// [B] destructor: 0x7ffe9a25c23c</span>
<span class="token comment">// [C] destructor: 0x15b7c20</span>
<span class="token comment">// [B] destructor: 0x15b7c2c</span>
<span class="token comment">// [A] destructor: 0x15b7c20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="菱形继承">菱形继承</h3>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>push<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data_</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[A] destructor: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[A1] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[A2] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> data_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">B</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">A</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">data_</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[B] destructor: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[B A1] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[B1] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span>                                   <span class="token comment">// this</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" a: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>  <span class="token comment">// A</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" b: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_               <span class="token comment">// B</span>
                  <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printB2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[B2] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span>                                   <span class="token comment">// this</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" a: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>  <span class="token comment">// A</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" b: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_               <span class="token comment">// B</span>
                  <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> data_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">A</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">data_</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[C] destructor: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[C A2] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printC1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[C1] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span>                                   <span class="token comment">// this</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" a: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>  <span class="token comment">// A</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" b: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_               <span class="token comment">// C</span>
                  <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printC2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[C2] address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span>                                   <span class="token comment">// this</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" a: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>A<span class="token double-colon punctuation">::</span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>  <span class="token comment">// A</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" b: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>data_               <span class="token comment">// C</span>
                  <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> data_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">C</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">D</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">B</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">C</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">data_</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> data_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sizeof: A "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" B "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" C "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" D "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span>
              <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    D<span class="token operator">*</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// d->printA1();</span>
    <span class="token comment">// dynamic_cast&lt;A*>(d)->printA1();</span>
    <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">printA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>C<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">printA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// d->printA2();</span>
    <span class="token comment">// dynamic_cast&lt;A*>(d)->printA2();</span>
    <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">printA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>C<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">printA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Output:</span>
<span class="token comment">// Sizeof: A 12 B 16 C 16 D 36</span>
<span class="token comment">// [B A1] address: 0x1fc7030 0x1fc703c 300</span>
<span class="token comment">// [A1] address: 0x1fc7040 0x1fc7048 200</span>
<span class="token comment">// [A2] address: 0x1fc7030 0x1fc7038 100</span>
<span class="token comment">// [C A2] address: 0x1fc7040 0x1fc704c 400</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>内存：</p>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">
Vtable for A
A::_ZTV1A: 6u entries
0     (int (*)(...))0
8     (int (*)(...))(&amp; _ZTI1A)
16    (int (*)(...))A::~A
24    (int (*)(...))A::~A
32    (int (*)(...))A::printA1
40    (int (*)(...))A::printA2

Class A
   size=12 align=1
   base size=12 base align=1
A (0x0x7f0d6f469360) 0
    vptr=((&amp; A::_ZTV1A) + 16u)

Vtable for B
B::_ZTV1B: 8u entries
0     (int (*)(...))0
8     (int (*)(...))(&amp; _ZTI1B)
16    (int (*)(...))B::~B
24    (int (*)(...))B::~B
32    (int (*)(...))B::printA1
40    (int (*)(...))A::printA2
48    (int (*)(...))B::printB1
56    (int (*)(...))B::printB2

Class B
   size=16 align=1
   base size=16 base align=1
B (0x0x7f0d6f4add68) 0
    vptr=((&amp; B::_ZTV1B) + 16u)
  A (0x0x7f0d6f4694e0) 0
      primary-for B (0x0x7f0d6f4add68)

Vtable for C
C::_ZTV1C: 8u entries
0     (int (*)(...))0
8     (int (*)(...))(&amp; _ZTI1C)
16    (int (*)(...))C::~C
24    (int (*)(...))C::~C
32    (int (*)(...))A::printA1
40    (int (*)(...))C::printA2
48    (int (*)(...))C::printC1
56    (int (*)(...))C::printC2

Class C
   size=16 align=1
   base size=16 base align=1
C (0x0x7f0d6f4ade38) 0
    vptr=((&amp; C::_ZTV1C) + 16u)
  A (0x0x7f0d6f4695a0) 0
      primary-for C (0x0x7f0d6f4ade38)

Vtable for D
D::_ZTV1D: 16u entries
0     (int (*)(...))0
8     (int (*)(...))(&amp; _ZTI1D)
16    (int (*)(...))D::~D
24    (int (*)(...))D::~D
32    (int (*)(...))B::printA1
40    (int (*)(...))A::printA2
48    (int (*)(...))B::printB1
56    (int (*)(...))B::printB2
64    (int (*)(...))-16
72    (int (*)(...))(&amp; _ZTI1D)
80    (int (*)(...))D::_ZThn16_N1DD1Ev
88    (int (*)(...))D::_ZThn16_N1DD0Ev
96    (int (*)(...))A::printA1
104   (int (*)(...))C::printA2
112   (int (*)(...))C::printC1
120   (int (*)(...))C::printC2

Class D
   size=36 align=1
   base size=36 base align=1
D (0x0x7f0d6f524a10) 0
    vptr=((&amp; D::_ZTV1D) + 16u)
  B (0x0x7f0d6f4adf08) 0
      primary-for D (0x0x7f0d6f524a10)
    A (0x0x7f0d6f469660) 0
        primary-for B (0x0x7f0d6f4adf08)
  C (0x0x7f0d6f4adf70) 16
      vptr=((&amp; D::_ZTV1D) + 80u)
    A (0x0x7f0d6f4696c0) 16
        primary-for C (0x0x7f0d6f4adf70)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol type="1">
<li>A, B, C三个的大小之前已经解释过了。</li>
<li>D同时继承B和C，这里B和C中各有一份A的数据。D中认为B、C中的A数据是不同的，因此D中存在两份A的数据，可以称为<code>B::A</code>和<code>C::A</code>。同时D有两个虚表。所以内存为 <code>36 = B:vptr + B:A:int + B:int + C:vptr + C:A:int + C:int + D:int</code></li>
</ol>
<p>虚表：</p>
<ol type="1">
<li>这里也和多继承一样，有两个虚表。</li>
<li>其中由于D中有两个A的数据，对应的两个虚表中的A的函数的指针就不做偏移。也就是说，如果转换为<code>B*</code>指针，则控制<code>B::A</code>的数据，反之亦然。</li>
<li>D不能直接调用A的任何变量和函数，因为B、C分别覆盖了其中的函数，编译器会报错 <code>ambiguous</code>。</li>
</ol>
<p>具体使用虚表来调用的例子就不给出了，对照内存布局，很容易看出来。</p>
<h3 id="虚继承">虚继承</h3>
<p>虚继承是为了解决菱形继承而存在的。由于C++本身就不推荐多继承，出现菱形继承的情况又更少了。我们只需要知道虚继承可以减少内存的占用即可。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>push<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[A] destructor: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> a_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[B] destructor: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> b_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[C] destructor: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> c_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">C</span></span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token operator">~</span><span class="token function">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[D] destructor: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> d_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sizeof: A "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" B "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" C "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" D "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span>
              <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    D d<span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>a_ <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>B<span class="token double-colon punctuation">::</span>a_ <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>C<span class="token double-colon punctuation">::</span>a_ <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">.</span>a_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">.</span>B<span class="token double-colon punctuation">::</span>a_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">.</span>C<span class="token double-colon punctuation">::</span>a_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 三部分的值相同</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Output:</span>
<span class="token comment">// Sizeof: A 12 B 24 C 24 D 40</span>
<span class="token comment">// 3 3 3</span>
<span class="token comment">// [D] destructor: 0x7ffd41e292a0</span>
<span class="token comment">// [C] destructor: 0x7ffd41e292ac</span>
<span class="token comment">// [B] destructor: 0x7ffd41e292a0</span>
<span class="token comment">// [A] destructor: 0x7ffd41e292bc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这种情况下，D中只有一份A的数据。D中有3个虚指针以及A，B，C，D自身的4个int，因此大小为<code>40 = vptr x 3 + int x 4</code>。但是dump出的内存结构很复杂，感兴趣的同学可以自行测试一下。</p>
<h2 id="获取函数的地址">获取函数的地址</h2>
<p>最后，补充一下如果在代码中直接获取函数的地址。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>

<span class="token comment">// 普通C函数</span>
<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data_</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> <span class="token function">add1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">+</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>data_ <span class="token operator">+</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> data_<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">uint64_t</span> <span class="token function">get_func</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">uint64_t</span> vptr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>vptr<span class="token punctuation">)</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// C函数</span>
    <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"normal func"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>add_fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        add_fn fn <span class="token operator">=</span> <span class="token punctuation">(</span>add_fn<span class="token punctuation">)</span>add<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>fn <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 类静态函数</span>
    <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"class static func"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>add_fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        add_fn fn <span class="token operator">=</span> <span class="token punctuation">(</span>add_fn<span class="token punctuation">)</span>Base<span class="token double-colon punctuation">::</span>add<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>fn <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token class-name">Base</span><span class="token double-colon punctuation">::</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 成员函数（非虚函数）</span>
    <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"class non-virtual func 1"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span>Base<span class="token double-colon punctuation">::</span><span class="token operator">*</span>add_fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        add_fn fn <span class="token operator">=</span> <span class="token punctuation">(</span>add_fn<span class="token punctuation">)</span><span class="token operator">&amp;</span>Base<span class="token double-colon punctuation">::</span>add1<span class="token punctuation">;</span>
        Base <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>fn <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">.</span><span class="token function">add1</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"class non-virtual func 2"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>add_fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        add_fn fn <span class="token operator">=</span> <span class="token punctuation">(</span>add_fn<span class="token punctuation">)</span><span class="token operator">&amp;</span>Base<span class="token double-colon punctuation">::</span>add1<span class="token punctuation">;</span>
        Base <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>fn <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">.</span><span class="token function">add1</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 成员函数（虚函数）,通过函数名</span>
    <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"class virtual func 1"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span>Base<span class="token double-colon punctuation">::</span><span class="token operator">*</span>add_fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        add_fn fn <span class="token operator">=</span> <span class="token punctuation">(</span>add_fn<span class="token punctuation">)</span><span class="token operator">&amp;</span>Base<span class="token double-colon punctuation">::</span>add2<span class="token punctuation">;</span>
        Base <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Base<span class="token double-colon punctuation">::</span>add2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>fn <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">.</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
                  <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 成员函数（虚函数）,通过虚表</span>
    <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"class virtual func 2"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>add_fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Base <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        add_fn fn <span class="token operator">=</span> <span class="token punctuation">(</span>add_fn<span class="token punctuation">)</span><span class="token function">get_func</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>fn <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">.</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Output:</span>
<span class="token comment">// normal func</span>
<span class="token comment">// 0x400af6 300 300</span>
<span class="token comment">// class static func</span>
<span class="token comment">// 0x40116f 300 300</span>
<span class="token comment">// class non-virtual func 1</span>
<span class="token comment">// 0x40112c 400 400</span>
<span class="token comment">// class non-virtual func 2</span>
<span class="token comment">// 0x40112c 400 400</span>
<span class="token comment">// class virtual func 1</span>
<span class="token comment">// 0x40114e 0x1 500 500</span>
<span class="token comment">// class virtual func 2</span>
<span class="token comment">// 0x40114e 500 500</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
</search>
